Goal: to develop a solid library of classes and functions in which to
implement a robust, enjoyable, and graphically-modern 2d video game,
including network support.

MAJOR TASKS:
/ circle/polygon collision/entity areas
/ physics engine
- console command stuff
- console logger/debugging logger
? embedded scripting
- split world into client and server and add networking
- music and sound effects
/ comment/document the code with doxygen
- exceptions for user errors
/ x/y independent scaling (the physics portion of that is tough)
/ document the behavior of Widget, Layout, the Rendering stack,
  and all the other complicated systems.
- UI demonstration - every UI feature demonstrated in a series
  of tabbed widgets.
- abstraction of Engine2 classes into interfaces, to provide as
  much flexibility as possible, and to avoid biasing game physics, etc.
- ensure different areas of the engine are cleanly separated so that
  they could be compiled without others (i.e. core+engine could be
  used without gui or render, etc) -- make dependency chart
- motion blur (via projected 3d textures, or maybe pixel shader)

DISASTEROIDS:
- rewrite design docs in dis_main.cpp to reflect actual state of the game (see notes/dis_game_design.txt)
** polish-related **
- art: fix Interloper proportions
- art: add bigger stuff in the background (galaxies, nebulae, etc)
- anthropomorphize the ships for the intro, credits, etc, similar to opa-opa in zillion.
- make menus use minerals/powerups for checkmarks, use Solitary as a radio button mark,
  and show the different colors of Interloper (or maybe Devourment?) as the difficulty is changed.
- death sequences for player and Demi
- credits and references screen
** feature-related **
- make yellow tractor beam send powerups away from player instead of toward (otherwise the
  yellow tractor beam helps the player inadvertently).
- make Demi ignore shade with respect to yellow tractor beam targets.
- make Demi prioritize option powerups highest in terms of green tractor beam targets.
- Demi defense mode: predict attacks (from projectile weapons) and defend by throwing asteroids
  in the way to block.
- change pea shooter secondary fire to spread shot, and change gauss gun into charge-up weapon
  which works as the current pea shooter secondary does.
- change gauss gun reticle effect (and add for player) -- have 4 reticle effects home in on the
  target, and when they meet, it fires.  this is to give a better sense of when the enemy will
  fire the gauss gun.  also this gives the player a more-present visual cue as to when the gauss
  gun is charged.
- get rid of weapon status bar in order to make space for option powerup display in HUD.
- starting tip -- write up a bunch of tips that will be shown when the game is started so the
  player can learn all the features of the game -- maybe make the tip be shown in the inventory
  screen so as not to disrupt the UI flow.
- make the player ship size depend on mass (so that it gets larger when heaver armor is equipped).
- make tractor beams grow from a point when activated, and shrink to a point when deactivated.
- make the wave sequences programmable via config file, and specifiable via commandline,
  so specifying a debug wave sequence is easy.  maybe make a hardcoded wave sequence that
  will be used for the game.
- really need a powerup system -- stoke mode, but also random powerups that pop out of
  enemies and asteroids -- invincibility, infinite power, super speed, double damage,
  double firing speed
- additional mode for Interloper (maybe spawn them in different, fixed modes) -
  where their flocking behavior is higher priority.  another mode should be
  where they flock in the form of a snake.  the head will decide where to go, and
  the body will provide extra mass to the collisions
- additional mode for Shade - maybe hide behind asteroids
  and make bullets curve around stuff toward the player.
- additional mode for Revulsion - synchronize firing (?) once the player has
  been surrounded.  this will cause the player to need to avoid being surrounded.
- additional mode for Demi - spawn a bunch of Interlopers from each weapon port (all 4?)
  which become snake-like arms which then flail around smashy-smashying things.
  as you destroy each Interloper, it telescopes down.  If you destroy the base Interloper,
  the arm detaches and becomes a snake-flock.
- additional mode for Demi - spawn a Revulsion at each weapon port (all 4?), which
  stick to the ports, and fire gauss guns at you.  these should look like creepy eyes.  maybe
  make the revulsions not turn away when you look at them (?).  the player can destroy them
  normally.
- additional mode for Demi - flurry of pea-shooter fire, similar to many shmups, where
  the idea is just to dodge it all (or use tractor beam to push away).
- additional mode for Demi - spawn a bunch of Interlopers which then all
  fly back and surround the Demi continuously to make a shield, making it
  extremely hard to damage the Demi.  Make the Demi use the railgun during
  this phase.  At some point, have the Demi reject the shield by flinging
  it all away with its tractor beams.  Or/also make a mode where Demi collects
  all asteroids into a shield surrounding it and then harasses the player until
  it takes a certain amount of damage, then flings the asteroids at the player.
- additional mode for Demi - spin around shooting missiles which stop and wait,
  and then all converge on the player
- Demi: add a drone which changes based on what state it's in, so the player has
  an audio cue as to what might happen (only have a few different drones, not
  unique ones for each state).
- make the gauss gun use a charge-up so it doesn't fire immediately --
  have it project a small red laser which grows a little to indicate
  the charge, then fire with a blast.
- make the gauss gun fire through stuff so you can damage multiple things if they line up?
- configure a single button that, when held down sucks everything nearby in using
  a cool spiraling effect, and then when released, fires the EMP core.
- merged grenades should have a higher threshold of detonation.  i.e.
  hitting something with more force or something heaver, or a bullet, etc.
- When a Mortal is being damaged by something it's strong, weak
  or immune against, it should make a particular sound to indicate that.
- forget the 4x item status screen.  upgrading should be one way,
  and the inventory should just show what level item it is.  this also
  means you can't skip buying a certain level of something.
  furthermore, make higher upgrade levels, so the madness can continue
- infinite weapon/powerup/enemy levels?  this would require some thought on
  the prices for everything.
- add key to dump shields into power cells (?)
- add key to dumb power cells into shields (?)
- make Devourment (and Demi?) track who damaged it and how much, so it can retaliate
  against the ship that damaged it above a certain threshold.  it would be interesting
  to see some fights between Demi and Devourment.
- possibly make Devourment have a time-based health-recharge behavior, so you
  have to do heavy damage to it quickly to kill it.
  after the timer expires, have it pulse green to indicate it's healed
  or just make it get healed by eating minerals.
- make Demi push away if it's taking too much damage and the player is close
- make smart ballistics not be canceled out by other ballistics (i'm thinking
  mainly of the pea-shooter shooting a full charge and getting canceled
  out by some puny other ballistic).  it should get weakened slightly, and
  get correspondingly smaller.
- make Shade respond as a charged particle in a magnetic field if it's
  touching a tractor beam, or maybe become disabled if it's hit by a red tractor beam
- add advanced behaviors for higher level enemies (like escaping Devourments)
- when a new high score is posted and you're taken back to the title screen,
  the just-added score should be highlighted or blinking somehow
- add collision_location and collision_normal to LineTrace
- referring to the accumulated force on an entity is uncertain.  there
  should be some sort of previous-frame accumulated force accessor,
  for functions that use it (e.g. intercept course stuff)
- split the physics and visibility computation up so their frame
  processing isn't dependent.  this requires addition of some "scale-factor
  velocity" property on entities.  there will also be a problem with code that
  sets the position of entities (or sets any value) directly (this is a no-no
  in a linear-interpolation world).
- have the debris spawning in Mortal.  it should be done in Damage,
  and the subclasses of Mortal should specify the debris type (rocks,
  metal, minerals, blood, guts, etc).
- make enemies flash yellow when their health is low (maybe only Demi, Devourment and the player)
- red flashing for damage should also depend on max health, so that it gives a
  relative measure of a damage, not absolute hit point damage.
- if super-stoke thing is added, that can be indicated by the ship flashing
  white or blue or something
- to limit the length of waves, there can be a time limit after which all
  the enemies are SetTarget'ed against the player (which can happen every
  few seconds, so the player can't just EMP them to escape).
  in general, need some mechanism for the player to not be able to delay
  ending a wave.  maybe some sort of "berserk" mode for enemies, with visual
  (and audio) cues, where the enemies become extra dangerous.
- change gauss gun's fire rate to be based on how fast it can be charged back
  up by the power generator -- also, the fire sequence should start with the
  gun completely discharged.. holding the fire button down will then charge
  and fire it, as a reticle homes in on the mouse cursor to indicate when
  it will fire.  charge should be persistent, so if you let go of the fire
  button before the weapon discharged, it should save the power it accumulated.
  NOTE: this might require a redesign of the power generation system, because
  the amount of power to supply to the gauss gun will depend on how much
  power is available.
- split up high scores into difficulty levels
- change missiles: they should not be able to flip around at any angle, but
  only travel in circles (acceleration perpendicular to velocity).
  missiles should be made much heavier, so they're not deflected away by
  tractors as easily.
- add validation to Dis::Config modifiers
- add "sprint" powerup (or maybe have it be built-in) which would make your
  engines use twice the power, but accelerate 1.5x or 2x or some factor
  better.  use double-forward keypress to start a sprint.
- some of the effect subclasses can be collapsed together.  make a generic effect.
** sound-system-related **
- there should be a drone for the power generator -- max volume at 0%, zero
  volume at 100%, low frequency at 0%, high frequency at 100%.
- make shield damage have different sounds when the shield is at different
  powers, so there's a sound cue (as well as the visual cue) as to what the
  status of the shield is.
** bugs **
** references **
- asteroids -- obvious
- star control 2 -- hardwired into my DNA as an influence for all games i make
- gradius -- for the precedent of options
- starscape (by moonpod) -- minerals, tractor beam and visual style influence

BUGS:
- texture atlas packing efficiency printout seems wrong (test case: use separate
  texture atlases, efficiency should be 100%)
- screenshots add an alpha channel -- remove alpha channel and make PNG files without alpha.
  this may require adding support for RGB textures.

TODO:
- enable load-time level-of-detail mode where the sprite image files that come with the game
  are all large, and will be downsized at load-time if not such a high resolution is necessary.
- change Vector's | operator into *, because this will allow Sqr(vector).  Change & to % (?)
- change WidgetBackground use to use Resource<> instead of raw pointers, so that deletion
  doesn't have to be taken care of.  do this in general for stuff (especially in GUI skin stuff).
  use config files for WidgetSkins.
- change sprite_path and path-based loading into LoadParameter-based loading (e.g. in dis_spawn.cpp)
- change gltextureatlas sizes to Uint32
- change all texture sizes to Uint32 (?) and in general, all sizes that can't be negative
- make automatic validation in Dis::Config -- function for validating stuff,
  message for when it fails.  reset to default value if failed
- look into changing ScheduleForDeletion(0.0f) into RemoveFromWorld(), delete owner object
- look into changing ScheduleForRemovalFromWorld(0.0f) and RemoveFromWorld();
- see if more culling can happen in DrawObjectCollector::operator ().  specifically
  per-object view-radius checking.  this will require the object coordinates to be
  wrapped/contained before collecting.  this wrapping/containment may already be happening.
- replace GLTextureAtlas sizes with Uint32Vector2 values
- way to address built-in resources such as the opaque white texture, the missing texture, etc.
  maybe via some escape sequence that can't be in a real path, such as //
- need to be able to specify quadtree depths for all quadtrees in all cases.
- there is a problem in lesson03 with IsOdd<T> assuming Float type when it shouldn't be.
- use exponential for zoom factors (i.e. so that all real numbers are valid and there's
  no need to worry about divide by zero).  maybe use base 2?
- use numeric_limits<float>::infinity() in next think time and such (see <limits>)
- motion-blurred screenshots (take several screenshots in a row and blend them).  this would
  be particularly easy if/when game physics interpolation is implemented.  this might be harder
  than it seems, since the UI elements could change between frames, which would not be good.
- handle failures (especially file loading failures) more gracefully
- use the same array for texture and vertex coords in Sprite (and maybe Polygon)
- it might be useful to re-implement SDL_ActiveEvent
- high framerates cause the impact damage to be too high in disasteroids (or maybe the impact
  damage is too low in low framerates)
- make GL::Shutdown function (and delete the opaque white texture which is currently leaked)
- use smallest acceptable data types in opengl calls (e.g. 4 bytes for RGBA,
  1 or 2 bytes for texture coords, etc)
- get rid of widget min/max size enabled flags, and just use the
  sizes (no min size = 0, no max size = (uint)-1)
- create consistent way to set z depth for non-transparent stuff so they're
  actually unique z depth values for each object.  maybe encode some sort
  of unique index into the least significant bits of the depth Float.
- have the application automatically change current working directory to
  the path of the executable (argv[0]).
- change Engine2::Compound to Engine2::Model ?
- make ~World detach attached WorldViews?  WorldView would then have to
  detect if m_world is NULL or not.
- in lesson04, make graphical representation of Engine2 design
- lesson07 - collision detection and resolution via PhysicsHandler
- lesson08 - user input or further subclassing of Entity
- bring livid stuff over and use its stuff (e.g. Sequence instead of dumb enums)
- somehow properly return both drawn opaque and transparent object counts from
  Engine2::ObjectLayer::Draw and make UI labels for them in the debug view.
- have SetPathElement... check for whitespace in the path
- add HandleDisabled/HandleEnabled and make Widget::SetIsEnabled not virtual
- ValueLabel and ValueEdit should take some sort of value-to-text function
  instead of a printf format (so it can be used to make vector ValueLabel/Edits)
- refactor the layout code to be more efficient (so it can handle really
  complex/huge layouts quickly)
- should Widget::Draw be protected?
- add a "mental note" advice-sort of section to the documents
- add @ref tags to appropriate places in lessons
- make the position given for text drawing be the left/center/right for
  left-justified, centered, or right-justified respectively, and same for
  vertical justification.  this will make arbitrary text drawing easier
- make picture labels use alignment properly
- make AsciiFont properly use UTF8
- resource library should not map resources to paths, but to sets of
  properties (the properties being one of many possible subclasses of some
  "property" baseclass).  this will allow loading of the same path for
  different things (among other extra versatilities).
- the framehandler time for WorldView must be synchronized with the
  framehandler time for World.  (depends on having the physics and
  visibility computation split up)
- add asserts to wrapped collision stuff to ensure things aren't above
  1/2 of the object side length
- do tab/shift-tab control of child widget focus
- should Screen make its own event queue?
- child widgets should be based off the position of their parents, so
  screen-relative moving is unnecessary.
- check if RemoveFromWorld() and AddBackIntoWorld() should save the quadtree(s)
- rename all enums to have prefixes (where appropriate)
- drawing functions should all just push the modelview matrix, not load
  the identity (except for top-level ones like Screen and such).
- compound editing operations: delete vertices, delete polygons, flip polygons,
  flip objects, unweld polygon vertices, clone polygons, splitting polygons
- for static Create type functions for subclassable classes, see if the
  function can be templatized so that each subclass doesn't have to make
  a function that is identical except for the "new Blah" part.
- when the Action system is written, go into MapEditor2::WorldView and
  convert everything to that, and get rid of locally tracking
  m_selected_entity_count and friends.
- possibly make a Math::Radian namespace to contain properly typed
  versions of the trig functions which take radian angles.
- for overridable Widget methods, make it so that subclasses don't
  have to call anything to maintain widget functionality.
- add DeleteSelf to Widget baseclass as a means for scheduling itself
  for deletion.
- add HandleEnabled and HandleDisabled to Widget ?
- add HandleHidden and HandleShown to Widget ?
- verify that when a mouse-grabbed widget is deleted, it un-mouse-grabs
- verify that focusing a widget contained in a widget with m_accepts_focus
  set to false will not change the focus line.
- change the names of the vertex/compound selection functions in
  MapEditor2::ObjectLayer to indicate they only operate within the
  scope of the object selection set.
- verify that the operator overloads for math constructs (e.g. Vector)
  work when "using namespace Xrb" is not used.
- think about MapEditor2::MainWidget and if the Widget's main widget
  functionality should be renamed.
- add modal widget frame/content margins (maybe just make it so that
  setting a main widget puts stuff inside the content margins)
- for widgets who take the default property a single time at the beginning,
  make it so they keep updating their property with the WidgetSkin,
  but if you manually set the property to something else, then it will stay
  different and not update with the WidgetSkin.
- make the content margins based at the edge of the widget, instead
  of the frame margins.
- add type-specific range checking for WidgetSkin properties.
- remember the C++ typeid/type_info stuff.
- think up a way to draw entity metrics which show if an entity
  applies and reacts to gravity.
- density might apply to selection sets (i.e. scaling the relative density)
- density is a little wacky -- fix it.
- do real entity area computation for density and other calculations.
- make the view grid display set units, rather than fractions of
  the size of the object layers.
- improve the text-editing control of LineEdit (e.g. ctrl+backspace,
  point-and-click cursor positioning, text selection, etc).
- the resource instance should store the function that was created
  to create the resource data so that full correctness can be
  achieved.
- GL singleton should have checks to see if it's been initialized
  so when gl calls fail mysteriously, it's obvious what happened.
- hide the defer-parent-update SetSizeProperty* versions and make public
  versions of each without that parameter.
- support for bit depths besides 32
- WidgetSkin properties for checkbox/radiobutton/toolbar button sizes
- maybe WidgetBackground should provide the FrameMargins and ContentMargins
- make WidgetSkin properties data-driven and/or use events for the
  multiplexed functions.
- change all functions which accept a bool or int as a type of something
  or a behavior to use enums instead, to make code more self-documenting.
- special Vector2 ValueEdit
- add menu/popup system and menu items
- move keyboard shortcuts into 'actions' similar to QT, which menu items
  and normal functions can use.
- tabbed widget layout
- use idea of 'render' or 'focus' object layer instead of 'main'
  object layer in world so that the nomenclature of the stuff in
  MapEditorWorld is a little more clear
- for accessors that return a member pointer, think about which ones
  should be made into "Blah const *"
- make a handy Util function which does quantizing
- add a 'time type' which allows changing of what data type actually
  stores times (i.e. ints or floats, etc)
- look into normal mapping to give lighting effects
- add smart usage of newline indexed data in Label, so that it could
  be used for very large texts
- change the 'distance culling' for sprite drawing in quadtrees
  to use a configurable setting, so that the size at which to cull
  sprites can be changed for performance
- make sure the framerate timing isn't making the vsync-waiting wait too long

GAME IDEAS:
- different types of ships should have different limitations on propulsion,
  e.g. a rocket should only be able turn and go forward, while a flying saucer
  should be able to move in any direction.
- have a bunch of navigational and calculation tools, like things to calculate
  the speed to enter orbit, the distance to an entity, etc
- have a bunch of displays such as coordinates relative to an entity,
  distance from an entity, relative speed, a circle around a planet which
  shows the orbit for a particular speed, etc
- calculations so that ships could enter orbit of a planet at different
  heights, also geosynchronous
- make a level which is a galaxy-shaped series of nebula and star sprites,
  and is characatured with large planets in the spiral arms of the galaxy
- deflector shield which applies force on offending particles using a vector
  field.  the forces which it applies will drain units' energy
- wormholes
- planetary shields
- planetary movement engines (so you can change the orbits/trajectories of
  moons, planets and asteroids)
- inertia-less upgrade, so that units can instantly accelerate to a constant
  speed, or hover effortlessly without gravity affecting them
- special black hole sprite that warps the background image
--- platformer
- normal and "ice" shoes - for different ground friction
- point-and-teleport gun
- grappling hook gun
- tractor beam gun
- air density function, boat which can ride on high-density air as a means to travel
  between planets in a way that would otherwise be impossible without flying
- run-away part where there's someone/thing chasing you and you have to run away
  and keep out of sight of the thing (i had a weird dream in which i was playing
  a game where this happened -- it was fun).

