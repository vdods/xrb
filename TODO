Goal: to develop a solid library of classes and functions in which to
implement a robust, enjoyable, and graphically-modern 2d video game,
including network support.

MAJOR TASKS:
/ circle/polygon collision/entity areas
/ physics engine
- console command stuff
- console logger/debugging logger
? embedded scripting
- split world into client and server and add networking
- music and sound effects
/ map editor + sprite/entity prefab editor
/ comment/document the code with doxygen
- exceptions for user errors
/ x/y independent scaling (the physics portion of that is tough)
/ bracket indenting style and 80-column conformance.  change
  long function parameter lists to be vertical.
/ document the behavior of Widget, Layout, the Rendering stack,
  and all the other complicated systems.
- UI demonstration - every UI feature demonstrated in a series
  of tabbed widgets.
- abstraction of Engine2 classes into interfaces, to provide as
  much flexibility as possible, and to avoid biasing game physics, etc.
- ensure different areas of the engine are cleanly separated so that
  they could be compiled without others (i.e. core+engine could be
  used without gui or render, etc) -- make dependency chart

OPENGL CONVERSION TASKS:
- look into applying HSV color to opengl textures (i.e. making
  stuff's color converge towards a particular color -- turning
  up/down the saturation).
  ***
  glPixelTransfer -- GL_RED_BIAS, GL_RED_SCALE, GL_GREEN_BIAS,
                     GL_GREEN_SCALE, GL_BLUE_BIAS, GL_BLUE_SCALE, etc.
  glFog

DISASTEROIDS:
** bugs **
- when setting fullscreen from the commandline, the options menu 
  fullscreen checkbox isn't checked.
- the gauss gun damage location appears to be wrong (on exactly
  the opposite side of the damagee).
** feature-related **
- make Devourment weak against mining laser
- secondary fire for EMP -- ambient tractor beam
- grenade merging -- if 2 grenades (from same owner) touch, they merge
  into a grenade twice as heavy, and more than twice as powerful.
- forget the 4x item status screen.  upgrading should be one way,
  and the inventory should just show what level item it is.
- limited number of active missiles at any given time
- add key to dump shields into power cells
- make Devourment track who damaged it and how much, so it can retaliate
  against the ship that damaged it above a certain threshold.
- possibly make Devourment have a time-based health-recharge behavior, so you
  have to do heavy damage to it quickly to kill it.
- make Demi push away if its taking too much damage and the player is close
- possibly make Demi have a time-based health-recharge behavior, so you
  have to do heavy damage to it quickly to kill it.
- make smart ballistics not be canceled out by other ballistics
- make Shade circle around the player once it has locked on
- make Shade teleport or fly away if it takes too much damage
- when a new high score is posted and you're taken back to the title screen,
  the just-added score should be highlighted or blinking somehow
- add collision_location and collision_normal to LineTrace
- referring to the accumulated force on an entity is uncertain.  there
  should be some sort of previous-frame accumulated force accessor,
  for functions that use it (e.g. intercept course stuff)
- split the physics and visibility computation up so their frame
  processing isn't dependent.  this requires addition of some "scale velocity"
  property on entities.
- have the debris spawning in Mortal.  it should be done in Damage,
  and the subclasses of Mortal should specify the debris type (rocks,
  metal, minerals, blood, guts, etc).
- once color biasing is implemented for Objects, damage should cause the
  sprite to flash red, and healing should cause the sprite to flash green.
- if super-stoke thing is added, that can be indicated by the ship flashing
  yellow or white
- collapse the world and object layer params in spawning functions to just
  using the object layer (the world should be accessible through it).
- to limit the length of waves, there can be a time limit after which all
  the enemies are SetTarget'ed against the player (which can happen every
  few seconds, so the player can't just EMP them to escape).
- change gauss gun's fire rate to be based on how fast it can be charged back
  up by the power generator -- also, the fire sequence should start with the
  gun completely discharged.. holding the fire button down will then charge
  and fire it, as a reticle homes in on the mouse cursor to indicate when
  it will fire.  charge should be persistent, so if you let go of the fire
  button before the weapon discharged, it should save the power it accumulated.
- split up high scores into difficulty levels
- change missiles: they should not be able to flip around at any angle, but
  only travel in circles (acceleration perpendicular to velocity).  primary
  fire will fire enemy-seeking missiles, but if you use secondary fire,
  all your active missiles will home in on your mouse cursor.
  missiles should be made much heavier, so they're not deflected away by
  tractors as easily.
- add validation to Dis::Config modifiers
- add extra-power-to-the-shields powerup which would drain your power, but
  strengthen your shields significantly
- add "sprint" powerup (or maybe have it be built-in) which would make your
  engines use twice the power, but accelerate 1.5x or 2x or some factor
  better.
- make the EMP into a weapon that is activated by a key, instead of having
  to equip it and fire it.
** sound-system-related **
- there should be a drone for the power generator -- max volume at 0%, zero
  volume at 100%, low frequency at 0%, high frequency at 100%.
- add drone for shields also?  or decide which of shields/power generator
  should have a drone.  maybe they can both have a drone, at obviously
  distinct frequencies.
** bug-related **
- there seems to be a bug in the aiming in the front weapon of Demi
- get non-wrapped ObjectLayers back up and running (because they totally
  don't work in disasteroids)

TODO:
- in ASSERT macros (and any macro that uses a code block), use
  "do { ... } while (false)" so it'll work like a normal statement.
- stop using typedef'd iterators, just use ::iterator and ::const_iterator
- create consistent way to set z depth for non-transparent stuff so they're
  actually unique z depth values for each object.  maybe encode some sort
  of index into the least significant bits of the depth Float.
- have the application automatically change current working directory to
  the path of the executable (argv[0]).
- change Engine2::Compound to Engine2::Model ?
- make ~World detach attached WorldViews?  WorldView would then have to
  detect if m_world is NULL or not.
- in lesson04, make graphical representation of Engine2 design
- lesson07 - collision detection and resolution via PhysicsHandler
- lesson08 - user input or further subclassing of Entity
- add some sort of "MAKE_THIS_ENUM_UNSIGNED = 4000000000U" to all appropriate enums, and check
  if this works on compilers other than g++.  either that, or change all the asserts
  to reflect the potential that enums can be negative.
- rename first moment to mass and second moment to angular mass or rotational mass
- somehow properly return both drawn opaque and transparent object counts from
  Engine2::ObjectLayer::Draw and make UI labels for them in the debug view.
- have SetPathElement... check for whitespace in the path
- add HandleDisabled/HandleEnabled and make Widget::SetIsEnabled not virtual
- ValueLabel and ValueEdit should take some sort of value-to-text function
  instead of a printf format (so it can be used to make vector ValueLabel/Edits)
- refactor the layout code to be more efficient (so it can handle really
  complex/huge layouts quickly)
- should Widget::Draw be protected?
- add a "mental note" advice-sort of section to the documents
- add @ref tags to appropriate places in lessons
- make the position given for text drawing be the left/center/right for
  left-justified, centered, or right-justified respectively, and same for
  vertical justification.  this will make arbitrary text drawing easier
- make picture labels use alignment properly
- make AsciiFont properly use UTF8
- resource library should not map resources to filenames, but to sets of
  properties (the properties being one of many possible subclasses of some
  "property" baseclass).  this will allow loading of the same filename for
  different things (among other extra versatilities).
- the framehandler time for WorldView must be synchronized with the
  framehandler time for World.  (depends on having the physics and
  visibility computation split up)
- add asserts to wrapped collision stuff to ensure things aren't above
  1/2 of the object side length
- do tab/shift-tab control of child widget focus
- make Xrb::Initialize and Xrb::Shutdown functions which take care of
  SDL and singleton setup/shutdown.  and possibly creating/deleting the Screen?
- should Screen make its own event queue?
- create Resource loading functions for common Resource<blah> types
  (e.g. LoadGLTexture, LoadFont, etc)
- child widgets should be based off the position of their parents, so
  screen-relative moving is unnecessary.
- the map editor view should not create/destroy its own world -- it
  becomes confusing
- check if RemoveFromWorld() and AddBackIntoWorld() should save the quadtree(s)
- rename all enums to have prefixes (where appropriate)
- drawing functions should all just push the modelview matrix, not load
  the identity (except for top-level ones like Screen and such).
- compound editing operations: delete vertices, delete polygons, flip polygons,
  flip objects, unweld polygon vertices, clone polygons, splitting polygons
- for static Create type functions for subclassable classes, see if the
  function can be templatized so that each subclass doesn't have to make
  a function that is identical except for the "new Blah" part.
- change BinarySerializer and BitCache to use IODirection enum instead of
  retarded stdio file mode string in Open.
- cursor position in map editor status bar
- when the Action system is written, go into MapEditor2::WorldView and
  convert everything to that, and get rid of locally tracking
  m_selected_entity_count and friends.
- possibly make a Math::Radian namespace to contain properly typed
  versions of the trig functions which take radian angles.
- for overridable Widget methods, make it so that subclasses don't
  have to call anything to maintain widget functionality.
- add DeleteSelf to Widget baseclass as a means for scheduling itself
  for deletion.
- add HandleEnabled and HandleDisabled to Widget ?
- add HandleHidden and HandleShown to Widget ?
- verify that when a mouse-grabbed widget is deleted, it un-mouse-grabs
- verify that focusing a widget contained in a widget with m_accepts_focus
  set to false will not change the focus line.
- change the names of the vertex/compound selection functions in
  MapEditor2::ObjectLayer to indicate they only operate within the
  scope of the object selection set.
- verify that the operator overloads for math constructs (e.g. Vector)
  work when "using namespace Xrb" is not used.
- think about MapEditor2::MainWidget and if the Widget's main widget
  functionality should be renamed.
- make the map editor use only meta-keyed shortcuts so that handling
  key events is much simpler.
- add modal widget frame/content margins (maybe just make it so that
  setting a main widget puts stuff inside the content margins)
- for widgets who take the default property a single time at the beginning,
  make it so they keep updating their property with the WidgetSkin,
  but if you manually set the property to something else, then it will stay
  different and not update with the WidgetSkin.
- make the content margins based at the edge of the widget, instead
  of the frame margins.
- add type-specific range checking for WidgetSkin properties.
- remember the C++ typeid/type_info stuff.
- think up a way to draw entity metrics which show if an entity
  applies and reacts to gravity.
- density might apply to selection sets (i.e. scaling the relative density)
- density is a little wacky -- fix it.
- do real entity area computation for density and other calculations.
- make the view grid display set units, rather than fractions of
  the size of the object layers.
- improve the text-editing control of LineEdit (e.g. ctrl+backspace,
  point-and-click cursor positioning, text selection, etc).
- in map editor, make the scale/angle resetting code when changing
  transformation modes be optional.
- implement FastXXXX Math functions
- the resource instance should store the function that was created
  to create the resource data so that full correctness can be
  achieved.
- GL singleton should have checks to see if it's been initialized
  so when gl calls fail mysteriously, it's obvious what happened.
- replace drawing the sprite quad with a display list
- hide the defer-parent-update SetSizeProperty* versions and make public
  versions of each without that parameter.
- change the IOE_IS_AT_END checking for how many bytes/bits are left
- support for bit depths besides 32
- WidgetSkin properties for checkbox/radiobutton/toolbar button sizes
- maybe WidgetBackground should provide the FrameMargins and ContentMargins
- make WidgetSkin properties data-driven and/or use events for the
  multiplexed functions.
- change all functions which accept a bool or int as a type of something
  or a behavior to use enums instead, to make code more self-documenting.
- special Vector2 ValueEdit
- add menu/popup system and menu items
- move keyboard shortcuts into 'actions' similar to QT, which menu items
  and normal functions can use.
- tabbed widget layout
- use idea of 'render' or 'focus' object layer instead of 'main'
  object layer in world so that the nomenclature of the stuff in
  MapEditorWorld is a little more clear
- for accessors that return a member pointer, think about which ones
  should be made into "Blah const *"
- make a handy Util function which does quantizing
- add a 'time type' which allows changing of what data type actually
  stores times (i.e. ints or floats, etc)
- look into normal mapping to give lighting effects
- make all drawing functions const (if possible)
- add smart usage of newline indexed data in Label, so that it could
  be used for very large texts
- change the 'distance culling' for sprite drawing in quadtrees
  to use a configurable setting, so that the size at which to cull
  sprites can be changed for performance
- do some sort of video refresh synchronizing so the display
  looks smoother

GAME IDEAS:
- different types of ships should have different limitations on propulsion,
  e.g. a rocket should only be able turn and go forward, while a flying saucer
  should be able to move in any direction.
- tractor beams
- have a bunch of navigational and calculation tools, like things to calculate
  the speed to enter orbit, the distance to an entity, etc
- have a bunch of displays such as coordinates relative to an entity,
  distance from an entity, relative speed, a circle around a planet which
  shows the orbit for a particular speed, etc
- calculations so that ships could enter orbit of a planet at different
  heights, also geosynchronous
- make a level which is a galaxy-shaped series of nebula and star sprites,
  and is characatured with large planets in the spiral arms of the galaxy
- deflector shield which applies force on offending particles using a vector
  field.  the forces which it applies will drain units' energy
- energy recharging on units, upgrades make it go faster
- make some charge-up weapons (like the gun in R-type)
- stabilization technology (so that if a unit gets a force applied, it will
  attempt either to hold its position or its initial trajectory
- wrapping space (left-right, up-down)
- automatic proximity lasers to shoot down missles (as a defense mechanism)
- wormholes
- planetary shields
- planetary movement engines (so you can change the orbits/trajectories of
  moons, planets and asteroids)
- inertia-less upgrade, so that units can instantly accelerate to a constant
  speed, or hover effortlessly without gravity affecting them
- special black hole sprite that warps the background image in the same
  manner as a real blackhole (have to rewrite my thesis program for this)
--- platformer
- normal and "ice" shoes - for different ground friction
- point-and-teleport gun
- grappling hook gun
- tractor beam gun
