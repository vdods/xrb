Goal: to develop a solid library of classes and functions in which to
implement a robust, enjoyable, and graphically-modern 2d video game,
including network support.

MAJOR TASKS:
/ circle/polygon collision/entity areas
/ physics engine
- console command stuff
- console logger/debugging logger
? embedded scripting
- split world into client and server and add networking
- music and sound effects
/ comment/document the code with doxygen
- exceptions for user errors
/ x/y independent scaling (the physics portion of that is tough)
/ document the behavior of Widget, Layout, the Rendering stack,
  and all the other complicated systems.
- UI demonstration - every UI feature demonstrated in a series
  of tabbed widgets.
- abstraction of Engine2 classes into interfaces, to provide as
  much flexibility as possible, and to avoid biasing game physics, etc.
- ensure different areas of the engine are cleanly separated so that
  they could be compiled without others (i.e. core+engine could be
  used without gui or render, etc) -- make dependency chart
- motion blur (via projected 3d textures, or maybe pixel shader)

DISASTEROIDS:
- rewrite design docs in dis_main.cpp to reflect actual state of the game (see notes/dis_game_design.txt)
** polish-related **
- art: add bigger stuff in the background (galaxies, nebulae, etc) -- make inkscape renditions of hubble pictures
- anthropomorphize the ships for the intro, credits, etc, similar to opa-opa in zillion.
- make menus use minerals/powerups for checkmarks, use Solitary as a radio button mark,
  and show the different colors of Interloper (or maybe Devourment?) as the difficulty is changed.
- death sequences for player and Demi
- credits and references screen
- black outline for fonts
- make Asteroid fade out instead of pop out when it decays
art to make:

x   icon for pea shooter
x   icon for laser
x   icon for flame thrower
x   icon for gauss gun
x   icon for grenade launcher
x   icon for missile launcher
    icon for EMP
    icon for attack boost
    icon for defense boost
    icon for time stretch
x   icon for tractor beam
x   icon for engine
x   icon for armor
x   icon for shield
x   icon for power generator
x   fireball
x   grenade
x   missile
x   shield
    reticle
    asteroid(s) (ideally different sizes)
    better stars
    better starfield
    better nebula, more nebulae (in inkscape)
    more planets (higher resolution)
    textured (?) tractor beam effect

** feature-related **
- invisible Shade (super difficult) -- maybe make this one not teleport, but possibly give
  off some sort of indicator besides bullets.  make it visible when you EMP it.
- in harder modes, enemies should respond to particular weapons damage by adapting shields
  to that weapon.  in higher difficulties, the adaptation should happen more quickly.
- there should be wave sequences for each difficulty -- if you pass the whole wave sequence
  of one, it ups the difficulty and sends you to the next one.  there should be some sort of
  celebration sequence when you advance a level
- make the plasma bullet change length based on its speed
- start Devourment small and have it grow as it eats asteroids.  also have its tractor beam
  strength be based on its size.
- move attack and defense boost to Ship, so enemies can have it (for boss enemies or something)
- maybe take out Solitary, since it really doesn't extend PlayerShip.
- make yellow tractor beam send powerups away from player instead of toward (otherwise the
  yellow tractor beam helps the player inadvertently).
- make Demi ignore shade with respect to yellow tractor beam targets.
- make Demi prioritize option powerups highest in terms of green tractor beam targets.
- Demi defense mode: predict attacks (from projectile weapons) and defend by throwing asteroids
  in the way to block.
- if the world is too cluttered, sometimes Demi doesn't spawn in.  make Demi teleport in right
  after some singularity forms, either sucking up or pushing away nearby objects.  make sure this
  doesn't happen immediately next to the player.  maybe make all mini-bosses do this, when they
  are implemented.
- if the world is too cluttered up with minerals, powerups and small asteroids, make the Devourments
  go into a feeding frenzy where they just suck up minerals, powerups and small asteroids (maybe
  don't bother targeting small asteroids because they will be destroyed in the process)
- change pea shooter secondary fire to spread shot, and change gauss gun into charge-up weapon
  which works as the current pea shooter secondary does.  make gauss gun take longer to charge
  up, but maybe make it more powerful with a larger kickback.  if/when demi blocking is implemented,
  maybe make it detect being aimed at with a gauss gun so it can put something in the way to block
  the incoming gauss gun projectile.
- change gauss gun reticle effect (and add for player) -- have 4 reticle effects home in on the
  target, and when they meet, and the player releases the fire button, it fires.  this is to give
  a better sense of when the enemy will fire the gauss gun.  also this gives the player a
  more-present visual cue as to when the gauss gun is charged.  allow partial-charge firing?
- get rid of weapon status bar in order to make space for option powerup display in HUD.
  think about getting rid of shield and armor status bar, adding a health indicator to the ship
  somehow (like flashing yellow/red when low on health, which would actually be useful for all
  ships)
- game tips in the inventory screen (finish)
- make the player ship size depend on mass (so that it gets larger when heaver armor is equipped).
- make tractor beams grow from a point when activated, and shrink to a point when deactivated
  (maybe keep the physics radius the same, and only modify the visual radius)
- make the wave sequences programmable via config file, and specifiable via commandline.
  maybe make a hardcoded wave sequence that will be used for the game, and when no config file
  is provided.
- when stoke-o-meter fills up, an option powerup can be used (but this opportunity lasts only
  a few seconds)
- additional mode for Interloper (maybe spawn them in different, fixed modes) -
  where their flocking behavior is higher priority.  another mode should be
  where they flock in the form of a snake (these could form if a flock is allowed to exist for
  too long).  the head will decide where to go, and the body will provide extra mass to the collisions.
  the snake should be really hard to kill, and forming a snake could be the result of Interlopers
  living for too long.  this will be a reason for players to want to kill them quickly.
- enemies could spawn with shields giving particular strengths, so if a player overuses a weapon,
  the enemies start spawning with strength against that weapon.  demi should be able to adapt though.
- additional mode for Interloper -- speed charge when charging at target -- Interloper isn't
  nearly mean/tough enough
- additional mode for Shade - maybe hide behind asteroids and make bullets curve around stuff
  toward the player.
- mode for Shade: detect incoming projectiles and teleport away to dodge (this would be a good
  way to avoid the gauss gun becoming a do-all weapon).
- additional mode for Revulsion - synchronize firing (?) once the player has
  been surrounded.  this will cause the player to need to avoid being surrounded.
- additional mode for Demi - spawn a bunch of Interlopers from each weapon port (all 4?)
  which become snake-like arms which then flail around smashy-smashying things.
  as you destroy each Interloper, it telescopes down.  If you destroy the base Interloper,
  the arm detaches and becomes a snake-flock.
- additional mode for Demi - spawn a Revulsion at each weapon port (all 4?), which
  stick to the ports, and fire gauss guns at you.  these should look like creepy eyes.  maybe
  make the revulsions not turn away when you look at them (?).  the player can destroy them
  normally.
- additional mode for Demi - flurry of pea-shooter fire, similar to many shmups, where
  the idea is just to dodge it all (or use tractor beam to push away).
- additional mode for Demi - spawn a bunch of Interlopers which then all
  fly back and surround the Demi continuously to make a shield, making it
  extremely hard to damage the Demi.  Make the Demi use the gauss gun during
  this phase.  At some point, have the Demi reject the shield by flinging
  it all away with its tractor beams.  Or/also make a mode where Demi collects
  all asteroids into a shield surrounding it and then harasses the player until
  it takes a certain amount of damage, then flings the asteroids at the player.
- additional mode for Demi - spin around shooting missiles which stop and wait,
  and then all converge on the player
- Demi: add a drone which changes based on what state it's in, so the player has
  an audio cue as to what might happen (only have a few different drones, not
  unique ones for each state).  probably don't make the drone constant, but just
  an intro thing at the beginning of each behavior
- merged grenades should have a higher threshold of detonation.  i.e.
  hitting something with more force or something heaver, or a bullet, etc.
- When a Mortal is being damaged by something it's strong, weak
  or immune against, it should make a particular sound to indicate that.
- infinite weapon/powerup/enemy levels?  this would require some thought on
  the prices for everything.
- add key to dump shields into power cells (?)
- add key to dump power cells into shields (?)
- make Devourment (and Demi?) track who damaged it and how much, so it can retaliate
  against the ship that damaged it above a certain threshold.  it would be interesting
  to see some fights between Demi and Devourment.
- possibly make Devourment have a time-based health-recharge behavior, so you
  have to do heavy damage to it quickly to kill it.
  after the timer expires, have it slow to a stop, pause, and then pulse green to
  indicate it's healed.  furthermore, when it heals itself, have it reset its inventory
  to zero.
- make Demi push away if it's taking too much damage and the player is close
- make smart ballistics not be canceled out by other ballistics (i'm thinking
  mainly of the pea-shooter shooting a full charge and getting canceled
  out by some puny other ballistic).  it should get weakened slightly, and
  get correspondingly smaller.
- make Shade respond as a charged particle in a magnetic field if it's
  touching a tractor beam, or maybe become disabled if it's hit by a red tractor beam
- add advanced behaviors for higher level enemies (like escaping Devourments)
- when a new high score is posted and you're taken back to the title screen,
  the just-added score should be highlighted, big or blinking somehow
- add collision_location and collision_normal to LineTrace
- referring to the accumulated force on an entity is uncertain.  there
  should be some sort of previous-frame accumulated force accessor,
  for functions that use it (e.g. intercept course stuff).
  this would make the predictive firing much much better
- split the physics and visibility computation up so their frame
  processing isn't dependent.  this requires addition of some "scale-factor
  velocity" property on entities.  there will also be a problem with code that
  sets the position of entities (or sets any value) directly (this is a no-no
  in a linear-interpolation world).
- have the debris spawning in Mortal.  it should be done in Damage,
  and the subclasses of Mortal should specify the debris type (rocks,
  metal, minerals, blood, guts, etc).
- make enemies flash yellow when their health is low (maybe only Demi, Devourment and the player)
- red flashing for damage should also depend on max health, so that it gives a
  relative measure of a damage, not absolute hit point damage.
- if super-stoke thing is added, that can be indicated by the ship flashing
  white or blue or something
- to limit the length of waves, there can be a time limit after which all
  the enemies are SetTarget'ed against the player (which can happen every
  few seconds, so the player can't just EMP them to escape).
  in general, need some mechanism for the player to not be able to delay
  ending a wave.  maybe some sort of "berserk" mode for enemies, with visual
  (and audio) cues, where the enemies become extra dangerous.
- split up high scores into difficulty levels
- change missiles: they should not be able to flip around at any angle, but
  only travel in circles (acceleration perpendicular to velocity).
  missiles should be made much heavier, so they're not deflected away by
  tractors as easily.
- add validation to Dis::Config modifiers
- some of the effect subclasses can be collapsed together.  make a generic effect.
** sound-system-related **
- there should be a drone for the power generator -- max volume at 0%, zero
  volume at 100%, low frequency at 0%, high frequency at 100%.
- make shield damage have different sounds when the shield is at different
  powers, so there's a sound cue (as well as the visual cue) as to what the
  status of the shield is.
** bugs **
- the mining laser does too much damage to enemies, and makes them turn WAY too red
- destroying all asteroids triggers an assert (dis_world.cpp in RecordDestroyedAsteroid)
  that indicates the asteroid count is wrong
- there seems to be a bug where Shade (and maybe others?) can come up invisible after
  being EMP blasted.
** references **
- asteroids -- obvious
- star control 2 -- hardwired into my DNA as an influence for all games i make
- gradius -- for the precedent of options
- starscape (by moonpod) -- minerals, tractor beam and visual style influence

BUGS:
- texture atlas packing efficiency printout seems wrong (test case: use separate
  texture atlases, efficiency should be 100%)
- screenshots add an alpha channel -- remove alpha channel and make PNG files without alpha.
  this may require adding support for RGB textures.

TEMP TODO:
- convert Object::GetObjectLayer to assert non-NULL and return a reference
- convert Entity::GetPhysicsHandler to assert non-NULL and return a reference

- want to get rid of Entity storing in World -- though it could be useful having Entities in the world without being in an object layer (they're in limbo but can think)
- if not get rid of Entity vector in World, change it to a linked list or something
- possibly combine World::AddStaticObject and World::AddDynamicObject (also Remove*Object)


TODO:
- MUSIC: when implementing music, do it through spec files which reference times in OGG/MP3 files
  so that people can make spec files which reference copyrighted music without actually infringing copyright.
- change quadtree nodes to store lists of objects.  the objects will store iterators to their
  positions in the quadtrees, so removal can be done in constant time
- maybe store visibility quadtree node objects in draw order (even though this depends on the
  distance fading, a compatible order might be possible which doesn't account for distance fading)
- Lvd::Xml parser/scanner really needs to use FileSystem to check paths.
- static const variables should be in all caps (think about if there should be M_ or not)
- change World to store the world time internally, and use realtime time deltas to increment
  this counter (adjusted by the timescale).  this will make DT controlling (i.e. no DT larger
  than 1/20 or whatever) more automatic.
- add "open" methods to FileSystem which return ostream or istream to hide the annoying OsPath calls.
- use exceptions in parser/scanner
- possibly rename Parse::DataFile::Structure to Map
- black-outlined fonts
- split Label into TextLabel and PictureLabel (maybe can't do this because of Button)
- turn /** */ style doxygen comments into /// (except in e.g. lesson##).  possibly move doxygen
  comments from hpp files to cpp, so hpp are more clean.
- default GlTexture flags specified in the PAL or something.  make sure to take care of
  GlTexture::LoadParameters::Fallback and other procedurally-texture-generating methods
- make a way to specify GL configurations (probably based on the PAL)
- enable load-time level-of-detail mode where the sprite image files that come with the game
  are all large, and will be downsized at load-time if not such a high resolution is necessary.
- change Vector's | operator into *, because this will allow Sqr(vector).  Change & to % (?)
  NOTE: * is already being used for component-wise multiplication.
- change WidgetBackground use to use Resource<> instead of raw pointers, so that deletion
  doesn't have to be taken care of.  do this in general for stuff (especially in GUI skin stuff).
  use config files for WidgetSkins.
- change sprite_path and path-based loading into LoadParameter-based loading (e.g. in dis_spawn.cpp)
- change gltextureatlas sizes to Uint32 (use a typedef ScreenSize Uint32)
- change all texture sizes to Uint32 (ScreenSize) (?) and in general, all sizes that can't be negative
- make automatic validation in Dis::Config -- function for validating stuff,
  message for when it fails.  reset to default value if failed
- see if more culling can happen in DrawObjectCollector::operator ().  specifically
  per-object view-radius checking.  this will require the object coordinates to be
  wrapped/contained before collecting.  this wrapping/containment may already be happening.
- need to be able to specify quadtree depths for all quadtrees in all cases.
- use exponential for zoom factors (i.e. so that all real numbers are valid and there's
  no need to worry about divide by zero).  maybe use base 2?
- motion-blurred screenshots (take several screenshots in a row and blend them).  this would
  be particularly easy if/when game physics interpolation is implemented.  this might be harder
  than it seems, since the UI elements could change between frames, which would not be good.
  this could be resolved by always rendering the world with motion blur (which would actually be
  pretty sweet looking anyway), and the rest of the UI would be normal.
- handle failures (especially file loading failures) more gracefully
- use the same array for texture and vertex coords in Sprite (and maybe Polygon)
- it might be useful to re-implement SDL_ActiveEvent
- high framerates cause the impact damage to be too high in disasteroids (or maybe the impact
  damage is too low in low framerates)
- use smallest acceptable data types in opengl calls (e.g. 4 bytes for RGBA,
  1 or 2 bytes for texture coords, etc)
- get rid of widget min/max size enabled flags, and just use the
  sizes (no min size = 0, no max size = (uint)-1)
- have the application automatically change current working directory to
  the path of the executable (argv[0]).
- change Engine2::Compound to Engine2::Model ?
- make ~World detach attached WorldViews?  WorldView would then have to
  detect if m_world is NULL or not.
- in lesson04, make graphical representation of Engine2 design
- in lesson05 and lesson06, the gravity calculation is too computationally complex (O(n^2) or something)
- lesson07 - collision detection and resolution via PhysicsHandler
- lesson08 - user input or further subclassing of Entity
- bring livid stuff over and use its stuff (e.g. Sequence instead of dumb enums)
- somehow properly return both drawn opaque and transparent object counts from
  Engine2::ObjectLayer::Draw and make UI labels for them in the debug view.
- have SetPathElement... check for whitespace in the path
- add HandleDisabled/HandleEnabled and make Widget::SetIsEnabled not virtual
- ValueLabel and ValueEdit should take some sort of value-to-text function
  instead of a printf format (so it can be used to make vector ValueLabel/Edits)
- refactor the layout code to be more efficient (so it can handle really
  complex/huge layouts quickly)
- should Widget::Draw be protected? (probably yes)
- add @ref tags to appropriate places in lessons
- make the position given for text drawing be the left/center/right for
  left-justified, centered, or right-justified respectively, and same for
  vertical justification.  this will make arbitrary text drawing easier
- make picture labels use alignment properly
- use an 8-bit-console-looking font in XPM form so that there is a built-in
  font which can be used as a fallback or as a default.  this will require
  changing the font system to allow non-pixel-for-pixel rendering.  use the
  BIOS (DOS?) font.
- the framehandler time for WorldView must be synchronized with the
  framehandler time for World.  (depends on having the physics and
  visibility computation split up)
- add asserts to wrapped collision stuff to ensure things aren't above
  1/2 of the object side length
- do tab/shift-tab control of child widget focus
- child widgets should be based off the position of their parents, so
  screen-relative moving is unnecessary.
- check if RemoveFromWorld() and AddBackIntoWorld() should save the quadtree(s)
- rename all enums to have prefixes (where appropriate)
- for static Create type functions for subclassable classes, see if the
  function can be templatized so that each subclass doesn't have to make
  a function that is identical except for the "new Blah" part.
- possibly make a Math::Radian namespace to contain properly typed
  versions of the trig functions which take radian angles.
- add HandleEnabled and HandleDisabled to Widget ?
- add HandleHidden and HandleShown to Widget ?
- verify that when a mouse-grabbed widget is deleted, it un-mouse-grabs
- verify that focusing a widget contained in a widget with m_accepts_focus
  set to false will not change the focus line.
- verify that the operator overloads for math constructs (e.g. Vector)
  work when "using namespace Xrb" is not used.
- add modal widget frame/content margins (maybe just make it so that
  setting a main widget puts stuff inside the content margins)
- remember the C++ typeid/type_info stuff.
- improve the text-editing control of LineEdit (e.g. ctrl+backspace,
  point-and-click cursor positioning, text selection, etc).
- the resource instance should store the function that was created
  to create the resource data so that full correctness can be
  achieved.
- hide the defer-parent-update SetSizeProperty* versions and make public
  versions of each without that parameter.
- support for bit depths besides 32
- WidgetSkin properties for checkbox/radiobutton/toolbar button sizes
- maybe WidgetBackground should provide the FrameMargins and ContentMargins
- change all functions which accept a bool or int as a type of something
  or a behavior to use enums instead, to make code more self-documenting.
- special Vector2 ValueEdit
- add menu/popup system and menu items
- move keyboard shortcuts into 'actions' similar to QT, which menu items
  and normal functions can use.
- tabbed widget layout
- make a handy Util function which does quantizing
- look into normal mapping to give lighting effects
- add smart usage of newline indexed data in Label, so that it could
  be used for very large texts
- change the 'distance culling' for sprite drawing in quadtrees
  to use a configurable setting, so that the size at which to cull
  sprites can be changed for performance
- make sure the framerate timing isn't making the vsync-waiting wait too long

GAME IDEAS:
- different types of ships should have different limitations on propulsion,
  e.g. a rocket should only be able turn and go forward, while a flying saucer
  should be able to move in any direction.
- have a bunch of navigational and calculation tools, like things to calculate
  the speed to enter orbit, the distance to an entity, etc
- have a bunch of displays such as coordinates relative to an entity,
  distance from an entity, relative speed, a circle around a planet which
  shows the orbit for a particular speed, etc
- calculations so that ships could enter orbit of a planet at different
  heights, also geosynchronous
- make a level which is a galaxy-shaped series of nebula and star sprites,
  and is characatured with large planets in the spiral arms of the galaxy
- deflector shield which applies force on offending particles using a vector
  field.  the forces which it applies will drain units' energy
- wormholes
- planetary shields
- planetary movement engines (so you can change the orbits/trajectories of
  moons, planets and asteroids)
- inertia-less upgrade, so that units can instantly accelerate to a constant
  speed, or hover effortlessly without gravity affecting them
- special black hole sprite that warps the background image
--- platformer
- normal and "ice" shoes - for different ground friction
- point-and-teleport gun
- grappling hook gun
- tractor beam gun
- air density function, boat which can ride on high-density air as a means to travel
  between planets in a way that would otherwise be impossible without flying
- run-away part where there's someone/thing chasing you and you have to run away
  and keep out of sight of the thing (i had a weird dream in which i was playing
  a game where this happened -- it was fun).

