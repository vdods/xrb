Goal: to develop a solid library of classes and functions in which to
implement a robust, enjoyable, and graphically-modern 2d video game,
including network support.

MAJOR TASKS:
- circle/polygon collision/entity areas
/ physics engine
- console command stuff
- console logger/debugging logger
- embedded scripting
- split world into client and server and add networking
- music and sound effects
/ map editor + sprite/entity prefab editor
/ comment/document the code with doxygen
- exceptions for user errors
- x/y independent scaling (the physics portion of that is tough)
/ bracket indenting style and 80-column conformance.  change
  long function parameter lists to be vertical.
/ document the behavior of Widget, Layout, the Rendering stack,
  and all the other complicated systems.
- UI demonstration - every UI feature demonstrated in a series
  of tabbed widgets.
- abstraction of Engine2 classes into interfaces, to provide as
  much flexibility as possible, and to avoid biasing game physics, etc.

OPENGL CONVERSION TASKS:
- look into applying HSV color to opengl renderings (i.e. making
  stuff's color converge towards a particular color -- turning
  up/down the saturation).

DISASTEROIDS:
- finish writing AIs (add wandering to Revulsion and write Demi)
- finish weapon code (add UT-style charge-up melee weapon with
  front-attaching secondary mode)
- make own grenade/missile explosions not damage self
- different enemy levels of devourments and revulsions need to look less alike
- shield auxiliary input -- temporary extra-strong shields (but drains power
  quickly)
- extra engine thrust -- double-tap forward to make the engine thrust harder
  (but drains power quickly)
  
CURRENT:
- wave spawning, instead of continuous.
- disasteroids: after enough time elapses, the asteroids should start
  attacking/going after the player, just to make things that much more hectic.
- bug: intermittent crash in Dis::PhysicsHandler's entity think loop
- add collision_location and collision_normal to LineTrace
- test disasteroids with a non-wrapped main ObjectLayer
- write a delete functor for deleting objects out of STL containers with for_each
- fix LineTrace screwing up on large entities sometimes at certain angles
- make Devourment grow as it eats stuff
- ships should not be able to rotate to any angle instantly
- referring to the accumulated force on an entity is uncertain.  there
  should be some sort of previous-frame accumulated force accessor,
  for functions that use it (e.g. intercept course stuff)
- split the physics and visibility computation up so their frame
  processing isn't dependent.
- the framehandler time for WorldView must be synchronized with the
  framehandler time for World.  (depends on having the physics and
  visibility computation split up)
- have the debris spawning in Mortal.  it should be done in Damage,
  and the subclasses of Mortal should specify the debris type (rocks,
  metal, minerals, blood, guts, etc).
- add asserts to wrapped collision stuff to ensure things aren't above
  1/2 of the object side length

TODO:
- create Resource loading functions for common Resource<blah> types
  (e.g. LoadGLTexture, LoadFont, etc)
- child widgets should be based off the position of their parents, so
  screen-relative moving is unnecessary.
- Label text alignment doesn't seem to work (maybe it's just for non-word-wrapped labels)
- the map editor view should not create/destroy its own world -- it
  becomes confusing
- check if RemoveFromWorld() and AddBackIntoWorld() should save the quadtree(s)
- again, rename identifiers like X_NUM_BLAH and num_blahblah to
  X_BLAH_COUNT and blahblah_count.
- rename all enums to have prefixes (where appropriate)
- Entity might need to have a "scaling velocity" or "grow to X size by time Y"
- drawing functions should all just push the modelview matrix, not load
  the identity (except for top-level ones like Screen and such).
- maybe change Entity::Get/SetForce/Torque into Get/SetAccumulatedForce/Torque
  or something including the word "frame" like GetFrameTorque
- make a function which ensures the objects' radius and transformations are
  calculated, so that certain sections of code (like in the physics handler)
  can just get the values directly, instead of checking if they need to be
  computed each time.
- compound editing operations: delete vertices, delete polygons, flip polygons,
  flip objects, unweld polygon vertices, clone polygons, splitting polygons
- for static Create type functions for subclassable classes, see if the
  function can be templatized so that each subclass doesn't have to make
  a function that is identical except for the "new Blah" part.
- change all occurrences of "retval" into the proper word?
- change BinarySerializer and BitCache to use IODirection enum instead of
  retarded stdio file mode string in Open.
- cursor position in map editor status bar
- when the Action system is written, go into MapEditor2::WorldView and
  convert everything to that, and get rid of locally tracking
  m_selected_entity_count and friends.
- possibly make a Math::Radians namespace to contain properly typed
  versions of the trig functions which take radian angles.
- for overridable Widget methods, make it so that subclasses don't
  have to call anything to maintain widget functionality.
- add DeleteSelf to Widget baseclass as a means for scheduling itself
  for deletion.
- add HandleEnabled and HandleDisabled to Widget ?
- add HandleHidden and HandleShown to Widget ?
- verify that when a mouse-grabbed widget is deleted, it un-mouse-grabs
- verify that focusing a widget contained in a widget with m_accepts_focus
  set to false will not change the focus line.
- change the names of the vertex/compound selection functions in
  MapEditor2::ObjectLayer to indicate they only operate within the
  scope of the object selection set.
- verify that the operator overloads for math constructs (e.g. Vector)
  work when "using namespace Xrb" is not used.
- think about MapEditor2::MainWidget and if the Widget's main widget
  functionality should be renamed.
- it looks like Object::CalculateTransform might be unneseccary.
  check into that.
- make the map editor use only meta-keyed shortcuts so that handling
  key events is much simpler.
- if the screen widget gets resized to larger than the video resolution,
  then it doesn't go back once the contents smallify.  fix that.
- add modal widget frame/content margins (maybe just make it so that
  setting a main widget puts stuff inside the content margins)
- for widgets who take the default property a single time at the beginning,
  make it so they keep updating their property with the WidgetSkin,
  but if you manually set the property to something else, then it will stay
  different and not update with the WidgetSkin.
- make the content margins based at the edge of the widget, instead
  of the frame margins.
- add type-specific range checking for WidgetSkin properties.
- remember the C++ typeid/type_info stuff.
- think up a way to draw entity metrics which show if an entity
  applies and reacts to gravity.
- density might apply to selection sets (i.e. scaling the relative density)
- density is a little wacky -- fix it.
- do real entity area computation for density and other calculations.
- make the view grid display set units, rather than fractions of
  the size of the object layers.
- improve the text-editing control of LineEdit (e.g. ctrl+backspace,
  point-and-click cursor positioning, text selection, etc).
- in map editor, make the scale/angle resetting code when changing
  transformation modes be optional.
- implement FastXXXX Math functions
- the resource instance should store the function that was created
  to create the resource data so that full correctness can be
  achieved.
- GL singleton should have checks to see if it's been initialized
  so when gl calls fail mysteriously, it's obvious what happened.
- replace drawing the sprite quad with a display list
- hide the defer-parent-update SetSizeProperty* versions and make public
  versions of each without that parameter.
- all resource-related crap that has a Create function should be
  data-file-driven and be loaded as resources from those files.
- add WorldCoord/WorldCoordVector2/etc similar to ScreenCoord/etc.
- make sure all the GetShiftedAscii codes are correct
- add "activated" to Button, which is configurable to be either when
  the button is pressed or pressed then released.
- change the IOE_IS_AT_END checking for how many bytes/bits are left
- unit test for the size of certain data types (e.g. floats are 4 bytes,
  doubles are 8, etc).
- think of a better way to do UI event pre/processing
- support for bit depths besides 32
- WidgetSkin properties for checkbox/radiobutton/toolbar button sizes
- maybe WidgetBackground should provide the FrameMargins and ContentMargins
- make WidgetSkin properties data-driven and/or use events for the
  multiplexed functions.
- change all functions which accept a bool or int as a type of something
  or a behavior to use enums instead, to make code more self-documenting.
- special Vector2 ValueEdit
- once the game loop object is written, there should be an accessor to
  the game time, so that events that are enqueued can use that time,
  then move FrameHandler::GetMostRecentFrameTime back to being protected.
- add menu/popup system and menu items
- move keyboard shortcuts into 'actions' similar to QT, which menu items
  and normal functions can use.
- tabbed widget layout
- use idea of 'render' or 'focus' object layer instead of 'main'
  object layer in world so that the nomenclature of the stuff in
  MapEditorWorld is a little more clear
- for accessors that return a member pointer, think about which ones
  should be made into "Blah const *"
- make a handy Util function which does quantizing
- add a 'time type' which allows changing of what data type actually
  stores times (i.e. ints or floats, etc)
- do tab/shift-tab control of child widget focus
- look into normal mapping to give lighting effects
- add Z depth for sprites so that overlapping sprites can be correctly
  drawn in a specific ordering.  e.g. if there is a series of background
  sprites which are layered, drawing order is important.
- make all drawing functions const (if possible)
- examine STL usage in Label, for if the cached string and the line format
  vector clear actually deletes and news stuff, or if it keeps the old array
  size after clearing
- add smart usage of newline indexed data in Label, so that it could
  be used for very large texts
- change the 'distance culling' for sprite drawing in quadtrees
  to use a configurable setting, so that the size at which to cull
  sprites can be changed for performance
- do some sort of video refresh synchronizing so the display
  looks smoother
- implement a sort of allocation/deletion logger to check
  that everything is being deleted properly
- implement a sort of memory usage logger to record how much
  memory is being used for what type of thing
- change World class into a WorldClient and WorldServer pair

GAME IDEAS:
- different types of ships should have different limitations on propulsion,
  e.g. a rocket should only be able turn and go forward, while a flying saucer
  should be able to move in any direction.
- tractor beams
- have a bunch of navigational and calculation tools, like things to calculate
  the speed to enter orbit, the distance to an entity, etc
- have a bunch of displays such as coordinates relative to an entity,
  distance from an entity, relative speed, a circle around a planet which
  shows the orbit for a particular speed, etc
- calculations so that ships could enter orbit of a planet at different
  heights, also geosynchronous
- make a level which is a galaxy-shaped series of nebula and star sprites,
  and is characatured with large planets in the spiral arms of the galaxy
- deflector shield which applies force on offending particles using a vector
  field.  the forces which it applies will drain units' energy
- energy recharging on units, upgrades make it go faster
- make some charge-up weapons (like the gun in R-type)
- stabilization technology (so that if a unit gets a force applied, it will
  attempt either to hold its position or its initial trajectory
- wrapping space (left-right, up-down)
- automatic proximity lasers to shoot down missles (as a defense mechanism)
- wormholes
- planetary shields
- planetary movement engines (so you can change the orbits/trajectories of
  moons, planets and asteroids)
- inertia-less upgrade, so that units can instantly accelerate to a constant
  speed, or hover effortlessly without gravity affecting them
- special black hole sprite that warps the background image in the same
  manner as a real blackhole (have to rewrite my thesis program for this)

