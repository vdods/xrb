/** @page portable_cpp_types Portable C++ Types

In order to write portable code, it is necessary to work with well-defined
variable types.  Integers are especially variant between platforms because of
the different default word sizes for each architecture.

<a href="http://www.libsdl.org">LibSDL</a> was chosen as a platform
abstraction layer for its portable capabilities in graphical rendering,
screen-resolution handling, event system, user-input facilities, and
sound facilities.  Because it already handles the issues facing the
problems of writing portable applications, libxrb may use them without
having to do extra work checking the system architecture and defining
each.  What I'm getting at is that LibSDL provides a set of integer
typedefs of different bit-widths, signed and unsigned.  XuqRijBuh makes
use of these types without any re-typedef-ing.

The types are
    <ul>
    <li>@c Sint8 - 8 bit, signed integer</li>
    <li>@c Uint8 - 8 bit, unsigned integer</li>
    <li>@c Sint16 - 16 bit, signed integer</li>
    <li>@c Uint16 - 16 bit, unsigned integer</li>
    <li>@c Sint32 - 32 bit, signed integer</li>
    <li>@c Uint32 - 32 bit, unsigned integer</li>
    </ul>

@c Sint8 and @c Uint8 are somewhat unnecessary, because ANSI C guarantees
that the @c char and @c unsigned @c char types will be signed and unsigned
versions of exactly an 8 bit integer.  However, @c Sint8 and @c Uint8 will
be used for consistency.

One exception is the use of @c char -- @c char will be used (instead of
@c Sint8 ) when dealing with ASCII characters and strings, as opposed to
an integer value in the range of -128 to 127.
    
*/
