/** @page programming_conventions Programming Conventions

@section section_general_verbosity General Verbosity

@section section_nomenclature Nomenclature
NO CAMEL CASE.  DIE.

@subsection subsection_nomenclature_variables Variables
Variables will always be in lower case, with words separated by
underscores ("_").  Exceptions can be made for the sake of code-readability.

Examples:

@code
void SomeDumbFunction (int dumb_parameter)
{
    bool is_finished;
    float maximum_distance_traveled;
    int i;
}
@endcode

Variables which are qualified with certain keywords, or which live in
specific scopes will be prefixed by set of one or applicable indicating
letters, followed by an underscore.  When there is more than one qualifying
prefix letter, they will be ordered alphabetically.
    <ul>
    <li>g - global variable</li>
    <li>m - member of a struct or class</li>
    <li>s - static variable</li>
    <li>t - template value (not to be confused with a template type)</li>
    </ul>

Examples:

@code
struct SomeDumbStructure
{
    double m_mass;
    static int ms_zero;
};

bool g_is_video_mode_set;

template <unsigned int t_dimension>
struct Vector
{
    float m[t_dimension];

    float &operator [] (unsigned int index)
    {
        assert(index < t_dimension);
        return m[index];
    }
    float const &operator [] (unsigned int index) const
    {
        assert(index < t_dimension);
        return m[index];
    }
};
@endcode

Arguably, function parameters and local variables should also have their own
prefixes (e.g. p and l, respectively), but they are both local to the scope
of the function they reside in, and so are effectively the same.  The decision
to avoid scope qualifiers for these variable types was made for the sake of
convenience.  A variable without a scope qualifier is assumed to be of local
scope.

@subsection subsection_nomenclature_specific_variables Specific Variables
SignalSender/Receiver


@subsection subsection_nomenclature_functions Functions
Function names will be concatenations of capitalized words, forming
descriptive names.  A function name should be a concise description
of what the function does.  Examples:

@code
void ParseUserOptionsFile (char const *options_filename);
int GetManhattanDistanceBetween (int *point1, int *point2);
bool IsEscapableCharacter (char c);
@endcode

@subsection subsection_nomenclature_methods Methods
Class methods fall under three different categories:
    <ul>
    <li>Accessors: Return a value which depends on the class' members
        (could be thought of as returning a "property" of the class).
        Usually trivial functions which directly return a member's
        value, though can include computation.  For example, GetWidth
        for a rectangle object.</li>
    <li>Modifiers: Set a property of the class.  Usually trivial functions
        which directly assign a value to a member, though often also include
        computation and consistency-handling.  For example, SetWidth
        for a rectangle object.</li>
    <li>Procedures: Computation and algorithmic methods.  These methods
        involve indirect assignment of, or complex computation involving,
        class members (e.g. CalculateSmallestBoundingCircle or
        Translate).</li>
    </ul>

All accessors will begin with the word "Get".  All modifiers will begin with
the word "Set".  The only limitation on the naming of procedures is that they
must not start with the words "Get" or "Set".

Arguably, the self-documenting requirement renders these restriction invalid
by means of semantics -- readability is the primary goal of this naming
convention.  See @a Vector and @a Matrix for examples of accessors, modifiers
and procedures.

@subsection subsection_nomenclature_specific_methods Specific Methods
Sender/Receiver accessors

@subsection subsection_nomenclature_types Types
Types (classes, structures, typedefs, namespaces, enums and unions) will use
the naming scheme of functions -- Capitalized words.

Examples:

@code
typedef unsigned char Uint8;
typedef signed char Sint8;
typedef float[3] FloatVector3;

enum Error
{
    E_FILE_NOT_FOUND,
    E_END_OF_FILE,
    E_NOT_ENOUGH_MEMORY
};

struct Color
{
    Uint8 m_r;
    Uint8 m_g;
    Uint8 m_b;
    Uint8 m_a;

    Color (Uint8 const r, Uint8 const g, Uint8 const b, Uint8 const a)
    {
        m_r = r;
        m_g = g;
        m_b = b;
        m_a = a;
    }
};
@endcode

@subsection subsection_nomenclature_macros Macros
Preprocessor macros will always be in upper case, with words separated by
underscores ("_").  Exceptions can be made for the sake of code-readability.

Examples:

@code
#define BOOL_TO_STRING(x) ((x) ? "true" : "false")
#define BUFFER_SIZE 1000
#define _STUPIDFILE10_H_
@endcode

@section section_const_correctness Const Correctness

@section section_indentation_and_formatting Indentation And Formatting
In general, code should be structured and formatted such that it blends
in seamlessly with the surrounding code.

Brackets will always be placed on a newline, and not at the end of the
previous line (in the case of an if statement, for example).  Exceptions
can be made to enhance readability.

Example:

@code
struct Point
{
    float m_x;
    float m_y;

    Point () { m_x = m_y = 0.0f; } // notice the brackets are on a single line
};

void DumbFunction ()
{
    try
    {
        DoStuff();
    }
    catch (char const *exception)
    {
        fprintf(
            stderr,
            "Exception while calling DoStuff() - \"%s\"\n",
            exception);
    }
}

int main (int argc, char **argv)
{
    char *array_of_strings[] =
    {
        "awesome string",
        "dumb string",
        "son of dumb string"
    };

    DoStuff();
    
    printf("argc = %d\n", argc);
    for (int i = 0; i < argc; ++i)
    {
        printf("argv[%d] = \"%s\"\n", argv[i]);
    }

    if (argc > 2)
    {
        PrintHelpMessage(stderr);
        return -1;
    }
    else
    {
        DoTheRealStuff(argc, argv);
        return 0;
    }
}
@endcode   

Great care should be taken to ensure all the code fits within 80 character
lines.  This is so that all text editors can view the entire width of the
source code without having to scroll left.  The following are conventions
on how to insert line breaks into single statement lines in order to maintain
consistency and readability.  Exceptions can be made to this when there really
is no other option.

If a function declaration becomes too long, a newline should be inserted after
the opening parenthesis, and its parameters should be indented once.  Each
parameter in the function declaration should then be on its own separate line.

Example:

@code
int FunctionWithVeryLongDeclarationLine (
    int const iteration_count,
    float const maximum_sum,
    unsigned int const value_array_length,
    float const *const value_array)
{
    ...
}
@endcode

If a statement doesn't fit into an 80 character line, then it must be broken
up, generally after parentheses denoting function parameters.  Successive
parameters to function calls broken up in this manner should be on separate
lines.

Example:

@code
    FunctionWithVeryLongDeclarationLine(
        GetIterationCount(data_array_length + 20),
        10000.0f,
        data_array_length,
        data_array);
@endcode

Sometimes the best place to put a newline is after a pointer dereference.

Example:

@code
    GetLibrarySingleton()->
        LoadFilenameUsingDefaultValues(
            "some_stupid_resource.data",
            33);
@endcode

Equations should be split across newlines where it makes sense it terms of
the precedence of the operators in the equations.  Also notice the indentation
after each newline.

Example:

@code
    complicated_value =
        (geometric_mean + bias_coefficient * bias) /
        (area - epsilon);
@endcode

Long string literals should be handled by splitting them up into multiple
strings which the compiler will concatenate.

Example:

@code
    printf(
        "This is a little-known trick that can be used to present "
        "extremely long strings in nicely formatted blocks without "
        "the usage of ugly escaped newlines (which defeats proper "
        "indentation).  Yes, to the compiler, this is a single string.");
@endcode

Function declarations and definitions shall have a space after the function
name, while function calls will not have a space after the function name.
Spaces should never ever be placed immediately on the inside of parentheses.
There should be a space after every comma.

Example:

@code
void ExampleFunction (int parameter1, int parameter2, int parameter3);
void AnotherFunction (int argument);

...

void ExampleFunction (int parameter1, int parameter2, int parameter3)
{
    AnotherFunction(parameter1 + parameter2 + parameter3);
}
@endcode

The space after function names in declarations/definitions (and no space for
function calls) is a trick that can be used to facilitate code that is more
easily searched.

When namespaces are used, the function and variable declarations should be
made inside the namespace block.  However, the function and variable
definitions should be made with the full namespace scope qualifier.

Example:

@code
// declarations
namespace Utilities
{
    extern int const g_line_count;

    void PrintHelpMessage (FILE *fptr);
}

// definitions
int const Utilities::g_line_count = 0;

void Utilities::PrintHelpMessage (FILE *fptr)
{
    ...
}
@endcode

This is done so that grepping code will reveal as much scope information as
possible.  This convention can be bypassed if it enhances readability (e.g.
when encasing an entire library in a namespace such as "namespace Xrb").

@section section_contextual_hints Contextual Hints
comparing pointers to NULL instead of as booleans

scope specification for namespaces (greppability)

@section section_asserts Asserts

*/

