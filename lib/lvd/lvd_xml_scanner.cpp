// DO NOT MODIFY ! DO NOT MODIFY ! DO NOT MODIFY ! DO NOT MODIFY ! DO NOT MODIFY
// lvd_xml_scanner.cpp generated by reflex
// from lvd_xml_scanner.reflex using reflex.cpp.targetspec and reflex.cpp.implementation.codespec
// DO NOT MODIFY ! DO NOT MODIFY ! DO NOT MODIFY ! DO NOT MODIFY ! DO NOT MODIFY

#include "lvd_xml_scanner.hpp"

#include <iostream>

#define REFLEX_CPP_DEBUG_CODE_(spew_code) if (DebugSpew()) { spew_code; }


#line 109 "lvd_xml_scanner.reflex"

using namespace std;

#include <iomanip>
#include <lvd_xml.hpp>
#include <sstream>

#define FORMAT(x) static_cast<ostringstream &>(ostringstream().flush() << x).str()

namespace Lvd {
namespace Xml {

bool Scanner::IsOpen () const
{
    // if no input stream, it can't be open.
    if (m_input_stream == NULL)
        return false;

    // if the input stream is an ifstream, use the is_open method.
    if (dynamic_cast<ifstream *>(m_input_stream) != NULL)
        return static_cast<ifstream *>(m_input_stream)->is_open();

    // otherwise, it's always open.
    return true;
}

bool Scanner::OpenFile (string const &input_filename)
{
    Close();

    assert(!m_ifstream.is_open());
    m_ifstream.open(input_filename.c_str());
    if (!m_ifstream.is_open())
        return false;

    m_input_stream = &m_ifstream;
    m_input_stream->unsetf(ios_base::skipws);
    m_filoc.SetFilename(input_filename);
    m_filoc.SetLineNumber(1);

    // set the istream iterator
    IstreamIterator(istream_iterator<char>(*m_input_stream));
    // unlimited readahead (read the whole input immediately)
    InputReadahead(0);

    return true;
}

void Scanner::OpenString (string const &input_string, string const &input_name, bool use_line_numbers)
{
    Close();

    assert(m_istringstream.str().empty());
    m_istringstream.str(input_string);
    m_istringstream.clear(); // clear the eof and other flags

    m_input_stream = &m_istringstream;
    m_input_stream->unsetf(ios_base::skipws);
    m_filoc.SetFilename(input_name);
    m_filoc.SetLineNumber(use_line_numbers ? 1 : 0);

    // set the istream iterator
    IstreamIterator(istream_iterator<char>(*m_input_stream));
    // unlimited readahead (read the whole input immediately)
    InputReadahead(0);
}

void Scanner::OpenUsingStream (istream *input_stream, string const &input_name, bool use_line_numbers)
{
    assert(input_stream != NULL);

    Close();

    m_input_stream = input_stream;
    m_input_stream->unsetf(ios_base::skipws);
    m_filoc.SetFilename(input_name);
    m_filoc.SetLineNumber(use_line_numbers ? 1 : 0);

    // set the istream iterator
    IstreamIterator(istream_iterator<char>(*m_input_stream));
    // unlimited readahead (read the whole input immediately)
    InputReadahead(0);
}

bool Scanner::Close ()
{
    // reset the istream iterator to EOF
    IstreamIterator(istream_iterator<char>());

    if (m_input_stream != NULL)
    {
        assert(IsOpen());
        if (m_input_stream == &m_istringstream)
            m_istringstream.str("");
        else if (m_input_stream == &m_ifstream)
            m_ifstream.close();
        m_input_stream = NULL;
        m_filoc.SetFilename("");
        m_filoc.SetLineNumber(0);
        return true;
    }
    else
    {
        assert(!IsOpen());
        assert(!m_filoc.IsValid());
        return false;
    }
}

void Scanner::EmitWarning (string const &message, FiLoc const &filoc)
{
    assert(IsOpen());
    assert(m_filoc.IsValid());
    if (m_log_stream != NULL)
        *m_log_stream << filoc << ": warning: " << message << endl;
    m_warnings_were_encountered = true;
}

void Scanner::EmitError (string const &message, FiLoc const &filoc)
{
    assert(IsOpen());
    assert(m_filoc.IsValid());
    if (m_log_stream != NULL)
        *m_log_stream << filoc << ": error: " << message << endl;
    m_errors_were_encountered = true;
}

void Scanner::IncrementLineNumber (unsigned int by_value)
{
    if (m_filoc.LineNumber() > 0)
        m_filoc.IncrementLineNumber(by_value);
}

void Scanner::EmitUnexpectedCharacterError (char c)
{
    if (c == '\'')
        EmitError(FORMAT("unexpected character \"'\""), GetFiLoc());
    else if (c >= ' ' && c <= '~') // printable chars
        EmitError(FORMAT("unexpected character '" << c << "'"), GetFiLoc());
    else
        EmitError(FORMAT("unexpected character \\x" << setbase(16) << setw(2) << setfill('0') << setiosflags(ios_base::uppercase) << int(c)), GetFiLoc());
}

Text *Scanner::ChopAndStealTextInProgress ()
{
    if (m_text_in_progress != NULL)
    {
        if (m_chop_whitespace)
            Chop(m_text_in_progress->m_text);
        if (m_text_in_progress->m_text.empty())
        {
            delete m_text_in_progress;
            m_text_in_progress = NULL;
        }
    }
    Text *text = m_text_in_progress;
    m_text_in_progress = NULL;
    return text;
}

unsigned int Scanner::NewlineCount (string const &s)
{
    unsigned int count = 0;
    for (string::const_iterator it = s.begin(), it_end = s.end(); it != it_end; ++it)
        if (*it == '\n')
            ++count;
    return count;
}

void Scanner::Chop (string &s)
{
    assert(string(".").find_last_not_of(".") == string::npos && "your std::string doesn't behave nicely");
    assert(string::npos+1 == 0 && "your std::string doesn't behave nicely");
    s.resize(s.find_last_not_of("\t\n\r ")+1);
    s.erase(0, s.find_first_not_of("\t\n\r "));
}

#line 192 "lvd_xml_scanner.cpp"

Scanner::Scanner ()
    :
    ReflexCpp_::AutomatonApparatus_(
        ms_state_table_,
        ms_state_count_,
        ms_transition_table_,
        ms_transition_count_,
        ms_accept_handler_count_),

#line 286 "lvd_xml_scanner.reflex"

    m_input_stream(NULL),
    m_log_stream(NULL),
    m_filoc(FiLoc::ms_invalid),
    m_text_in_progress(NULL),
    m_chop_whitespace(false)

#line 211 "lvd_xml_scanner.cpp"

{
    DebugSpew(false);


    ResetForNewInput();
}

Scanner::~Scanner ()
{

#line 293 "lvd_xml_scanner.reflex"

    delete m_text_in_progress;
    m_text_in_progress = NULL;
    Close();

#line 229 "lvd_xml_scanner.cpp"
}

Scanner::StateMachine::Name Scanner::CurrentStateMachine () const
{
    assert(InitialState_() != NULL);
    BarfCpp_::Size initial_node_index = InitialState_() - ms_state_table_;
    assert(initial_node_index < ms_state_count_);
    switch (initial_node_index)
    {
        default: assert(false && "invalid initial node index -- this should never happen"); return StateMachine::START_;
        case 0: return StateMachine::CDATA;
        case 13: return StateMachine::COMMENT;
        case 26: return StateMachine::END_OF_FILE;
        case 28: return StateMachine::END_TAG;
        case 37: return StateMachine::MAIN;
        case 77: return StateMachine::OPEN_END_TAG;
        case 78: return StateMachine::OPEN_PI;
        case 79: return StateMachine::OPEN_TAG;
        case 80: return StateMachine::STRING;
        case 106: return StateMachine::TAG;
    }
}

void Scanner::SwitchToStateMachine (StateMachine::Name state_machine)
{
    assert(
        state_machine == StateMachine::CDATA ||
        state_machine == StateMachine::COMMENT ||
        state_machine == StateMachine::END_OF_FILE ||
        state_machine == StateMachine::END_TAG ||
        state_machine == StateMachine::MAIN ||
        state_machine == StateMachine::OPEN_END_TAG ||
        state_machine == StateMachine::OPEN_PI ||
        state_machine == StateMachine::OPEN_TAG ||
        state_machine == StateMachine::STRING ||
        state_machine == StateMachine::TAG ||
        (false && "invalid StateMachine::Name"));
    REFLEX_CPP_DEBUG_CODE_(
        std::cerr << 
#line 330 "lvd_xml_scanner.reflex"
"Lvd::Xml::Scanner" << (GetFiLoc().IsValid() ? " ("+GetFiLoc().AsString()+")" : "") << ":"
#line 271 "lvd_xml_scanner.cpp"
 << " switching to state machine "
                  << ms_state_machine_name_[state_machine];
        if (ms_state_machine_mode_flags_[state_machine] != 0)
        {
            if ((ms_state_machine_mode_flags_[state_machine] & AutomatonApparatus_::MF_CASE_INSENSITIVE_) != 0)
                std::cerr << " %case_insensitive";
            if ((ms_state_machine_mode_flags_[state_machine] & AutomatonApparatus_::MF_UNGREEDY_) != 0)
                std::cerr << " %ungreedy";
        }
        std::cerr << std::endl)
    InitialState_(ms_state_table_ + ms_state_machine_start_state_index_[state_machine]);
    ModeFlags_(ms_state_machine_mode_flags_[state_machine]);
    assert(CurrentStateMachine() == state_machine);
}

void Scanner::ResetForNewInput ()
{
    REFLEX_CPP_DEBUG_CODE_(
        std::cerr << 
#line 330 "lvd_xml_scanner.reflex"
"Lvd::Xml::Scanner" << (GetFiLoc().IsValid() ? " ("+GetFiLoc().AsString()+")" : "") << ":"
#line 293 "lvd_xml_scanner.cpp"
 << " executing reset-for-new-input actions and switching to state machine "
                  << ms_state_machine_name_[StateMachine::START_];
        if (ms_state_machine_mode_flags_[StateMachine::START_] != 0)
        {
            if ((ms_state_machine_mode_flags_[StateMachine::START_] & AutomatonApparatus_::MF_CASE_INSENSITIVE_) != 0)
                std::cerr << " %case_insensitive";
            if ((ms_state_machine_mode_flags_[StateMachine::START_] & AutomatonApparatus_::MF_UNGREEDY_) != 0)
                std::cerr << " %ungreedy";
        }
        std::cerr << std::endl)
    ReflexCpp_::AutomatonApparatus_::ResetForNewInput_(ms_state_table_ + ms_state_machine_start_state_index_[StateMachine::START_], ms_state_machine_mode_flags_[StateMachine::START_]);
    assert(CurrentStateMachine() == StateMachine::START_);


#line 317 "lvd_xml_scanner.reflex"

    delete m_text_in_progress;
    m_text_in_progress = NULL;
    m_warnings_were_encountered = false;
    m_errors_were_encountered = false;
    SwitchToStateMachine(StateMachine::MAIN);

#line 316 "lvd_xml_scanner.cpp"
}

Parser::Token Scanner::Scan () throw()
{

    std::string work_string;
    // this is the main scanner loop.  it only breaks when an accept handler
    // returns or after the unmatched character handler, if certain conditions
    // exist (see comments below).
    while (true)
    {
        // clear the previous accepted/rejected string.
        work_string.clear();
        // reset the char buffer and other stuff
        PrepareToScan_();

        bool was_at_end_of_input_ = IsAtEndOfInput();

        BarfCpp_::Uint32 accept_handler_index_ = RunDfa_(work_string);
        // if no valid accept_handler_index_ was returned, then work_string
        // was filled with everything up to the char after the keep_string
        // cursor (i.e. the rejected atom).
        if (accept_handler_index_ >= ms_accept_handler_count_)
        {
            // if we were already at the end of input and no
            // rule was matched, break out of the loop.
            if (was_at_end_of_input_)
                break;

            std::string &rejected_string = work_string;
            BarfCpp_::Uint8 rejected_atom = rejected_string.empty() ? '\0' : *rejected_string.rbegin();

            REFLEX_CPP_DEBUG_CODE_(
                std::cerr << 
#line 330 "lvd_xml_scanner.reflex"
"Lvd::Xml::Scanner" << (GetFiLoc().IsValid() ? " ("+GetFiLoc().AsString()+")" : "") << ":"
#line 353 "lvd_xml_scanner.cpp"
 << " rejecting string ";
                PrintString_(rejected_string);
                std::cerr << " (rejected_atom is \'";
                PrintAtom_(rejected_atom);
                std::cerr << "\')" << std::endl)

            // execute the rejection actions.  the do/while loop is so that a
            // break statement inside the rejection actions doesn't break out
            // of the main scanner loop.
            do
            {

#line 312 "lvd_xml_scanner.reflex"

    assert(false && "a char fell through the cracks");
    EmitError("unrecognized character '" + rejected_string + "'", GetFiLoc());
    return Parser::Terminal::BAD_TOKEN;

#line 372 "lvd_xml_scanner.cpp"

            }
            while (false);
        }
        // otherwise, call the appropriate accept handler code.
        else
        {
            std::string &accepted_string = work_string;

            REFLEX_CPP_DEBUG_CODE_(
                std::cerr << 
#line 330 "lvd_xml_scanner.reflex"
"Lvd::Xml::Scanner" << (GetFiLoc().IsValid() ? " ("+GetFiLoc().AsString()+")" : "") << ":"
#line 386 "lvd_xml_scanner.cpp"
 << " accepting string ";
                PrintString_(accepted_string);
                std::cerr << " in state machine " << ms_state_machine_name_[CurrentStateMachine()]
                          << " using regex (" << ms_accept_handler_regex_[accept_handler_index_] << ")" << std::endl)

            // execute the appropriate accept handler.
            // the accepted string is in accepted_string.
            switch (accept_handler_index_)
            {
                case 0:
                {

#line 618 "lvd_xml_scanner.reflex"

        if (m_text_in_progress == NULL)
            m_text_in_progress = new Text(GetFiLoc(), DomNode::CDATA);
        // get rid of the ]]> at the end
        accepted_string.resize(accepted_string.size()-3);
        IncrementLineNumber(NewlineCount(accepted_string));
        SwitchToStateMachine(StateMachine::MAIN);
        m_text_in_progress->m_text += accepted_string;
        Text *text = m_text_in_progress;
        m_text_in_progress = NULL;
        return Parser::Token(Parser::Terminal::TEXT, text);
    
#line 412 "lvd_xml_scanner.cpp"

                }
                break;

                case 1:
                {

#line 632 "lvd_xml_scanner.reflex"

        EmitError("unterminated CDATA", GetFiLoc());
        if (m_text_in_progress == NULL)
            m_text_in_progress = new Text(GetFiLoc(), DomNode::CDATA);
        IncrementLineNumber(NewlineCount(accepted_string));
        SwitchToStateMachine(StateMachine::END_OF_FILE);
        m_text_in_progress->m_text += accepted_string;
        Text *text = m_text_in_progress;
        m_text_in_progress = NULL;
        return Parser::Token(Parser::Terminal::TEXT, text);
    
#line 432 "lvd_xml_scanner.cpp"

                }
                break;

                case 2:
                {

#line 602 "lvd_xml_scanner.reflex"

        IncrementLineNumber(NewlineCount(accepted_string));
        SwitchToStateMachine(StateMachine::MAIN);
    
#line 445 "lvd_xml_scanner.cpp"

                }
                break;

                case 3:
                {

#line 608 "lvd_xml_scanner.reflex"

        EmitError("unterminated comment", GetFiLoc());
        IncrementLineNumber(NewlineCount(accepted_string));
        SwitchToStateMachine(StateMachine::MAIN);
    
#line 459 "lvd_xml_scanner.cpp"

                }
                break;

                case 4:
                {

#line 744 "lvd_xml_scanner.reflex"

        delete m_text_in_progress;
        m_text_in_progress = NULL;
        return Parser::Terminal::END_;
    
#line 473 "lvd_xml_scanner.cpp"

                }
                break;

                case 5:
                {

#line 569 "lvd_xml_scanner.reflex"

        SwitchToStateMachine(StateMachine::MAIN);
        return Parser::Terminal::CLOSE_END_TAG;
    
#line 486 "lvd_xml_scanner.cpp"

                }
                break;

                case 6:
                {

#line 575 "lvd_xml_scanner.reflex"

        assert(NewlineCount(accepted_string) == 0);
        return Parser::Token(Parser::Terminal::NAME, new Text(accepted_string, GetFiLoc()));
    
#line 499 "lvd_xml_scanner.cpp"

                }
                break;

                case 7:
                {

#line 581 "lvd_xml_scanner.reflex"

        IncrementLineNumber(NewlineCount(accepted_string));
    
#line 511 "lvd_xml_scanner.cpp"

                }
                break;

                case 8:
                {

#line 586 "lvd_xml_scanner.reflex"

        EmitError("EOF in end-tag", GetFiLoc());
        SwitchToStateMachine(StateMachine::END_OF_FILE);
    
#line 524 "lvd_xml_scanner.cpp"

                }
                break;

                case 9:
                {

#line 592 "lvd_xml_scanner.reflex"

        EmitUnexpectedCharacterError(accepted_string[0]);
        IncrementLineNumber(NewlineCount(accepted_string));
        return Parser::Terminal::BAD_TOKEN;
    
#line 538 "lvd_xml_scanner.cpp"

                }
                break;

                case 10:
                {

#line 357 "lvd_xml_scanner.reflex"

        SwitchToStateMachine(StateMachine::OPEN_PI);
        Text *text = ChopAndStealTextInProgress();
        if (text != NULL)
            return Parser::Token(Parser::Terminal::TEXT, text);
    
#line 553 "lvd_xml_scanner.cpp"

                }
                break;

                case 11:
                {

#line 365 "lvd_xml_scanner.reflex"

        SwitchToStateMachine(StateMachine::OPEN_TAG);
        Text *text = ChopAndStealTextInProgress();
        if (text != NULL)
            return Parser::Token(Parser::Terminal::TEXT, text);
    
#line 568 "lvd_xml_scanner.cpp"

                }
                break;

                case 12:
                {

#line 373 "lvd_xml_scanner.reflex"

        SwitchToStateMachine(StateMachine::OPEN_END_TAG);
        Text *text = ChopAndStealTextInProgress();
        if (text != NULL)
            return Parser::Token(Parser::Terminal::TEXT, text);
    
#line 583 "lvd_xml_scanner.cpp"

                }
                break;

                case 13:
                {

#line 381 "lvd_xml_scanner.reflex"

        SwitchToStateMachine(StateMachine::COMMENT);
    
#line 595 "lvd_xml_scanner.cpp"

                }
                break;

                case 14:
                {

#line 386 "lvd_xml_scanner.reflex"

        SwitchToStateMachine(StateMachine::CDATA);
        Text *text = ChopAndStealTextInProgress();
        if (text != NULL)
            return Parser::Token(Parser::Terminal::TEXT, text);
    
#line 610 "lvd_xml_scanner.cpp"

                }
                break;

                case 15:
                {

#line 394 "lvd_xml_scanner.reflex"

        if (m_text_in_progress == NULL)
            m_text_in_progress = new Text(GetFiLoc());
        m_text_in_progress->m_text += '&';
    
#line 624 "lvd_xml_scanner.cpp"

                }
                break;

                case 16:
                {

#line 401 "lvd_xml_scanner.reflex"

        if (m_text_in_progress == NULL)
            m_text_in_progress = new Text(GetFiLoc());
        m_text_in_progress->m_text += '\'';
    
#line 638 "lvd_xml_scanner.cpp"

                }
                break;

                case 17:
                {

#line 408 "lvd_xml_scanner.reflex"

        if (m_text_in_progress == NULL)
            m_text_in_progress = new Text(GetFiLoc());
        m_text_in_progress->m_text += '>';
    
#line 652 "lvd_xml_scanner.cpp"

                }
                break;

                case 18:
                {

#line 415 "lvd_xml_scanner.reflex"

        if (m_text_in_progress == NULL)
            m_text_in_progress = new Text(GetFiLoc());
        m_text_in_progress->m_text += '<';
    
#line 666 "lvd_xml_scanner.cpp"

                }
                break;

                case 19:
                {

#line 422 "lvd_xml_scanner.reflex"

        if (m_text_in_progress == NULL)
            m_text_in_progress = new Text(GetFiLoc());
        m_text_in_progress->m_text += '"';
    
#line 680 "lvd_xml_scanner.cpp"

                }
                break;

                case 20:
                {

#line 441 "lvd_xml_scanner.reflex"

        EmitError("malformed entity '" + accepted_string + "'", GetFiLoc());
        return Parser::Terminal::BAD_TOKEN;
    
#line 693 "lvd_xml_scanner.cpp"

                }
                break;

                case 21:
                {

#line 447 "lvd_xml_scanner.reflex"

        if (m_text_in_progress == NULL)
            m_text_in_progress = new Text(GetFiLoc());
        m_text_in_progress->m_text += accepted_string;
        IncrementLineNumber(NewlineCount(accepted_string));
    
#line 708 "lvd_xml_scanner.cpp"

                }
                break;

                case 22:
                {

#line 455 "lvd_xml_scanner.reflex"

        SwitchToStateMachine(StateMachine::END_OF_FILE);
        Text *text = ChopAndStealTextInProgress();
        if (text != NULL)
            return Parser::Token(Parser::Terminal::TEXT, text);
    
#line 723 "lvd_xml_scanner.cpp"

                }
                break;

                case 23:
                {

#line 463 "lvd_xml_scanner.reflex"

        // the only chars that could get through are > ' or "
        assert(accepted_string == ">" || accepted_string == "'" || accepted_string == "\"");
        EmitUnexpectedCharacterError(accepted_string[0]);
        IncrementLineNumber(NewlineCount(accepted_string));
        return Parser::Terminal::BAD_TOKEN;
    
#line 739 "lvd_xml_scanner.cpp"

                }
                break;

                case 24:
                {

#line 560 "lvd_xml_scanner.reflex"

        SwitchToStateMachine(StateMachine::END_TAG);
        return Parser::Token(Parser::Terminal::OPEN_END_TAG, new Tag("", DomNode::TAG, GetFiLoc()));
    
#line 752 "lvd_xml_scanner.cpp"

                }
                break;

                case 25:
                {

#line 475 "lvd_xml_scanner.reflex"

        SwitchToStateMachine(StateMachine::TAG);
        return Parser::Token(Parser::Terminal::OPEN_PI, new Tag("", DomNode::PROCESSING_INSTRUCTION, GetFiLoc()));
    
#line 765 "lvd_xml_scanner.cpp"

                }
                break;

                case 26:
                {

#line 484 "lvd_xml_scanner.reflex"

        SwitchToStateMachine(StateMachine::TAG);
        return Parser::Token(Parser::Terminal::OPEN_TAG, new Tag("", DomNode::TAG, GetFiLoc()));
    
#line 778 "lvd_xml_scanner.cpp"

                }
                break;

                case 27:
                {

#line 648 "lvd_xml_scanner.reflex"

        IncrementLineNumber(NewlineCount(accepted_string));
        assert(m_text_in_progress != NULL);
        m_text_in_progress->m_text += accepted_string;
    
#line 792 "lvd_xml_scanner.cpp"

                }
                break;

                case 28:
                {

#line 655 "lvd_xml_scanner.reflex"

        assert(m_text_in_progress != NULL);
        m_text_in_progress->m_text += '&';
    
#line 805 "lvd_xml_scanner.cpp"

                }
                break;

                case 29:
                {

#line 661 "lvd_xml_scanner.reflex"

        assert(m_text_in_progress != NULL);
        m_text_in_progress->m_text += '\'';
    
#line 818 "lvd_xml_scanner.cpp"

                }
                break;

                case 30:
                {

#line 667 "lvd_xml_scanner.reflex"

        assert(m_text_in_progress != NULL);
        m_text_in_progress->m_text += '>';
    
#line 831 "lvd_xml_scanner.cpp"

                }
                break;

                case 31:
                {

#line 673 "lvd_xml_scanner.reflex"

        assert(m_text_in_progress != NULL);
        m_text_in_progress->m_text += '<';
    
#line 844 "lvd_xml_scanner.cpp"

                }
                break;

                case 32:
                {

#line 679 "lvd_xml_scanner.reflex"

        assert(m_text_in_progress != NULL);
        m_text_in_progress->m_text += '"';
    
#line 857 "lvd_xml_scanner.cpp"

                }
                break;

                case 33:
                {

#line 697 "lvd_xml_scanner.reflex"

        EmitError("malformed entity '" + accepted_string + "' in string literal; ignoring", GetFiLoc());
    
#line 869 "lvd_xml_scanner.cpp"

                }
                break;

                case 34:
                {

#line 702 "lvd_xml_scanner.reflex"

        assert(m_text_in_progress != NULL);
        if (m_apos_delimited_string)
        {
            SwitchToStateMachine(StateMachine::TAG);
            Text *text = m_text_in_progress;
            m_text_in_progress = NULL;
            return Parser::Token(Parser::Terminal::STRING, text);
        }
        else
            m_text_in_progress->m_text += '\'';
    
#line 890 "lvd_xml_scanner.cpp"

                }
                break;

                case 35:
                {

#line 716 "lvd_xml_scanner.reflex"

        assert(m_text_in_progress != NULL);
        if (!m_apos_delimited_string)
        {
            SwitchToStateMachine(StateMachine::TAG);
            Text *text = m_text_in_progress;
            m_text_in_progress = NULL;
            return Parser::Token(Parser::Terminal::STRING, text);
        }
        else
            m_text_in_progress->m_text += '"';
    
#line 911 "lvd_xml_scanner.cpp"

                }
                break;

                case 36:
                {

#line 730 "lvd_xml_scanner.reflex"

        EmitError("unterminated string literal", GetFiLoc());
        SwitchToStateMachine(StateMachine::END_OF_FILE);
        Text *text = m_text_in_progress;
        m_text_in_progress = NULL;
        return Parser::Token(Parser::Terminal::STRING, text);
    
#line 927 "lvd_xml_scanner.cpp"

                }
                break;

                case 37:
                {

#line 493 "lvd_xml_scanner.reflex"

        SwitchToStateMachine(StateMachine::MAIN);
        return Parser::Terminal::CLOSE_PI;
    
#line 940 "lvd_xml_scanner.cpp"

                }
                break;

                case 38:
                {

#line 499 "lvd_xml_scanner.reflex"

        SwitchToStateMachine(StateMachine::MAIN);
        return Parser::Terminal::CLOSE_TAG;
    
#line 953 "lvd_xml_scanner.cpp"

                }
                break;

                case 39:
                {

#line 505 "lvd_xml_scanner.reflex"

        SwitchToStateMachine(StateMachine::MAIN);
        return Parser::Terminal::CLOSE_SELFENDED_TAG;
    
#line 966 "lvd_xml_scanner.cpp"

                }
                break;

                case 40:
                {

#line 511 "lvd_xml_scanner.reflex"

        assert(NewlineCount(accepted_string) == 0);
        return Parser::Token(Parser::Terminal::NAME, new Text(accepted_string, GetFiLoc()));
    
#line 979 "lvd_xml_scanner.cpp"

                }
                break;

                case 41:
                {

#line 517 "lvd_xml_scanner.reflex"

        return Parser::Token(accepted_string[0]); // the terminal is the ASCII value '='
    
#line 991 "lvd_xml_scanner.cpp"

                }
                break;

                case 42:
                {

#line 522 "lvd_xml_scanner.reflex"

        assert(m_text_in_progress == NULL);
        m_text_in_progress = new Text(GetFiLoc());
        m_apos_delimited_string = true;
        SwitchToStateMachine(StateMachine::STRING);
    
#line 1006 "lvd_xml_scanner.cpp"

                }
                break;

                case 43:
                {

#line 530 "lvd_xml_scanner.reflex"

        assert(m_text_in_progress == NULL);
        m_text_in_progress = new Text(GetFiLoc());
        m_apos_delimited_string = false;
        SwitchToStateMachine(StateMachine::STRING);
    
#line 1021 "lvd_xml_scanner.cpp"

                }
                break;

                case 44:
                {

#line 538 "lvd_xml_scanner.reflex"

        IncrementLineNumber(NewlineCount(accepted_string));
    
#line 1033 "lvd_xml_scanner.cpp"

                }
                break;

                case 45:
                {

#line 543 "lvd_xml_scanner.reflex"

        EmitError("EOF in tag", GetFiLoc());
        SwitchToStateMachine(StateMachine::END_OF_FILE);
    
#line 1046 "lvd_xml_scanner.cpp"

                }
                break;

                case 46:
                {

#line 549 "lvd_xml_scanner.reflex"

        assert(accepted_string.length() == 1);
        EmitUnexpectedCharacterError(accepted_string[0]);
        IncrementLineNumber(NewlineCount(accepted_string));
        return Parser::Terminal::BAD_TOKEN;
    
#line 1061 "lvd_xml_scanner.cpp"

                }
                break;

                default: assert(false && "this should never happen"); break;
            }
        }
    }


#line 298 "lvd_xml_scanner.reflex"

    assert(false && "you didn't handle EOF properly");
    return Parser::Terminal::END_;

#line 1077 "lvd_xml_scanner.cpp"
}

// ///////////////////////////////////////////////////////////////////////
// begin internal reflex-generated parser guts -- don't use
// ///////////////////////////////////////////////////////////////////////

void Scanner::PrintAtom_ (BarfCpp_::Uint8 atom)
{
    if (atom == '\\')                    std::cerr << "\\\\";
    else if (atom == '"')                std::cerr << "\\\"";
    else if (atom >= ' ' && atom <= '~') std::cerr << atom;
    else if (atom == '\n')               std::cerr << "\\n";
    else if (atom == '\t')               std::cerr << "\\t";
    else if (atom == '\0')               std::cerr << "\\0";
    else
    {
        std::cerr.width(2);
        std::cerr << "\\x" << std::hex << std::uppercase << BarfCpp_::Uint16(atom);
        std::cerr.width(1);
    }
}

void Scanner::PrintString_ (std::string const &s)
{
    // save the existing std::cerr properties for later restoration
    std::ios_base::fmtflags saved_stream_flags = std::cerr.flags();
    char saved_stream_fill = std::cerr.fill();
    std::streamsize saved_stream_width = std::cerr.width();
    std::streamsize saved_stream_precision = std::cerr.precision();

    // clear all format flags to a neutral state
    std::cerr.unsetf(
        std::ios_base::boolalpha|std::ios_base::dec|std::ios_base::fixed|
        std::ios_base::hex|std::ios_base::internal|std::ios_base::left|
        std::ios_base::oct|std::ios_base::right|std::ios_base::scientific|
        std::ios_base::showbase|std::ios_base::showpoint|std::ios_base::showpos|
        std::ios_base::skipws|std::ios_base::unitbuf|std::ios_base::uppercase|
        std::ios_base::adjustfield|std::ios_base::basefield|std::ios_base::floatfield);
    // the '0' char is used hex escape chars, which always have width 2
    std::cerr.fill('0');

    std::cerr << '"';
    for (std::string::size_type i = 0; i < s.size(); ++i)
        PrintAtom_(s[i]);
    std::cerr << '"';

    // restore the saved std::cerr properties
    std::cerr.setf(saved_stream_flags);
    std::cerr.fill(saved_stream_fill);
    std::cerr.width(saved_stream_width);
    std::cerr.precision(saved_stream_precision);
}

BarfCpp_::Uint32 const Scanner::ms_state_machine_start_state_index_[] =
{
    0,
    13,
    26,
    28,
    37,
    77,
    78,
    79,
    80,
    106,
};
BarfCpp_::Uint8 const Scanner::ms_state_machine_mode_flags_[] =
{
    2,
    2,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
};
char const *const Scanner::ms_state_machine_name_[] =
{
    "CDATA",
    "COMMENT",
    "END_OF_FILE",
    "END_TAG",
    "MAIN",
    "OPEN_END_TAG",
    "OPEN_PI",
    "OPEN_TAG",
    "STRING",
    "TAG",
};
BarfCpp_::Uint32 const Scanner::ms_state_machine_count_ = sizeof(Scanner::ms_state_machine_name_) / sizeof(*Scanner::ms_state_machine_name_);

// the order of the states indicates priority (only for accept states).
// the lower the state's index in this array, the higher its priority.
ReflexCpp_::AutomatonApparatus_::DfaState_ const Scanner::ms_state_table_[] =
{
    { 47, 2, ms_transition_table_+0 },
    { 47, 3, ms_transition_table_+2 },
    { 47, 2, ms_transition_table_+5 },
    { 1, 3, ms_transition_table_+7 },
    { 47, 2, ms_transition_table_+10 },
    { 47, 3, ms_transition_table_+12 },
    { 47, 2, ms_transition_table_+15 },
    { 47, 5, ms_transition_table_+17 },
    { 0, 2, ms_transition_table_+22 },
    { 0, 3, ms_transition_table_+24 },
    { 0, 3, ms_transition_table_+27 },
    { 1, 5, ms_transition_table_+30 },
    { 1, 3, ms_transition_table_+35 },
    { 47, 2, ms_transition_table_+38 },
    { 47, 3, ms_transition_table_+40 },
    { 47, 2, ms_transition_table_+43 },
    { 3, 3, ms_transition_table_+45 },
    { 47, 2, ms_transition_table_+48 },
    { 47, 3, ms_transition_table_+50 },
    { 47, 2, ms_transition_table_+53 },
    { 47, 5, ms_transition_table_+55 },
    { 2, 2, ms_transition_table_+60 },
    { 2, 3, ms_transition_table_+62 },
    { 2, 3, ms_transition_table_+65 },
    { 3, 5, ms_transition_table_+68 },
    { 3, 3, ms_transition_table_+73 },
    { 47, 1, ms_transition_table_+76 },
    { 4, 0, ms_transition_table_+77 },
    { 47, 2, ms_transition_table_+77 },
    { 47, 18, ms_transition_table_+79 },
    { 9, 0, ms_transition_table_+97 },
    { 7, 3, ms_transition_table_+97 },
    { 7, 3, ms_transition_table_+100 },
    { 6, 6, ms_transition_table_+103 },
    { 6, 6, ms_transition_table_+109 },
    { 5, 0, ms_transition_table_+115 },
    { 8, 18, ms_transition_table_+115 },
    { 47, 2, ms_transition_table_+133 },
    { 47, 10, ms_transition_table_+135 },
    { 21, 5, ms_transition_table_+145 },
    { 21, 5, ms_transition_table_+150 },
    { 23, 0, ms_transition_table_+155 },
    { 20, 4, ms_transition_table_+155 },
    { 20, 2, ms_transition_table_+159 },
    { 20, 1, ms_transition_table_+161 },
    { 20, 1, ms_transition_table_+162 },
    { 15, 0, ms_transition_table_+163 },
    { 20, 1, ms_transition_table_+163 },
    { 20, 1, ms_transition_table_+164 },
    { 20, 1, ms_transition_table_+165 },
    { 16, 0, ms_transition_table_+166 },
    { 20, 1, ms_transition_table_+166 },
    { 20, 1, ms_transition_table_+167 },
    { 17, 0, ms_transition_table_+168 },
    { 20, 1, ms_transition_table_+168 },
    { 20, 1, ms_transition_table_+169 },
    { 18, 0, ms_transition_table_+170 },
    { 20, 1, ms_transition_table_+170 },
    { 20, 1, ms_transition_table_+171 },
    { 20, 1, ms_transition_table_+172 },
    { 20, 1, ms_transition_table_+173 },
    { 19, 0, ms_transition_table_+174 },
    { 11, 4, ms_transition_table_+174 },
    { 47, 1, ms_transition_table_+178 },
    { 47, 1, ms_transition_table_+179 },
    { 13, 0, ms_transition_table_+180 },
    { 12, 0, ms_transition_table_+180 },
    { 10, 0, ms_transition_table_+180 },
    { 47, 1, ms_transition_table_+180 },
    { 47, 1, ms_transition_table_+181 },
    { 47, 1, ms_transition_table_+182 },
    { 47, 1, ms_transition_table_+183 },
    { 47, 1, ms_transition_table_+184 },
    { 47, 1, ms_transition_table_+185 },
    { 47, 1, ms_transition_table_+186 },
    { 14, 0, ms_transition_table_+187 },
    { 22, 10, ms_transition_table_+187 },
    { 24, 0, ms_transition_table_+197 },
    { 25, 0, ms_transition_table_+197 },
    { 26, 0, ms_transition_table_+197 },
    { 47, 2, ms_transition_table_+197 },
    { 47, 6, ms_transition_table_+199 },
    { 27, 3, ms_transition_table_+205 },
    { 35, 0, ms_transition_table_+208 },
    { 33, 4, ms_transition_table_+208 },
    { 33, 2, ms_transition_table_+212 },
    { 33, 1, ms_transition_table_+214 },
    { 33, 1, ms_transition_table_+215 },
    { 28, 0, ms_transition_table_+216 },
    { 33, 1, ms_transition_table_+216 },
    { 33, 1, ms_transition_table_+217 },
    { 33, 1, ms_transition_table_+218 },
    { 29, 0, ms_transition_table_+219 },
    { 33, 1, ms_transition_table_+219 },
    { 33, 1, ms_transition_table_+220 },
    { 30, 0, ms_transition_table_+221 },
    { 33, 1, ms_transition_table_+221 },
    { 33, 1, ms_transition_table_+222 },
    { 31, 0, ms_transition_table_+223 },
    { 33, 1, ms_transition_table_+223 },
    { 33, 1, ms_transition_table_+224 },
    { 33, 1, ms_transition_table_+225 },
    { 33, 1, ms_transition_table_+226 },
    { 32, 0, ms_transition_table_+227 },
    { 34, 0, ms_transition_table_+227 },
    { 36, 6, ms_transition_table_+227 },
    { 47, 2, ms_transition_table_+233 },
    { 47, 26, ms_transition_table_+235 },
    { 46, 0, ms_transition_table_+261 },
    { 44, 3, ms_transition_table_+261 },
    { 44, 3, ms_transition_table_+264 },
    { 43, 0, ms_transition_table_+267 },
    { 42, 0, ms_transition_table_+267 },
    { 46, 1, ms_transition_table_+267 },
    { 39, 0, ms_transition_table_+268 },
    { 40, 6, ms_transition_table_+268 },
    { 40, 6, ms_transition_table_+274 },
    { 41, 0, ms_transition_table_+280 },
    { 38, 0, ms_transition_table_+280 },
    { 46, 1, ms_transition_table_+280 },
    { 37, 0, ms_transition_table_+281 },
    { 45, 26, ms_transition_table_+281 }
};
BarfCpp_::Size const Scanner::ms_state_count_ = sizeof(Scanner::ms_state_table_) / sizeof(*Scanner::ms_state_table_);

ReflexCpp_::AutomatonApparatus_::DfaTransition_ const Scanner::ms_transition_table_[] =
{
    { ReflexCpp_::AutomatonApparatus_::DfaTransition_::CONDITIONAL, 2, 0, ms_state_table_+1 },
    { ReflexCpp_::AutomatonApparatus_::DfaTransition_::CONDITIONAL, 2, 2, ms_state_table_+3 },
    { ReflexCpp_::AutomatonApparatus_::DfaTransition_::INPUT_ATOM, 93, 0, ms_state_table_+4 },
    { ReflexCpp_::AutomatonApparatus_::DfaTransition_::INPUT_ATOM_RANGE, 1, 92, ms_state_table_+2 },
    { ReflexCpp_::AutomatonApparatus_::DfaTransition_::INPUT_ATOM_RANGE, 94, 255, ms_state_table_+2 },
    { ReflexCpp_::AutomatonApparatus_::DfaTransition_::CONDITIONAL, 2, 0, ms_state_table_+1 },
    { ReflexCpp_::AutomatonApparatus_::DfaTransition_::CONDITIONAL, 2, 2, ms_state_table_+3 },
    { ReflexCpp_::AutomatonApparatus_::DfaTransition_::INPUT_ATOM, 93, 0, ms_state_table_+4 },
    { ReflexCpp_::AutomatonApparatus_::DfaTransition_::INPUT_ATOM_RANGE, 1, 92, ms_state_table_+2 },
    { ReflexCpp_::AutomatonApparatus_::DfaTransition_::INPUT_ATOM_RANGE, 94, 255, ms_state_table_+2 },
    { ReflexCpp_::AutomatonApparatus_::DfaTransition_::CONDITIONAL, 2, 0, ms_state_table_+5 },
    { ReflexCpp_::AutomatonApparatus_::DfaTransition_::CONDITIONAL, 2, 2, ms_state_table_+12 },
    { ReflexCpp_::AutomatonApparatus_::DfaTransition_::INPUT_ATOM, 93, 0, ms_state_table_+6 },
    { ReflexCpp_::AutomatonApparatus_::DfaTransition_::INPUT_ATOM_RANGE, 1, 92, ms_state_table_+2 },
    { ReflexCpp_::AutomatonApparatus_::DfaTransition_::INPUT_ATOM_RANGE, 94, 255, ms_state_table_+2 },
    { ReflexCpp_::AutomatonApparatus_::DfaTransition_::CONDITIONAL, 2, 0, ms_state_table_+7 },
    { ReflexCpp_::AutomatonApparatus_::DfaTransition_::CONDITIONAL, 2, 2, ms_state_table_+11 },
    { ReflexCpp_::AutomatonApparatus_::DfaTransition_::INPUT_ATOM, 62, 0, ms_state_table_+8 },
    { ReflexCpp_::AutomatonApparatus_::DfaTransition_::INPUT_ATOM, 93, 0, ms_state_table_+6 },
    { ReflexCpp_::AutomatonApparatus_::DfaTransition_::INPUT_ATOM_RANGE, 1, 61, ms_state_table_+2 },
    { ReflexCpp_::AutomatonApparatus_::DfaTransition_::INPUT_ATOM_RANGE, 63, 92, ms_state_table_+2 },
    { ReflexCpp_::AutomatonApparatus_::DfaTransition_::INPUT_ATOM_RANGE, 94, 255, ms_state_table_+2 },
    { ReflexCpp_::AutomatonApparatus_::DfaTransition_::CONDITIONAL, 2, 0, ms_state_table_+9 },
    { ReflexCpp_::AutomatonApparatus_::DfaTransition_::CONDITIONAL, 2, 2, ms_state_table_+10 },
    { ReflexCpp_::AutomatonApparatus_::DfaTransition_::INPUT_ATOM, 93, 0, ms_state_table_+4 },
    { ReflexCpp_::AutomatonApparatus_::DfaTransition_::INPUT_ATOM_RANGE, 1, 92, ms_state_table_+2 },
    { ReflexCpp_::AutomatonApparatus_::DfaTransition_::INPUT_ATOM_RANGE, 94, 255, ms_state_table_+2 },
    { ReflexCpp_::AutomatonApparatus_::DfaTransition_::INPUT_ATOM, 93, 0, ms_state_table_+4 },
    { ReflexCpp_::AutomatonApparatus_::DfaTransition_::INPUT_ATOM_RANGE, 1, 92, ms_state_table_+2 },
    { ReflexCpp_::AutomatonApparatus_::DfaTransition_::INPUT_ATOM_RANGE, 94, 255, ms_state_table_+2 },
    { ReflexCpp_::AutomatonApparatus_::DfaTransition_::INPUT_ATOM, 62, 0, ms_state_table_+8 },
    { ReflexCpp_::AutomatonApparatus_::DfaTransition_::INPUT_ATOM, 93, 0, ms_state_table_+6 },
    { ReflexCpp_::AutomatonApparatus_::DfaTransition_::INPUT_ATOM_RANGE, 1, 61, ms_state_table_+2 },
    { ReflexCpp_::AutomatonApparatus_::DfaTransition_::INPUT_ATOM_RANGE, 63, 92, ms_state_table_+2 },
    { ReflexCpp_::AutomatonApparatus_::DfaTransition_::INPUT_ATOM_RANGE, 94, 255, ms_state_table_+2 },
    { ReflexCpp_::AutomatonApparatus_::DfaTransition_::INPUT_ATOM, 93, 0, ms_state_table_+6 },
    { ReflexCpp_::AutomatonApparatus_::DfaTransition_::INPUT_ATOM_RANGE, 1, 92, ms_state_table_+2 },
    { ReflexCpp_::AutomatonApparatus_::DfaTransition_::INPUT_ATOM_RANGE, 94, 255, ms_state_table_+2 },
    { ReflexCpp_::AutomatonApparatus_::DfaTransition_::CONDITIONAL, 2, 0, ms_state_table_+14 },
    { ReflexCpp_::AutomatonApparatus_::DfaTransition_::CONDITIONAL, 2, 2, ms_state_table_+16 },
    { ReflexCpp_::AutomatonApparatus_::DfaTransition_::INPUT_ATOM, 45, 0, ms_state_table_+17 },
    { ReflexCpp_::AutomatonApparatus_::DfaTransition_::INPUT_ATOM_RANGE, 1, 44, ms_state_table_+15 },
    { ReflexCpp_::AutomatonApparatus_::DfaTransition_::INPUT_ATOM_RANGE, 46, 255, ms_state_table_+15 },
    { ReflexCpp_::AutomatonApparatus_::DfaTransition_::CONDITIONAL, 2, 0, ms_state_table_+14 },
    { ReflexCpp_::AutomatonApparatus_::DfaTransition_::CONDITIONAL, 2, 2, ms_state_table_+16 },
    { ReflexCpp_::AutomatonApparatus_::DfaTransition_::INPUT_ATOM, 45, 0, ms_state_table_+17 },
    { ReflexCpp_::AutomatonApparatus_::DfaTransition_::INPUT_ATOM_RANGE, 1, 44, ms_state_table_+15 },
    { ReflexCpp_::AutomatonApparatus_::DfaTransition_::INPUT_ATOM_RANGE, 46, 255, ms_state_table_+15 },
    { ReflexCpp_::AutomatonApparatus_::DfaTransition_::CONDITIONAL, 2, 0, ms_state_table_+18 },
    { ReflexCpp_::AutomatonApparatus_::DfaTransition_::CONDITIONAL, 2, 2, ms_state_table_+25 },
    { ReflexCpp_::AutomatonApparatus_::DfaTransition_::INPUT_ATOM, 45, 0, ms_state_table_+19 },
    { ReflexCpp_::AutomatonApparatus_::DfaTransition_::INPUT_ATOM_RANGE, 1, 44, ms_state_table_+15 },
    { ReflexCpp_::AutomatonApparatus_::DfaTransition_::INPUT_ATOM_RANGE, 46, 255, ms_state_table_+15 },
    { ReflexCpp_::AutomatonApparatus_::DfaTransition_::CONDITIONAL, 2, 0, ms_state_table_+20 },
    { ReflexCpp_::AutomatonApparatus_::DfaTransition_::CONDITIONAL, 2, 2, ms_state_table_+24 },
    { ReflexCpp_::AutomatonApparatus_::DfaTransition_::INPUT_ATOM, 45, 0, ms_state_table_+19 },
    { ReflexCpp_::AutomatonApparatus_::DfaTransition_::INPUT_ATOM, 62, 0, ms_state_table_+21 },
    { ReflexCpp_::AutomatonApparatus_::DfaTransition_::INPUT_ATOM_RANGE, 1, 44, ms_state_table_+15 },
    { ReflexCpp_::AutomatonApparatus_::DfaTransition_::INPUT_ATOM_RANGE, 46, 61, ms_state_table_+15 },
    { ReflexCpp_::AutomatonApparatus_::DfaTransition_::INPUT_ATOM_RANGE, 63, 255, ms_state_table_+15 },
    { ReflexCpp_::AutomatonApparatus_::DfaTransition_::CONDITIONAL, 2, 0, ms_state_table_+22 },
    { ReflexCpp_::AutomatonApparatus_::DfaTransition_::CONDITIONAL, 2, 2, ms_state_table_+23 },
    { ReflexCpp_::AutomatonApparatus_::DfaTransition_::INPUT_ATOM, 45, 0, ms_state_table_+17 },
    { ReflexCpp_::AutomatonApparatus_::DfaTransition_::INPUT_ATOM_RANGE, 1, 44, ms_state_table_+15 },
    { ReflexCpp_::AutomatonApparatus_::DfaTransition_::INPUT_ATOM_RANGE, 46, 255, ms_state_table_+15 },
    { ReflexCpp_::AutomatonApparatus_::DfaTransition_::INPUT_ATOM, 45, 0, ms_state_table_+17 },
    { ReflexCpp_::AutomatonApparatus_::DfaTransition_::INPUT_ATOM_RANGE, 1, 44, ms_state_table_+15 },
    { ReflexCpp_::AutomatonApparatus_::DfaTransition_::INPUT_ATOM_RANGE, 46, 255, ms_state_table_+15 },
    { ReflexCpp_::AutomatonApparatus_::DfaTransition_::INPUT_ATOM, 45, 0, ms_state_table_+19 },
    { ReflexCpp_::AutomatonApparatus_::DfaTransition_::INPUT_ATOM, 62, 0, ms_state_table_+21 },
    { ReflexCpp_::AutomatonApparatus_::DfaTransition_::INPUT_ATOM_RANGE, 1, 44, ms_state_table_+15 },
    { ReflexCpp_::AutomatonApparatus_::DfaTransition_::INPUT_ATOM_RANGE, 46, 61, ms_state_table_+15 },
    { ReflexCpp_::AutomatonApparatus_::DfaTransition_::INPUT_ATOM_RANGE, 63, 255, ms_state_table_+15 },
    { ReflexCpp_::AutomatonApparatus_::DfaTransition_::INPUT_ATOM, 45, 0, ms_state_table_+19 },
    { ReflexCpp_::AutomatonApparatus_::DfaTransition_::INPUT_ATOM_RANGE, 1, 44, ms_state_table_+15 },
    { ReflexCpp_::AutomatonApparatus_::DfaTransition_::INPUT_ATOM_RANGE, 46, 255, ms_state_table_+15 },
    { ReflexCpp_::AutomatonApparatus_::DfaTransition_::CONDITIONAL, 2, 2, ms_state_table_+27 },
    { ReflexCpp_::AutomatonApparatus_::DfaTransition_::CONDITIONAL, 2, 0, ms_state_table_+29 },
    { ReflexCpp_::AutomatonApparatus_::DfaTransition_::CONDITIONAL, 2, 2, ms_state_table_+36 },
    { ReflexCpp_::AutomatonApparatus_::DfaTransition_::INPUT_ATOM, 13, 0, ms_state_table_+31 },
    { ReflexCpp_::AutomatonApparatus_::DfaTransition_::INPUT_ATOM, 32, 0, ms_state_table_+31 },
    { ReflexCpp_::AutomatonApparatus_::DfaTransition_::INPUT_ATOM, 58, 0, ms_state_table_+33 },
    { ReflexCpp_::AutomatonApparatus_::DfaTransition_::INPUT_ATOM, 62, 0, ms_state_table_+35 },
    { ReflexCpp_::AutomatonApparatus_::DfaTransition_::INPUT_ATOM, 95, 0, ms_state_table_+33 },
    { ReflexCpp_::AutomatonApparatus_::DfaTransition_::INPUT_ATOM, 96, 0, ms_state_table_+30 },
    { ReflexCpp_::AutomatonApparatus_::DfaTransition_::INPUT_ATOM_RANGE, 1, 8, ms_state_table_+30 },
    { ReflexCpp_::AutomatonApparatus_::DfaTransition_::INPUT_ATOM_RANGE, 9, 10, ms_state_table_+31 },
    { ReflexCpp_::AutomatonApparatus_::DfaTransition_::INPUT_ATOM_RANGE, 11, 12, ms_state_table_+30 },
    { ReflexCpp_::AutomatonApparatus_::DfaTransition_::INPUT_ATOM_RANGE, 14, 31, ms_state_table_+30 },
    { ReflexCpp_::AutomatonApparatus_::DfaTransition_::INPUT_ATOM_RANGE, 33, 57, ms_state_table_+30 },
    { ReflexCpp_::AutomatonApparatus_::DfaTransition_::INPUT_ATOM_RANGE, 59, 61, ms_state_table_+30 },
    { ReflexCpp_::AutomatonApparatus_::DfaTransition_::INPUT_ATOM_RANGE, 63, 64, ms_state_table_+30 },
    { ReflexCpp_::AutomatonApparatus_::DfaTransition_::INPUT_ATOM_RANGE, 65, 90, ms_state_table_+33 },
    { ReflexCpp_::AutomatonApparatus_::DfaTransition_::INPUT_ATOM_RANGE, 91, 94, ms_state_table_+30 },
    { ReflexCpp_::AutomatonApparatus_::DfaTransition_::INPUT_ATOM_RANGE, 97, 122, ms_state_table_+33 },
    { ReflexCpp_::AutomatonApparatus_::DfaTransition_::INPUT_ATOM_RANGE, 123, 127, ms_state_table_+30 },
    { ReflexCpp_::AutomatonApparatus_::DfaTransition_::INPUT_ATOM_RANGE, 128, 255, ms_state_table_+33 },
    { ReflexCpp_::AutomatonApparatus_::DfaTransition_::INPUT_ATOM, 13, 0, ms_state_table_+32 },
    { ReflexCpp_::AutomatonApparatus_::DfaTransition_::INPUT_ATOM, 32, 0, ms_state_table_+32 },
    { ReflexCpp_::AutomatonApparatus_::DfaTransition_::INPUT_ATOM_RANGE, 9, 10, ms_state_table_+32 },
    { ReflexCpp_::AutomatonApparatus_::DfaTransition_::INPUT_ATOM, 13, 0, ms_state_table_+32 },
    { ReflexCpp_::AutomatonApparatus_::DfaTransition_::INPUT_ATOM, 32, 0, ms_state_table_+32 },
    { ReflexCpp_::AutomatonApparatus_::DfaTransition_::INPUT_ATOM_RANGE, 9, 10, ms_state_table_+32 },
    { ReflexCpp_::AutomatonApparatus_::DfaTransition_::INPUT_ATOM, 95, 0, ms_state_table_+34 },
    { ReflexCpp_::AutomatonApparatus_::DfaTransition_::INPUT_ATOM_RANGE, 45, 46, ms_state_table_+34 },
    { ReflexCpp_::AutomatonApparatus_::DfaTransition_::INPUT_ATOM_RANGE, 48, 58, ms_state_table_+34 },
    { ReflexCpp_::AutomatonApparatus_::DfaTransition_::INPUT_ATOM_RANGE, 65, 90, ms_state_table_+34 },
    { ReflexCpp_::AutomatonApparatus_::DfaTransition_::INPUT_ATOM_RANGE, 97, 122, ms_state_table_+34 },
    { ReflexCpp_::AutomatonApparatus_::DfaTransition_::INPUT_ATOM_RANGE, 128, 255, ms_state_table_+34 },
    { ReflexCpp_::AutomatonApparatus_::DfaTransition_::INPUT_ATOM, 95, 0, ms_state_table_+34 },
    { ReflexCpp_::AutomatonApparatus_::DfaTransition_::INPUT_ATOM_RANGE, 45, 46, ms_state_table_+34 },
    { ReflexCpp_::AutomatonApparatus_::DfaTransition_::INPUT_ATOM_RANGE, 48, 58, ms_state_table_+34 },
    { ReflexCpp_::AutomatonApparatus_::DfaTransition_::INPUT_ATOM_RANGE, 65, 90, ms_state_table_+34 },
    { ReflexCpp_::AutomatonApparatus_::DfaTransition_::INPUT_ATOM_RANGE, 97, 122, ms_state_table_+34 },
    { ReflexCpp_::AutomatonApparatus_::DfaTransition_::INPUT_ATOM_RANGE, 128, 255, ms_state_table_+34 },
    { ReflexCpp_::AutomatonApparatus_::DfaTransition_::INPUT_ATOM, 13, 0, ms_state_table_+31 },
    { ReflexCpp_::AutomatonApparatus_::DfaTransition_::INPUT_ATOM, 32, 0, ms_state_table_+31 },
    { ReflexCpp_::AutomatonApparatus_::DfaTransition_::INPUT_ATOM, 58, 0, ms_state_table_+33 },
    { ReflexCpp_::AutomatonApparatus_::DfaTransition_::INPUT_ATOM, 62, 0, ms_state_table_+35 },
    { ReflexCpp_::AutomatonApparatus_::DfaTransition_::INPUT_ATOM, 95, 0, ms_state_table_+33 },
    { ReflexCpp_::AutomatonApparatus_::DfaTransition_::INPUT_ATOM, 96, 0, ms_state_table_+30 },
    { ReflexCpp_::AutomatonApparatus_::DfaTransition_::INPUT_ATOM_RANGE, 1, 8, ms_state_table_+30 },
    { ReflexCpp_::AutomatonApparatus_::DfaTransition_::INPUT_ATOM_RANGE, 9, 10, ms_state_table_+31 },
    { ReflexCpp_::AutomatonApparatus_::DfaTransition_::INPUT_ATOM_RANGE, 11, 12, ms_state_table_+30 },
    { ReflexCpp_::AutomatonApparatus_::DfaTransition_::INPUT_ATOM_RANGE, 14, 31, ms_state_table_+30 },
    { ReflexCpp_::AutomatonApparatus_::DfaTransition_::INPUT_ATOM_RANGE, 33, 57, ms_state_table_+30 },
    { ReflexCpp_::AutomatonApparatus_::DfaTransition_::INPUT_ATOM_RANGE, 59, 61, ms_state_table_+30 },
    { ReflexCpp_::AutomatonApparatus_::DfaTransition_::INPUT_ATOM_RANGE, 63, 64, ms_state_table_+30 },
    { ReflexCpp_::AutomatonApparatus_::DfaTransition_::INPUT_ATOM_RANGE, 65, 90, ms_state_table_+33 },
    { ReflexCpp_::AutomatonApparatus_::DfaTransition_::INPUT_ATOM_RANGE, 91, 94, ms_state_table_+30 },
    { ReflexCpp_::AutomatonApparatus_::DfaTransition_::INPUT_ATOM_RANGE, 97, 122, ms_state_table_+33 },
    { ReflexCpp_::AutomatonApparatus_::DfaTransition_::INPUT_ATOM_RANGE, 123, 127, ms_state_table_+30 },
    { ReflexCpp_::AutomatonApparatus_::DfaTransition_::INPUT_ATOM_RANGE, 128, 255, ms_state_table_+33 },
    { ReflexCpp_::AutomatonApparatus_::DfaTransition_::CONDITIONAL, 2, 0, ms_state_table_+38 },
    { ReflexCpp_::AutomatonApparatus_::DfaTransition_::CONDITIONAL, 2, 2, ms_state_table_+76 },
    { ReflexCpp_::AutomatonApparatus_::DfaTransition_::INPUT_ATOM, 34, 0, ms_state_table_+41 },
    { ReflexCpp_::AutomatonApparatus_::DfaTransition_::INPUT_ATOM, 38, 0, ms_state_table_+42 },
    { ReflexCpp_::AutomatonApparatus_::DfaTransition_::INPUT_ATOM, 39, 0, ms_state_table_+41 },
    { ReflexCpp_::AutomatonApparatus_::DfaTransition_::INPUT_ATOM, 60, 0, ms_state_table_+62 },
    { ReflexCpp_::AutomatonApparatus_::DfaTransition_::INPUT_ATOM, 61, 0, ms_state_table_+39 },
    { ReflexCpp_::AutomatonApparatus_::DfaTransition_::INPUT_ATOM, 62, 0, ms_state_table_+41 },
    { ReflexCpp_::AutomatonApparatus_::DfaTransition_::INPUT_ATOM_RANGE, 1, 33, ms_state_table_+39 },
    { ReflexCpp_::AutomatonApparatus_::DfaTransition_::INPUT_ATOM_RANGE, 35, 37, ms_state_table_+39 },
    { ReflexCpp_::AutomatonApparatus_::DfaTransition_::INPUT_ATOM_RANGE, 40, 59, ms_state_table_+39 },
    { ReflexCpp_::AutomatonApparatus_::DfaTransition_::INPUT_ATOM_RANGE, 63, 255, ms_state_table_+39 },
    { ReflexCpp_::AutomatonApparatus_::DfaTransition_::INPUT_ATOM, 61, 0, ms_state_table_+40 },
    { ReflexCpp_::AutomatonApparatus_::DfaTransition_::INPUT_ATOM_RANGE, 1, 33, ms_state_table_+40 },
    { ReflexCpp_::AutomatonApparatus_::DfaTransition_::INPUT_ATOM_RANGE, 35, 37, ms_state_table_+40 },
    { ReflexCpp_::AutomatonApparatus_::DfaTransition_::INPUT_ATOM_RANGE, 40, 59, ms_state_table_+40 },
    { ReflexCpp_::AutomatonApparatus_::DfaTransition_::INPUT_ATOM_RANGE, 63, 255, ms_state_table_+40 },
    { ReflexCpp_::AutomatonApparatus_::DfaTransition_::INPUT_ATOM, 61, 0, ms_state_table_+40 },
    { ReflexCpp_::AutomatonApparatus_::DfaTransition_::INPUT_ATOM_RANGE, 1, 33, ms_state_table_+40 },
    { ReflexCpp_::AutomatonApparatus_::DfaTransition_::INPUT_ATOM_RANGE, 35, 37, ms_state_table_+40 },
    { ReflexCpp_::AutomatonApparatus_::DfaTransition_::INPUT_ATOM_RANGE, 40, 59, ms_state_table_+40 },
    { ReflexCpp_::AutomatonApparatus_::DfaTransition_::INPUT_ATOM_RANGE, 63, 255, ms_state_table_+40 },
    { ReflexCpp_::AutomatonApparatus_::DfaTransition_::INPUT_ATOM, 97, 0, ms_state_table_+43 },
    { ReflexCpp_::AutomatonApparatus_::DfaTransition_::INPUT_ATOM, 103, 0, ms_state_table_+51 },
    { ReflexCpp_::AutomatonApparatus_::DfaTransition_::INPUT_ATOM, 108, 0, ms_state_table_+54 },
    { ReflexCpp_::AutomatonApparatus_::DfaTransition_::INPUT_ATOM, 113, 0, ms_state_table_+57 },
    { ReflexCpp_::AutomatonApparatus_::DfaTransition_::INPUT_ATOM, 109, 0, ms_state_table_+44 },
    { ReflexCpp_::AutomatonApparatus_::DfaTransition_::INPUT_ATOM, 112, 0, ms_state_table_+47 },
    { ReflexCpp_::AutomatonApparatus_::DfaTransition_::INPUT_ATOM, 112, 0, ms_state_table_+45 },
    { ReflexCpp_::AutomatonApparatus_::DfaTransition_::INPUT_ATOM, 59, 0, ms_state_table_+46 },
    { ReflexCpp_::AutomatonApparatus_::DfaTransition_::INPUT_ATOM, 111, 0, ms_state_table_+48 },
    { ReflexCpp_::AutomatonApparatus_::DfaTransition_::INPUT_ATOM, 115, 0, ms_state_table_+49 },
    { ReflexCpp_::AutomatonApparatus_::DfaTransition_::INPUT_ATOM, 59, 0, ms_state_table_+50 },
    { ReflexCpp_::AutomatonApparatus_::DfaTransition_::INPUT_ATOM, 116, 0, ms_state_table_+52 },
    { ReflexCpp_::AutomatonApparatus_::DfaTransition_::INPUT_ATOM, 59, 0, ms_state_table_+53 },
    { ReflexCpp_::AutomatonApparatus_::DfaTransition_::INPUT_ATOM, 116, 0, ms_state_table_+55 },
    { ReflexCpp_::AutomatonApparatus_::DfaTransition_::INPUT_ATOM, 59, 0, ms_state_table_+56 },
    { ReflexCpp_::AutomatonApparatus_::DfaTransition_::INPUT_ATOM, 117, 0, ms_state_table_+58 },
    { ReflexCpp_::AutomatonApparatus_::DfaTransition_::INPUT_ATOM, 111, 0, ms_state_table_+59 },
    { ReflexCpp_::AutomatonApparatus_::DfaTransition_::INPUT_ATOM, 116, 0, ms_state_table_+60 },
    { ReflexCpp_::AutomatonApparatus_::DfaTransition_::INPUT_ATOM, 59, 0, ms_state_table_+61 },
    { ReflexCpp_::AutomatonApparatus_::DfaTransition_::INPUT_ATOM, 33, 0, ms_state_table_+63 },
    { ReflexCpp_::AutomatonApparatus_::DfaTransition_::INPUT_ATOM, 47, 0, ms_state_table_+66 },
    { ReflexCpp_::AutomatonApparatus_::DfaTransition_::INPUT_ATOM, 63, 0, ms_state_table_+67 },
    { ReflexCpp_::AutomatonApparatus_::DfaTransition_::INPUT_ATOM, 91, 0, ms_state_table_+68 },
    { ReflexCpp_::AutomatonApparatus_::DfaTransition_::INPUT_ATOM, 45, 0, ms_state_table_+64 },
    { ReflexCpp_::AutomatonApparatus_::DfaTransition_::INPUT_ATOM, 45, 0, ms_state_table_+65 },
    { ReflexCpp_::AutomatonApparatus_::DfaTransition_::INPUT_ATOM, 33, 0, ms_state_table_+69 },
    { ReflexCpp_::AutomatonApparatus_::DfaTransition_::INPUT_ATOM, 67, 0, ms_state_table_+70 },
    { ReflexCpp_::AutomatonApparatus_::DfaTransition_::INPUT_ATOM, 68, 0, ms_state_table_+71 },
    { ReflexCpp_::AutomatonApparatus_::DfaTransition_::INPUT_ATOM, 65, 0, ms_state_table_+72 },
    { ReflexCpp_::AutomatonApparatus_::DfaTransition_::INPUT_ATOM, 84, 0, ms_state_table_+73 },
    { ReflexCpp_::AutomatonApparatus_::DfaTransition_::INPUT_ATOM, 65, 0, ms_state_table_+74 },
    { ReflexCpp_::AutomatonApparatus_::DfaTransition_::INPUT_ATOM, 91, 0, ms_state_table_+75 },
    { ReflexCpp_::AutomatonApparatus_::DfaTransition_::INPUT_ATOM, 34, 0, ms_state_table_+41 },
    { ReflexCpp_::AutomatonApparatus_::DfaTransition_::INPUT_ATOM, 38, 0, ms_state_table_+42 },
    { ReflexCpp_::AutomatonApparatus_::DfaTransition_::INPUT_ATOM, 39, 0, ms_state_table_+41 },
    { ReflexCpp_::AutomatonApparatus_::DfaTransition_::INPUT_ATOM, 60, 0, ms_state_table_+62 },
    { ReflexCpp_::AutomatonApparatus_::DfaTransition_::INPUT_ATOM, 61, 0, ms_state_table_+39 },
    { ReflexCpp_::AutomatonApparatus_::DfaTransition_::INPUT_ATOM, 62, 0, ms_state_table_+41 },
    { ReflexCpp_::AutomatonApparatus_::DfaTransition_::INPUT_ATOM_RANGE, 1, 33, ms_state_table_+39 },
    { ReflexCpp_::AutomatonApparatus_::DfaTransition_::INPUT_ATOM_RANGE, 35, 37, ms_state_table_+39 },
    { ReflexCpp_::AutomatonApparatus_::DfaTransition_::INPUT_ATOM_RANGE, 40, 59, ms_state_table_+39 },
    { ReflexCpp_::AutomatonApparatus_::DfaTransition_::INPUT_ATOM_RANGE, 63, 255, ms_state_table_+39 },
    { ReflexCpp_::AutomatonApparatus_::DfaTransition_::CONDITIONAL, 2, 0, ms_state_table_+81 },
    { ReflexCpp_::AutomatonApparatus_::DfaTransition_::CONDITIONAL, 2, 2, ms_state_table_+105 },
    { ReflexCpp_::AutomatonApparatus_::DfaTransition_::INPUT_ATOM, 34, 0, ms_state_table_+83 },
    { ReflexCpp_::AutomatonApparatus_::DfaTransition_::INPUT_ATOM, 38, 0, ms_state_table_+84 },
    { ReflexCpp_::AutomatonApparatus_::DfaTransition_::INPUT_ATOM, 39, 0, ms_state_table_+104 },
    { ReflexCpp_::AutomatonApparatus_::DfaTransition_::INPUT_ATOM_RANGE, 1, 33, ms_state_table_+82 },
    { ReflexCpp_::AutomatonApparatus_::DfaTransition_::INPUT_ATOM_RANGE, 35, 37, ms_state_table_+82 },
    { ReflexCpp_::AutomatonApparatus_::DfaTransition_::INPUT_ATOM_RANGE, 40, 255, ms_state_table_+82 },
    { ReflexCpp_::AutomatonApparatus_::DfaTransition_::INPUT_ATOM_RANGE, 1, 33, ms_state_table_+82 },
    { ReflexCpp_::AutomatonApparatus_::DfaTransition_::INPUT_ATOM_RANGE, 35, 37, ms_state_table_+82 },
    { ReflexCpp_::AutomatonApparatus_::DfaTransition_::INPUT_ATOM_RANGE, 40, 255, ms_state_table_+82 },
    { ReflexCpp_::AutomatonApparatus_::DfaTransition_::INPUT_ATOM, 97, 0, ms_state_table_+85 },
    { ReflexCpp_::AutomatonApparatus_::DfaTransition_::INPUT_ATOM, 103, 0, ms_state_table_+93 },
    { ReflexCpp_::AutomatonApparatus_::DfaTransition_::INPUT_ATOM, 108, 0, ms_state_table_+96 },
    { ReflexCpp_::AutomatonApparatus_::DfaTransition_::INPUT_ATOM, 113, 0, ms_state_table_+99 },
    { ReflexCpp_::AutomatonApparatus_::DfaTransition_::INPUT_ATOM, 109, 0, ms_state_table_+86 },
    { ReflexCpp_::AutomatonApparatus_::DfaTransition_::INPUT_ATOM, 112, 0, ms_state_table_+89 },
    { ReflexCpp_::AutomatonApparatus_::DfaTransition_::INPUT_ATOM, 112, 0, ms_state_table_+87 },
    { ReflexCpp_::AutomatonApparatus_::DfaTransition_::INPUT_ATOM, 59, 0, ms_state_table_+88 },
    { ReflexCpp_::AutomatonApparatus_::DfaTransition_::INPUT_ATOM, 111, 0, ms_state_table_+90 },
    { ReflexCpp_::AutomatonApparatus_::DfaTransition_::INPUT_ATOM, 115, 0, ms_state_table_+91 },
    { ReflexCpp_::AutomatonApparatus_::DfaTransition_::INPUT_ATOM, 59, 0, ms_state_table_+92 },
    { ReflexCpp_::AutomatonApparatus_::DfaTransition_::INPUT_ATOM, 116, 0, ms_state_table_+94 },
    { ReflexCpp_::AutomatonApparatus_::DfaTransition_::INPUT_ATOM, 59, 0, ms_state_table_+95 },
    { ReflexCpp_::AutomatonApparatus_::DfaTransition_::INPUT_ATOM, 116, 0, ms_state_table_+97 },
    { ReflexCpp_::AutomatonApparatus_::DfaTransition_::INPUT_ATOM, 59, 0, ms_state_table_+98 },
    { ReflexCpp_::AutomatonApparatus_::DfaTransition_::INPUT_ATOM, 117, 0, ms_state_table_+100 },
    { ReflexCpp_::AutomatonApparatus_::DfaTransition_::INPUT_ATOM, 111, 0, ms_state_table_+101 },
    { ReflexCpp_::AutomatonApparatus_::DfaTransition_::INPUT_ATOM, 116, 0, ms_state_table_+102 },
    { ReflexCpp_::AutomatonApparatus_::DfaTransition_::INPUT_ATOM, 59, 0, ms_state_table_+103 },
    { ReflexCpp_::AutomatonApparatus_::DfaTransition_::INPUT_ATOM, 34, 0, ms_state_table_+83 },
    { ReflexCpp_::AutomatonApparatus_::DfaTransition_::INPUT_ATOM, 38, 0, ms_state_table_+84 },
    { ReflexCpp_::AutomatonApparatus_::DfaTransition_::INPUT_ATOM, 39, 0, ms_state_table_+104 },
    { ReflexCpp_::AutomatonApparatus_::DfaTransition_::INPUT_ATOM_RANGE, 1, 33, ms_state_table_+82 },
    { ReflexCpp_::AutomatonApparatus_::DfaTransition_::INPUT_ATOM_RANGE, 35, 37, ms_state_table_+82 },
    { ReflexCpp_::AutomatonApparatus_::DfaTransition_::INPUT_ATOM_RANGE, 40, 255, ms_state_table_+82 },
    { ReflexCpp_::AutomatonApparatus_::DfaTransition_::CONDITIONAL, 2, 0, ms_state_table_+107 },
    { ReflexCpp_::AutomatonApparatus_::DfaTransition_::CONDITIONAL, 2, 2, ms_state_table_+121 },
    { ReflexCpp_::AutomatonApparatus_::DfaTransition_::INPUT_ATOM, 13, 0, ms_state_table_+109 },
    { ReflexCpp_::AutomatonApparatus_::DfaTransition_::INPUT_ATOM, 32, 0, ms_state_table_+109 },
    { ReflexCpp_::AutomatonApparatus_::DfaTransition_::INPUT_ATOM, 33, 0, ms_state_table_+108 },
    { ReflexCpp_::AutomatonApparatus_::DfaTransition_::INPUT_ATOM, 34, 0, ms_state_table_+111 },
    { ReflexCpp_::AutomatonApparatus_::DfaTransition_::INPUT_ATOM, 39, 0, ms_state_table_+112 },
    { ReflexCpp_::AutomatonApparatus_::DfaTransition_::INPUT_ATOM, 47, 0, ms_state_table_+113 },
    { ReflexCpp_::AutomatonApparatus_::DfaTransition_::INPUT_ATOM, 58, 0, ms_state_table_+115 },
    { ReflexCpp_::AutomatonApparatus_::DfaTransition_::INPUT_ATOM, 61, 0, ms_state_table_+117 },
    { ReflexCpp_::AutomatonApparatus_::DfaTransition_::INPUT_ATOM, 62, 0, ms_state_table_+118 },
    { ReflexCpp_::AutomatonApparatus_::DfaTransition_::INPUT_ATOM, 63, 0, ms_state_table_+119 },
    { ReflexCpp_::AutomatonApparatus_::DfaTransition_::INPUT_ATOM, 64, 0, ms_state_table_+108 },
    { ReflexCpp_::AutomatonApparatus_::DfaTransition_::INPUT_ATOM, 95, 0, ms_state_table_+115 },
    { ReflexCpp_::AutomatonApparatus_::DfaTransition_::INPUT_ATOM, 96, 0, ms_state_table_+108 },
    { ReflexCpp_::AutomatonApparatus_::DfaTransition_::INPUT_ATOM_RANGE, 1, 8, ms_state_table_+108 },
    { ReflexCpp_::AutomatonApparatus_::DfaTransition_::INPUT_ATOM_RANGE, 9, 10, ms_state_table_+109 },
    { ReflexCpp_::AutomatonApparatus_::DfaTransition_::INPUT_ATOM_RANGE, 11, 12, ms_state_table_+108 },
    { ReflexCpp_::AutomatonApparatus_::DfaTransition_::INPUT_ATOM_RANGE, 14, 31, ms_state_table_+108 },
    { ReflexCpp_::AutomatonApparatus_::DfaTransition_::INPUT_ATOM_RANGE, 35, 38, ms_state_table_+108 },
    { ReflexCpp_::AutomatonApparatus_::DfaTransition_::INPUT_ATOM_RANGE, 40, 46, ms_state_table_+108 },
    { ReflexCpp_::AutomatonApparatus_::DfaTransition_::INPUT_ATOM_RANGE, 48, 57, ms_state_table_+108 },
    { ReflexCpp_::AutomatonApparatus_::DfaTransition_::INPUT_ATOM_RANGE, 59, 60, ms_state_table_+108 },
    { ReflexCpp_::AutomatonApparatus_::DfaTransition_::INPUT_ATOM_RANGE, 65, 90, ms_state_table_+115 },
    { ReflexCpp_::AutomatonApparatus_::DfaTransition_::INPUT_ATOM_RANGE, 91, 94, ms_state_table_+108 },
    { ReflexCpp_::AutomatonApparatus_::DfaTransition_::INPUT_ATOM_RANGE, 97, 122, ms_state_table_+115 },
    { ReflexCpp_::AutomatonApparatus_::DfaTransition_::INPUT_ATOM_RANGE, 123, 127, ms_state_table_+108 },
    { ReflexCpp_::AutomatonApparatus_::DfaTransition_::INPUT_ATOM_RANGE, 128, 255, ms_state_table_+115 },
    { ReflexCpp_::AutomatonApparatus_::DfaTransition_::INPUT_ATOM, 13, 0, ms_state_table_+110 },
    { ReflexCpp_::AutomatonApparatus_::DfaTransition_::INPUT_ATOM, 32, 0, ms_state_table_+110 },
    { ReflexCpp_::AutomatonApparatus_::DfaTransition_::INPUT_ATOM_RANGE, 9, 10, ms_state_table_+110 },
    { ReflexCpp_::AutomatonApparatus_::DfaTransition_::INPUT_ATOM, 13, 0, ms_state_table_+110 },
    { ReflexCpp_::AutomatonApparatus_::DfaTransition_::INPUT_ATOM, 32, 0, ms_state_table_+110 },
    { ReflexCpp_::AutomatonApparatus_::DfaTransition_::INPUT_ATOM_RANGE, 9, 10, ms_state_table_+110 },
    { ReflexCpp_::AutomatonApparatus_::DfaTransition_::INPUT_ATOM, 62, 0, ms_state_table_+114 },
    { ReflexCpp_::AutomatonApparatus_::DfaTransition_::INPUT_ATOM, 95, 0, ms_state_table_+116 },
    { ReflexCpp_::AutomatonApparatus_::DfaTransition_::INPUT_ATOM_RANGE, 45, 46, ms_state_table_+116 },
    { ReflexCpp_::AutomatonApparatus_::DfaTransition_::INPUT_ATOM_RANGE, 48, 58, ms_state_table_+116 },
    { ReflexCpp_::AutomatonApparatus_::DfaTransition_::INPUT_ATOM_RANGE, 65, 90, ms_state_table_+116 },
    { ReflexCpp_::AutomatonApparatus_::DfaTransition_::INPUT_ATOM_RANGE, 97, 122, ms_state_table_+116 },
    { ReflexCpp_::AutomatonApparatus_::DfaTransition_::INPUT_ATOM_RANGE, 128, 255, ms_state_table_+116 },
    { ReflexCpp_::AutomatonApparatus_::DfaTransition_::INPUT_ATOM, 95, 0, ms_state_table_+116 },
    { ReflexCpp_::AutomatonApparatus_::DfaTransition_::INPUT_ATOM_RANGE, 45, 46, ms_state_table_+116 },
    { ReflexCpp_::AutomatonApparatus_::DfaTransition_::INPUT_ATOM_RANGE, 48, 58, ms_state_table_+116 },
    { ReflexCpp_::AutomatonApparatus_::DfaTransition_::INPUT_ATOM_RANGE, 65, 90, ms_state_table_+116 },
    { ReflexCpp_::AutomatonApparatus_::DfaTransition_::INPUT_ATOM_RANGE, 97, 122, ms_state_table_+116 },
    { ReflexCpp_::AutomatonApparatus_::DfaTransition_::INPUT_ATOM_RANGE, 128, 255, ms_state_table_+116 },
    { ReflexCpp_::AutomatonApparatus_::DfaTransition_::INPUT_ATOM, 62, 0, ms_state_table_+120 },
    { ReflexCpp_::AutomatonApparatus_::DfaTransition_::INPUT_ATOM, 13, 0, ms_state_table_+109 },
    { ReflexCpp_::AutomatonApparatus_::DfaTransition_::INPUT_ATOM, 32, 0, ms_state_table_+109 },
    { ReflexCpp_::AutomatonApparatus_::DfaTransition_::INPUT_ATOM, 33, 0, ms_state_table_+108 },
    { ReflexCpp_::AutomatonApparatus_::DfaTransition_::INPUT_ATOM, 34, 0, ms_state_table_+111 },
    { ReflexCpp_::AutomatonApparatus_::DfaTransition_::INPUT_ATOM, 39, 0, ms_state_table_+112 },
    { ReflexCpp_::AutomatonApparatus_::DfaTransition_::INPUT_ATOM, 47, 0, ms_state_table_+113 },
    { ReflexCpp_::AutomatonApparatus_::DfaTransition_::INPUT_ATOM, 58, 0, ms_state_table_+115 },
    { ReflexCpp_::AutomatonApparatus_::DfaTransition_::INPUT_ATOM, 61, 0, ms_state_table_+117 },
    { ReflexCpp_::AutomatonApparatus_::DfaTransition_::INPUT_ATOM, 62, 0, ms_state_table_+118 },
    { ReflexCpp_::AutomatonApparatus_::DfaTransition_::INPUT_ATOM, 63, 0, ms_state_table_+119 },
    { ReflexCpp_::AutomatonApparatus_::DfaTransition_::INPUT_ATOM, 64, 0, ms_state_table_+108 },
    { ReflexCpp_::AutomatonApparatus_::DfaTransition_::INPUT_ATOM, 95, 0, ms_state_table_+115 },
    { ReflexCpp_::AutomatonApparatus_::DfaTransition_::INPUT_ATOM, 96, 0, ms_state_table_+108 },
    { ReflexCpp_::AutomatonApparatus_::DfaTransition_::INPUT_ATOM_RANGE, 1, 8, ms_state_table_+108 },
    { ReflexCpp_::AutomatonApparatus_::DfaTransition_::INPUT_ATOM_RANGE, 9, 10, ms_state_table_+109 },
    { ReflexCpp_::AutomatonApparatus_::DfaTransition_::INPUT_ATOM_RANGE, 11, 12, ms_state_table_+108 },
    { ReflexCpp_::AutomatonApparatus_::DfaTransition_::INPUT_ATOM_RANGE, 14, 31, ms_state_table_+108 },
    { ReflexCpp_::AutomatonApparatus_::DfaTransition_::INPUT_ATOM_RANGE, 35, 38, ms_state_table_+108 },
    { ReflexCpp_::AutomatonApparatus_::DfaTransition_::INPUT_ATOM_RANGE, 40, 46, ms_state_table_+108 },
    { ReflexCpp_::AutomatonApparatus_::DfaTransition_::INPUT_ATOM_RANGE, 48, 57, ms_state_table_+108 },
    { ReflexCpp_::AutomatonApparatus_::DfaTransition_::INPUT_ATOM_RANGE, 59, 60, ms_state_table_+108 },
    { ReflexCpp_::AutomatonApparatus_::DfaTransition_::INPUT_ATOM_RANGE, 65, 90, ms_state_table_+115 },
    { ReflexCpp_::AutomatonApparatus_::DfaTransition_::INPUT_ATOM_RANGE, 91, 94, ms_state_table_+108 },
    { ReflexCpp_::AutomatonApparatus_::DfaTransition_::INPUT_ATOM_RANGE, 97, 122, ms_state_table_+115 },
    { ReflexCpp_::AutomatonApparatus_::DfaTransition_::INPUT_ATOM_RANGE, 123, 127, ms_state_table_+108 },
    { ReflexCpp_::AutomatonApparatus_::DfaTransition_::INPUT_ATOM_RANGE, 128, 255, ms_state_table_+115 }
};
BarfCpp_::Size const Scanner::ms_transition_count_ = sizeof(Scanner::ms_transition_table_) / sizeof(*Scanner::ms_transition_table_);

char const *const Scanner::ms_accept_handler_regex_[] =
{
    "{ANY}*\\]\\]>",
    "{ANY}*{END_OF_FILE}",
    "{ANY}*-->",
    "{ANY}*{END_OF_FILE}",
    "{END_OF_FILE}",
    ">",
    "{NAME}",
    "{WHITESPACE}+",
    "{END_OF_FILE}",
    "{ANY}",
    "<\\?",
    "<",
    "</",
    "<!--",
    "<\\[!CDATA\\[",
    "&amp;",
    "&apos;",
    "&gt;",
    "&lt;",
    "&quot;",
    "&(a(m(p)?)?)?|&(a(p(o(s)?)?)?)?|&(g(t)?)?|&(l(t)?)?|&(q(u(o(t)?)?)?)?",
    "{NON_CONTROL_CHAR}+",
    "{END_OF_FILE}",
    "{ANY}",
    "",
    "",
    "",
    "{STRING_CHAR}+",
    "&amp;",
    "&apos;",
    "&gt;",
    "&lt;",
    "&quot;",
    "&(a(m(p)?)?)?|&(a(p(o(s)?)?)?)?|&(g(t)?)?|&(l(t)?)?|&(q(u(o(t)?)?)?)?",
    "'",
    "\"",
    "{END_OF_FILE}",
    "\\?>",
    ">",
    "/>",
    "{NAME}",
    "=",
    "'",
    "\"",
    "{WHITESPACE}+",
    "{END_OF_FILE}",
    "{ANY}"
};
BarfCpp_::Uint32 const Scanner::ms_accept_handler_count_ = sizeof(Scanner::ms_accept_handler_regex_) / sizeof(*Scanner::ms_accept_handler_regex_);

// ///////////////////////////////////////////////////////////////////////
// end of internal reflex-generated parser guts
// ///////////////////////////////////////////////////////////////////////


#line 302 "lvd_xml_scanner.reflex"

} // end of namespace Xml
} // end of namespace Lvd

#line 1675 "lvd_xml_scanner.cpp"
