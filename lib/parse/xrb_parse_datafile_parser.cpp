// DO NOT MODIFY ! DO NOT MODIFY ! DO NOT MODIFY ! DO NOT MODIFY ! DO NOT MODIFY
// xrb_parse_datafile_parser.cpp generated by trison
// from xrb_parse_datafile_parser.trison using trison.cpp.targetspec and trison.cpp.implementation.codespec
// DO NOT MODIFY ! DO NOT MODIFY ! DO NOT MODIFY ! DO NOT MODIFY ! DO NOT MODIFY

#include "xrb_parse_datafile_parser.hpp"


#define TRISON_CPP_DEBUG_CODE_(spew_code) if (DebugSpew()) { spew_code; }


#line 75 "xrb_parse_datafile_parser.trison"

#include <sstream>

#include "xrb_emptystring.hpp"
#include "xrb_parse_datafile_scanner.hpp"
#include "xrb_parse_datafile_value.hpp"

#undef FL
#define FL (m_scanner->GetFiLoc())

namespace Xrb
{

DataFileParser::ReturnCode DataFileParser::Parse (std::string const &input_path)
{
    ASSERT1(m_scanner != NULL);
    ASSERT1(!m_scanner->IsOpen());

    // if there are any pipe characters in the path, return failure
    if (input_path.find_first_of("|") != static_cast<std::string::size_type>(-1))
        return RC_INVALID_FILENAME;

    // attempt to open the path and return the result
    if (!m_scanner->Open(input_path))
        return RC_FILE_OPEN_FAILURE;

    // start parsing, and return parse error if we got an unhandled error
    if (Parse(&m_accepted_value) != PRC_SUCCESS)
        return RC_PARSE_ERROR;

    // if any errors were encountered, return parse error
    if (m_scanner->ErrorsWereEncountered())
        return RC_ERRORS_ENCOUNTERED;

    // otherwise return success
    return RC_SUCCESS;
}

void DataFileParser::EmitWarning (std::string const &message, FiLoc const &filoc)
{
    ASSERT1(m_scanner != NULL);
    m_scanner->EmitWarning(message, filoc);
}

void DataFileParser::EmitError (std::string const &message, FiLoc const &filoc)
{
    ASSERT1(m_scanner != NULL);
    m_scanner->EmitError(message, filoc);
}

#line 64 "xrb_parse_datafile_parser.cpp"

DataFileParser::DataFileParser ()
{
    DebugSpew(false);


#line 125 "xrb_parse_datafile_parser.trison"

//     DebugSpew(true);
    m_scanner = new DataFileScanner();
    m_accepted_value = NULL;

#line 77 "xrb_parse_datafile_parser.cpp"
}

DataFileParser::~DataFileParser ()
{
    // clean up dynamically allocated memory.
    ClearStack_();
    ClearLookaheadQueue_();



#line 130 "xrb_parse_datafile_parser.trison"

    ASSERT1(m_scanner != NULL);
    Delete(m_scanner);
    delete StealAcceptedStructure();

#line 94 "xrb_parse_datafile_parser.cpp"
}

bool DataFileParser::IsAtEndOfInput ()
{
    return Lookahead_(0).m_id == Terminal::END_;
}

void DataFileParser::ResetForNewInput ()
{
    TRISON_CPP_DEBUG_CODE_(std::cerr << 
#line 159 "xrb_parse_datafile_parser.trison"
"DataFileParser" << (m_scanner->GetFiLoc().IsValid() ? " ("+m_scanner->GetFiLoc().AsString()+")" : g_empty_string) << ":"
#line 107 "xrb_parse_datafile_parser.cpp"
 << " executing reset-for-new-input actions" << std::endl)

    // clean up stuff that might be hanging around from the last parse's input.
    ClearStack_();
    ClearLookaheadQueue_();
}

DataFileParser::ParserReturnCode DataFileParser::Parse (DataFileValue * *return_token, ParseNonterminal::Name nonterminal_to_parse)
{

#line 135 "xrb_parse_datafile_parser.trison"

    delete StealAcceptedStructure();

#line 122 "xrb_parse_datafile_parser.cpp"

    ParserReturnCode const parse_return_code = Parse_(return_token, nonterminal_to_parse);


#line 138 "xrb_parse_datafile_parser.trison"

    m_scanner->Close();

#line 131 "xrb_parse_datafile_parser.cpp"

    return parse_return_code;
}

// ///////////////////////////////////////////////////////////////////////
// begin internal trison-generated parser guts -- don't use
// ///////////////////////////////////////////////////////////////////////

DataFileParser::ParserReturnCode DataFileParser::Parse_ (DataFileValue * *return_token, ParseNonterminal::Name nonterminal_to_parse)
{
    assert(return_token != NULL && "the return-token pointer must be non-NULL");

    TRISON_CPP_DEBUG_CODE_(std::cerr << 
#line 159 "xrb_parse_datafile_parser.trison"
"DataFileParser" << (m_scanner->GetFiLoc().IsValid() ? " ("+m_scanner->GetFiLoc().AsString()+")" : g_empty_string) << ":"
#line 147 "xrb_parse_datafile_parser.cpp"
 << " starting parse" << std::endl)

    ParserReturnCode parser_return_code_ = PRC_UNHANDLED_PARSE_ERROR;
    *return_token = NULL;

    // make sure all our structures are empty and variables initialized.
    // we don't clear the lookahead queue here because we might want to
    // parse multiple times from the same input, and the lookahead queue
    // could have the next few tokens in it.
    ClearStack_();
    m_is_in_error_panic_ = false;

    // push the initial state of the DPDA.
    assert((false
           || nonterminal_to_parse == ParseNonterminal::array
           || nonterminal_to_parse == ParseNonterminal::data_file
           || nonterminal_to_parse == ParseNonterminal::element
           || nonterminal_to_parse == ParseNonterminal::element_list
           || nonterminal_to_parse == ParseNonterminal::string
           || nonterminal_to_parse == ParseNonterminal::structure
           || nonterminal_to_parse == ParseNonterminal::value
           || nonterminal_to_parse == ParseNonterminal::value_list
           ) && "invalid nonterminal_to_parse");
    m_stack_.push_back(StackElement_(nonterminal_to_parse, NULL));
    // main parser loop
    while (true)
    {
        if (m_is_in_error_panic_)
        {
            TRISON_CPP_DEBUG_CODE_(std::cerr << 
#line 159 "xrb_parse_datafile_parser.trison"
"DataFileParser" << (m_scanner->GetFiLoc().IsValid() ? " ("+m_scanner->GetFiLoc().AsString()+")" : g_empty_string) << ":"
#line 180 "xrb_parse_datafile_parser.cpp"
 << " begin error panic" << std::endl)

            while (true)
            {
                // get the current state (top of the stack)
                assert(!m_stack_.empty());
                BarfCpp_::Uint32 current_state_index = m_stack_.rbegin()->m_state_index;
                assert(current_state_index < ms_state_count_);
                State_ const &current_state = ms_state_table_[current_state_index];
                TRISON_CPP_DEBUG_CODE_(PrintParserStatus_(std::cerr))

                // check if the current state accepts ERROR_ (only need to check the
                // non-default transitions, since the default transition can't be a shift).
                bool accepts_error = false;
                for (Transition_ const *transition = current_state.m_transition_table+1, // +1 because the first is the default
                                       *transition_end = current_state.m_transition_table+current_state.m_transition_count;
                     transition != transition_end;
                     ++transition)
                {
                    if (transition->m_type == Transition_::SHIFT && transition->m_lookahead_count == 1 && *transition->m_lookahead_sequence == Terminal::ERROR_)
                    {
                        accepts_error = true;
                        break;
                    }
                }

                if (accepts_error)
                {
                    TRISON_CPP_DEBUG_CODE_(std::cerr << 
#line 159 "xrb_parse_datafile_parser.trison"
"DataFileParser" << (m_scanner->GetFiLoc().IsValid() ? " ("+m_scanner->GetFiLoc().AsString()+")" : g_empty_string) << ":"
#line 212 "xrb_parse_datafile_parser.cpp"
 << " end error panic; success (current state accepts ERROR_ token)" << std::endl)
                    // if the current state accepts error, then we check if the lookahead token
                    // is Terminal::END_.  if it is, then we add a dummy Terminal::ERROR_ token
                    // in before it (since %error can't accept END_).  otherwise, we throw away
                    // the lookahead token, then clear the thrown-away token data, and set the
                    // token id to ERROR_.
                    assert(!m_lookahead_queue_.empty());
                    if (m_lookahead_queue_[0].m_id == Terminal::END_)
                    {
                        TRISON_CPP_DEBUG_CODE_(std::cerr << 
#line 159 "xrb_parse_datafile_parser.trison"
"DataFileParser" << (m_scanner->GetFiLoc().IsValid() ? " ("+m_scanner->GetFiLoc().AsString()+")" : g_empty_string) << ":"
#line 225 "xrb_parse_datafile_parser.cpp"
 << " deferring Terminal::END_ (padding with Terminal::ERROR_ token)" << std::endl)
                        m_lookahead_queue_.push_front(Token(Terminal::END_)); // dummy value
                    }
                    else
                        ThrowAwayToken_(m_lookahead_queue_[0].m_data);
                    m_lookahead_queue_[0].m_id = Terminal::ERROR_;
                    m_lookahead_queue_[0].m_data = NULL;
                    m_is_in_error_panic_ = false;
                    break;
                }
                else
                {
                    if (m_stack_.size() > 1)
                    {
                        TRISON_CPP_DEBUG_CODE_(std::cerr << 
#line 159 "xrb_parse_datafile_parser.trison"
"DataFileParser" << (m_scanner->GetFiLoc().IsValid() ? " ("+m_scanner->GetFiLoc().AsString()+")" : g_empty_string) << ":"
#line 243 "xrb_parse_datafile_parser.cpp"
 << " continue error panic; pop stack (current state doesn't accept ERROR_ token)" << std::endl)
                    }
                    else
                    {
                        TRISON_CPP_DEBUG_CODE_(std::cerr << 
#line 159 "xrb_parse_datafile_parser.trison"
"DataFileParser" << (m_scanner->GetFiLoc().IsValid() ? " ("+m_scanner->GetFiLoc().AsString()+")" : g_empty_string) << ":"
#line 251 "xrb_parse_datafile_parser.cpp"
 << " end error panic; abort (stack is empty)" << std::endl)
                    }
                    // otherwise throw away the data at the top of the stack, and pop the stack.
                    // then if the stack is empty, an unhandled parse error occurred.
                    ThrowAwayToken_(m_stack_.rbegin()->m_token_data);
                    m_stack_.resize(m_stack_.size()-1);
                    if (m_stack_.empty())
                    {
                        // parser_return_code_ and return_token are already appropriately
                        // set, so just break out of the inner loop.
                        break;
                    }
                }
            }

            // if we're still in error panic, then this indicates that we bottomed-
            // out the stack and it's an unhandled parse error, so break from the
            // main loop.
            if (m_is_in_error_panic_)
                break;
        }
        else // !m_is_in_error_panic_
        {
            // get the current state (top of the stack)
            assert(!m_stack_.empty());
            BarfCpp_::Uint32 current_state_index = m_stack_.rbegin()->m_state_index;
            assert(current_state_index < ms_state_count_);
            State_ const &current_state = ms_state_table_[current_state_index];
            TRISON_CPP_DEBUG_CODE_(PrintParserStatus_(std::cerr))

            // TODO -- binary search for faster transition matching?

            // loop through the current state's transitions and see if any match
            bool transition_exercised = false;
            BarfCpp_::Uint32 tested_lookahead_count = 0;
            for (Transition_ const *transition = current_state.m_transition_table+1, // +1 because the first is the default
                                   *transition_end = current_state.m_transition_table+current_state.m_transition_count;
                transition != transition_end;
                ++transition)
            {
                // the non-default transitions can only be REDUCE or SHIFT
                assert(transition->m_type == Transition_::REDUCE || transition->m_type == Transition_::SHIFT);

                // check if the lookaheads match those of this transition.
                bool lookahead_sequence_matched = true;
                for (BarfCpp_::Uint32 i = 0; i < transition->m_lookahead_count; ++i)
                {
                    if (Lookahead_(i).m_id != transition->m_lookahead_sequence[i])
                    {
                        lookahead_sequence_matched = false;
                        break;
                    }
                    else
                    {
                        if (i+1 > tested_lookahead_count)
                            tested_lookahead_count = i+1;
                    }
                }

                // if all the lookaheads matched, then exercise this transition,
                // and break out of this inner (transition) loop.
                if (lookahead_sequence_matched)
                {
                    TRISON_CPP_DEBUG_CODE_(std::cerr << 
#line 159 "xrb_parse_datafile_parser.trison"
"DataFileParser" << (m_scanner->GetFiLoc().IsValid() ? " ("+m_scanner->GetFiLoc().AsString()+")" : g_empty_string) << ":"
#line 318 "xrb_parse_datafile_parser.cpp"
 << " current (relevant) lookahead(s):")
                    for (BarfCpp_::Uint32 i = 0; i < tested_lookahead_count; ++i)
                    {
                        TRISON_CPP_DEBUG_CODE_(std::cerr << ' ' << Lookahead_(i))
                    }
                    TRISON_CPP_DEBUG_CODE_(std::cerr << std::endl)

                    ExerciseTransition_(*transition);
                    transition_exercised = true;
                    break;
                }
            }

            // if no transition was exercised, then exercise the default transition
            if (!transition_exercised)
            {
                TRISON_CPP_DEBUG_CODE_(std::cerr << 
#line 159 "xrb_parse_datafile_parser.trison"
"DataFileParser" << (m_scanner->GetFiLoc().IsValid() ? " ("+m_scanner->GetFiLoc().AsString()+")" : g_empty_string) << ":"
#line 338 "xrb_parse_datafile_parser.cpp"
 << " current (relevant) lookahead(s):")
                for (BarfCpp_::Uint32 i = 0; i < tested_lookahead_count; ++i)
                {
                    TRISON_CPP_DEBUG_CODE_(std::cerr << ' ' << Lookahead_(i))
                }
                TRISON_CPP_DEBUG_CODE_(std::cerr << std::endl)

                TRISON_CPP_DEBUG_CODE_(std::cerr << 
#line 159 "xrb_parse_datafile_parser.trison"
"DataFileParser" << (m_scanner->GetFiLoc().IsValid() ? " ("+m_scanner->GetFiLoc().AsString()+")" : g_empty_string) << ":"
#line 349 "xrb_parse_datafile_parser.cpp"
 << " exercising default transition" << std::endl)
                // exercise the default transition.  a return value of true indicates
                // that the parser should return.
                if (ExerciseTransition_(*current_state.m_transition_table))
                {
                    // the token (data) on the top of the stack is the return token.
                    // set parser_return_code_ and assign the top stack token data to
                    // *return_token and then break out of the main parser loop.
                    assert(m_stack_[0].m_state_index == BarfCpp_::Uint32(nonterminal_to_parse));
                    assert(m_stack_.size() == 2);
                    parser_return_code_ = PRC_SUCCESS;
                    *return_token = m_stack_.rbegin()->m_token_data;
                    // take the return token out of the stack, so it's not thrown away
                    // when we clear the stack later.
                    m_stack_.rbegin()->m_token_data = NULL;
                    break;
                }
            }
        }
    }

    // clear the stack, because we won't need it for the next parse.
    // we don't clear the lookahead queue here because we might want to
    // parse multiple times from the same input, and the lookahead queue
    // could have the next few tokens in it.
    ClearStack_();

    TRISON_CPP_DEBUG_CODE_(if (parser_return_code_ == PRC_SUCCESS) std::cerr << 
#line 159 "xrb_parse_datafile_parser.trison"
"DataFileParser" << (m_scanner->GetFiLoc().IsValid() ? " ("+m_scanner->GetFiLoc().AsString()+")" : g_empty_string) << ":"
#line 380 "xrb_parse_datafile_parser.cpp"
 << " Parse() is returning PRC_SUCCESS" << std::endl)
    TRISON_CPP_DEBUG_CODE_(if (parser_return_code_ == PRC_UNHANDLED_PARSE_ERROR) std::cerr << 
#line 159 "xrb_parse_datafile_parser.trison"
"DataFileParser" << (m_scanner->GetFiLoc().IsValid() ? " ("+m_scanner->GetFiLoc().AsString()+")" : g_empty_string) << ":"
#line 385 "xrb_parse_datafile_parser.cpp"
 << " Parse() is returning PRC_UNHANDLED_PARSE_ERROR" << std::endl)

    return parser_return_code_;
}

void DataFileParser::ThrowAwayToken_ (Token::Data &token_data) throw()
{
    TRISON_CPP_DEBUG_CODE_(std::cerr << 
#line 159 "xrb_parse_datafile_parser.trison"
"DataFileParser" << (m_scanner->GetFiLoc().IsValid() ? " ("+m_scanner->GetFiLoc().AsString()+")" : g_empty_string) << ":"
#line 396 "xrb_parse_datafile_parser.cpp"
 << " executing throw-away-token actions" << std::endl)


#line 149 "xrb_parse_datafile_parser.trison"

    Delete(token_data);

#line 404 "xrb_parse_datafile_parser.cpp"
}

DataFileParser::Token DataFileParser::Scan_ () throw()
{

#line 152 "xrb_parse_datafile_parser.trison"

    ASSERT1(m_scanner != NULL);
    return m_scanner->Scan();

#line 415 "xrb_parse_datafile_parser.cpp"
}

void DataFileParser::ClearStack_ () throw()
{
    if (m_stack_.empty())
        return; // nothing to do

    TRISON_CPP_DEBUG_CODE_(std::cerr << 
#line 159 "xrb_parse_datafile_parser.trison"
"DataFileParser" << (m_scanner->GetFiLoc().IsValid() ? " ("+m_scanner->GetFiLoc().AsString()+")" : g_empty_string) << ":"
#line 426 "xrb_parse_datafile_parser.cpp"
 << " clearing the stack" << std::endl)

    Stack_::iterator it = m_stack_.begin();
    Stack_::iterator it_end = m_stack_.end();
    // skip the bottom of the stack, since it
    // contains the start state and no token data.
    ++it;
    for ( ; it != it_end; ++it)
        ThrowAwayToken_(it->m_token_data);
    m_stack_.clear();
}

void DataFileParser::ClearLookaheadQueue_ () throw()
{
    TRISON_CPP_DEBUG_CODE_(std::cerr << 
#line 159 "xrb_parse_datafile_parser.trison"
"DataFileParser" << (m_scanner->GetFiLoc().IsValid() ? " ("+m_scanner->GetFiLoc().AsString()+")" : g_empty_string) << ":"
#line 444 "xrb_parse_datafile_parser.cpp"
 << " clearing the lookahead queue" << std::endl)

    for (LookaheadQueue_::iterator it = m_lookahead_queue_.begin(), it_end = m_lookahead_queue_.end(); it != it_end; ++it)
        ThrowAwayToken_(it->m_data);
    m_lookahead_queue_.clear();
}

DataFileParser::Token const &DataFileParser::Lookahead_ (LookaheadQueue_::size_type index) throw()
{
    while (index >= m_lookahead_queue_.size())
    {
        m_lookahead_queue_.push_back(Scan_());

        TRISON_CPP_DEBUG_CODE_(std::cerr << 
#line 159 "xrb_parse_datafile_parser.trison"
"DataFileParser" << (m_scanner->GetFiLoc().IsValid() ? " ("+m_scanner->GetFiLoc().AsString()+")" : g_empty_string) << ":"
#line 461 "xrb_parse_datafile_parser.cpp"
 << " pushed " << *m_lookahead_queue_.rbegin() << " onto back of lookahead queue" << std::endl)
    }
    return m_lookahead_queue_[index];
}

bool DataFileParser::ExerciseTransition_ (Transition_ const &transition)
{
    switch (transition.m_type)
    {
        case Transition_::REDUCE:
        {
            // execute the indicated reduction rule, push the returned Token
            // onto the front of the lookahead queue, then pop the corresponding
            // number of stack elements.
            assert(transition.m_data < ms_rule_count_);
            Rule_ const &rule = ms_rule_table_[transition.m_data];
            TRISON_CPP_DEBUG_CODE_(std::cerr << 
#line 159 "xrb_parse_datafile_parser.trison"
"DataFileParser" << (m_scanner->GetFiLoc().IsValid() ? " ("+m_scanner->GetFiLoc().AsString()+")" : g_empty_string) << ":"
#line 481 "xrb_parse_datafile_parser.cpp"
 << " REDUCE " << rule.m_description << std::endl)
            assert(m_stack_.size() > rule.m_token_count);
            m_lookahead_queue_.push_front(
                Token(
                    rule.m_reduction_nonterminal_token_id,
                    ExecuteReductionRule_(transition.m_data)));
            m_stack_.resize(m_stack_.size() - rule.m_token_count);
            assert(rule.m_reduction_nonterminal_token_id < ms_token_name_count_);
            TRISON_CPP_DEBUG_CODE_(std::cerr << 
#line 159 "xrb_parse_datafile_parser.trison"
"DataFileParser" << (m_scanner->GetFiLoc().IsValid() ? " ("+m_scanner->GetFiLoc().AsString()+")" : g_empty_string) << ":"
#line 493 "xrb_parse_datafile_parser.cpp"
 << " pushed " << Token(rule.m_reduction_nonterminal_token_id) << " onto front of lookahead queue" << std::endl)
            return false; // indicating the parser isn't returning
        }

        case Transition_::RETURN:
            TRISON_CPP_DEBUG_CODE_(std::cerr << 
#line 159 "xrb_parse_datafile_parser.trison"
"DataFileParser" << (m_scanner->GetFiLoc().IsValid() ? " ("+m_scanner->GetFiLoc().AsString()+")" : g_empty_string) << ":"
#line 502 "xrb_parse_datafile_parser.cpp"
 << " RETURN" << std::endl)
            return true; // indicating the parser is returning

        case Transition_::SHIFT:
            // push the state (indicated by the shift transition) and token data
            // onto the stack, then pop the corresponding lookahead.
            assert(transition.m_data < ms_state_count_);
            assert(Lookahead_(0).m_id < ms_token_name_count_); // at this point, we're past a possible
                                                               // client error, so asserting here is ok.
            TRISON_CPP_DEBUG_CODE_(std::cerr << 
#line 159 "xrb_parse_datafile_parser.trison"
"DataFileParser" << (m_scanner->GetFiLoc().IsValid() ? " ("+m_scanner->GetFiLoc().AsString()+")" : g_empty_string) << ":"
#line 515 "xrb_parse_datafile_parser.cpp"
 << " SHIFT " << Lookahead_(0) << std::endl)
            m_stack_.push_back(StackElement_(transition.m_data, Lookahead_(0).m_data));
            m_lookahead_queue_.pop_front();
            return false; // indicating the parser isn't returning

        case Transition_::ERROR_PANIC:
            TRISON_CPP_DEBUG_CODE_(std::cerr << 
#line 159 "xrb_parse_datafile_parser.trison"
"DataFileParser" << (m_scanner->GetFiLoc().IsValid() ? " ("+m_scanner->GetFiLoc().AsString()+")" : g_empty_string) << ":"
#line 525 "xrb_parse_datafile_parser.cpp"
 << " ERROR_PANIC" << std::endl)
            m_is_in_error_panic_ = true;
            return false; // indicating the parser isn't returning

        default:
            assert(false && "invalid transition type (bad state machine, or memory corruption)");
            return false; // indicating the parser isn't returning
    }
}

DataFileParser::Token::Data DataFileParser::ExecuteReductionRule_ (BarfCpp_::Uint32 const rule_index_) throw()
{
    assert(rule_index_ < ms_rule_count_);
    TRISON_CPP_DEBUG_CODE_(std::cerr << 
#line 159 "xrb_parse_datafile_parser.trison"
"DataFileParser" << (m_scanner->GetFiLoc().IsValid() ? " ("+m_scanner->GetFiLoc().AsString()+")" : g_empty_string) << ":"
#line 542 "xrb_parse_datafile_parser.cpp"
 << " executing reduction rule " << rule_index_ << std::endl)
    switch (rule_index_)
    {
        default:
            assert(false && "this should never happen");
            return NULL;

        case 0:
        {
            assert(ms_rule_table_[rule_index_].m_token_count < m_stack_.size());
            DataFileStructure * element_list(DStaticCast<DataFileStructure *>(m_stack_[m_stack_.size()-1].m_token_data));

#line 180 "xrb_parse_datafile_parser.trison"

        ASSERT1(element_list != NULL);
        return element_list;
    
#line 560 "xrb_parse_datafile_parser.cpp"
            break;
        }

        case 1:
        {
            assert(ms_rule_table_[rule_index_].m_token_count < m_stack_.size());

#line 186 "xrb_parse_datafile_parser.trison"

        EmitError("general syntax error", FL);
        return new DataFileStructure();
    
#line 573 "xrb_parse_datafile_parser.cpp"
            break;
        }

        case 2:
        {
            assert(ms_rule_table_[rule_index_].m_token_count < m_stack_.size());
            DataFileStructure * element_list(DStaticCast<DataFileStructure *>(m_stack_[m_stack_.size()-2].m_token_data));
            DataFileKeyPair * element(DStaticCast<DataFileKeyPair *>(m_stack_[m_stack_.size()-1].m_token_data));

#line 195 "xrb_parse_datafile_parser.trison"

        ASSERT1(element_list != NULL);

        if (element != NULL)
        {
            try
            {
                element_list->AddKeyPair(element);
            }
            catch (std::string const &exception)
            {
                EmitError(exception, FL);
                Delete(element);
            }
        }
        return element_list;
    
#line 601 "xrb_parse_datafile_parser.cpp"
            break;
        }

        case 3:
        {
            assert(ms_rule_table_[rule_index_].m_token_count < m_stack_.size());

#line 214 "xrb_parse_datafile_parser.trison"

        return new DataFileStructure();
    
#line 613 "xrb_parse_datafile_parser.cpp"
            break;
        }

        case 4:
        {
            assert(ms_rule_table_[rule_index_].m_token_count < m_stack_.size());
            DataFileString * key(DStaticCast<DataFileString *>(m_stack_[m_stack_.size()-3].m_token_data));
            DataFileValue * value(DStaticCast<DataFileValue *>(m_stack_[m_stack_.size()-2].m_token_data));

#line 222 "xrb_parse_datafile_parser.trison"

        ASSERT1(key != NULL);
        if (value == NULL)
        {
            Delete(key);
            return NULL;
        }

        DataFileKeyPair *key_pair = new DataFileKeyPair(key->Value(), value);
        Delete(key);
        return key_pair;
    
#line 636 "xrb_parse_datafile_parser.cpp"
            break;
        }

        case 5:
        {
            assert(ms_rule_table_[rule_index_].m_token_count < m_stack_.size());
            DataFileString * key(DStaticCast<DataFileString *>(m_stack_[m_stack_.size()-3].m_token_data));

#line 236 "xrb_parse_datafile_parser.trison"

        ASSERT1(key != NULL);
        std::ostringstream out;
        out << "syntax error in element with key \"" << key->Value() << "\"";
        EmitError(out.str(), FL);
        Delete(key);
        return NULL;
    
#line 654 "xrb_parse_datafile_parser.cpp"
            break;
        }

        case 6:
        {
            assert(ms_rule_table_[rule_index_].m_token_count < m_stack_.size());

#line 246 "xrb_parse_datafile_parser.trison"

        EmitError("syntax error in element", FL);
        return NULL;
    
#line 667 "xrb_parse_datafile_parser.cpp"
            break;
        }

        case 7:
        {
            assert(ms_rule_table_[rule_index_].m_token_count < m_stack_.size());
            DataFileStructure * element_list(DStaticCast<DataFileStructure *>(m_stack_[m_stack_.size()-2].m_token_data));

#line 255 "xrb_parse_datafile_parser.trison"

        ASSERT1(element_list != NULL);
        return element_list;
    
#line 681 "xrb_parse_datafile_parser.cpp"
            break;
        }

        case 8:
        {
            assert(ms_rule_table_[rule_index_].m_token_count < m_stack_.size());

#line 261 "xrb_parse_datafile_parser.trison"

        EmitError("syntax error in structure", FL);
        return new DataFileStructure();
    
#line 694 "xrb_parse_datafile_parser.cpp"
            break;
        }

        case 9:
        {
            assert(ms_rule_table_[rule_index_].m_token_count < m_stack_.size());
            DataFileArray * value_list(DStaticCast<DataFileArray *>(m_stack_[m_stack_.size()-2].m_token_data));

#line 270 "xrb_parse_datafile_parser.trison"

        ASSERT1(value_list != NULL);
        return value_list;
    
#line 708 "xrb_parse_datafile_parser.cpp"
            break;
        }

        case 10:
        {
            assert(ms_rule_table_[rule_index_].m_token_count < m_stack_.size());
            DataFileArray * value_list(DStaticCast<DataFileArray *>(m_stack_[m_stack_.size()-3].m_token_data));

#line 276 "xrb_parse_datafile_parser.trison"

        ASSERT1(value_list != NULL);
        return value_list;
    
#line 722 "xrb_parse_datafile_parser.cpp"
            break;
        }

        case 11:
        {
            assert(ms_rule_table_[rule_index_].m_token_count < m_stack_.size());

#line 282 "xrb_parse_datafile_parser.trison"

        return new DataFileArray();
    
#line 734 "xrb_parse_datafile_parser.cpp"
            break;
        }

        case 12:
        {
            assert(ms_rule_table_[rule_index_].m_token_count < m_stack_.size());

#line 287 "xrb_parse_datafile_parser.trison"

        EmitError("syntax error in array", FL);
        return NULL;
    
#line 747 "xrb_parse_datafile_parser.cpp"
            break;
        }

        case 13:
        {
            assert(ms_rule_table_[rule_index_].m_token_count < m_stack_.size());
            DataFileArray * value_list(DStaticCast<DataFileArray *>(m_stack_[m_stack_.size()-3].m_token_data));
            DataFileValue * value(DStaticCast<DataFileValue *>(m_stack_[m_stack_.size()-1].m_token_data));

#line 296 "xrb_parse_datafile_parser.trison"

        ASSERT1(value_list != NULL);
        if (value != NULL)
        {
            try
            {
                value_list->AppendValue(value);
            }
            catch (std::string const &exception)
            {
                EmitError(exception, FL);
                Delete(value);
            }
        }
        return value_list;
    
#line 774 "xrb_parse_datafile_parser.cpp"
            break;
        }

        case 14:
        {
            assert(ms_rule_table_[rule_index_].m_token_count < m_stack_.size());
            DataFileValue * value(DStaticCast<DataFileValue *>(m_stack_[m_stack_.size()-1].m_token_data));

#line 314 "xrb_parse_datafile_parser.trison"

        DataFileArray *value_list = new DataFileArray();
        if (value != NULL)
        {
            try
            {
                value_list->AppendValue(value);
            }
            catch (std::string const &)
            {
                ASSERT1(false && "this should never happen");
                Delete(value);
            }
        }
        return value_list;
    
#line 800 "xrb_parse_datafile_parser.cpp"
            break;
        }

        case 15:
        {
            assert(ms_rule_table_[rule_index_].m_token_count < m_stack_.size());
            DataFileBoolean * value(DStaticCast<DataFileBoolean *>(m_stack_[m_stack_.size()-1].m_token_data));

#line 334 "xrb_parse_datafile_parser.trison"
 return value; 
#line 811 "xrb_parse_datafile_parser.cpp"
            break;
        }

        case 16:
        {
            assert(ms_rule_table_[rule_index_].m_token_count < m_stack_.size());
            DataFileSint32 * value(DStaticCast<DataFileSint32 *>(m_stack_[m_stack_.size()-1].m_token_data));

#line 335 "xrb_parse_datafile_parser.trison"
 return value; 
#line 822 "xrb_parse_datafile_parser.cpp"
            break;
        }

        case 17:
        {
            assert(ms_rule_table_[rule_index_].m_token_count < m_stack_.size());
            DataFileUint32 * value(DStaticCast<DataFileUint32 *>(m_stack_[m_stack_.size()-1].m_token_data));

#line 336 "xrb_parse_datafile_parser.trison"
 return value; 
#line 833 "xrb_parse_datafile_parser.cpp"
            break;
        }

        case 18:
        {
            assert(ms_rule_table_[rule_index_].m_token_count < m_stack_.size());
            DataFileFloat * value(DStaticCast<DataFileFloat *>(m_stack_[m_stack_.size()-1].m_token_data));

#line 337 "xrb_parse_datafile_parser.trison"
 return value; 
#line 844 "xrb_parse_datafile_parser.cpp"
            break;
        }

        case 19:
        {
            assert(ms_rule_table_[rule_index_].m_token_count < m_stack_.size());
            DataFileCharacter * value(DStaticCast<DataFileCharacter *>(m_stack_[m_stack_.size()-1].m_token_data));

#line 338 "xrb_parse_datafile_parser.trison"
 return value; 
#line 855 "xrb_parse_datafile_parser.cpp"
            break;
        }

        case 20:
        {
            assert(ms_rule_table_[rule_index_].m_token_count < m_stack_.size());
            DataFileString * value(DStaticCast<DataFileString *>(m_stack_[m_stack_.size()-1].m_token_data));

#line 339 "xrb_parse_datafile_parser.trison"
 return value; 
#line 866 "xrb_parse_datafile_parser.cpp"
            break;
        }

        case 21:
        {
            assert(ms_rule_table_[rule_index_].m_token_count < m_stack_.size());
            DataFileStructure * value(DStaticCast<DataFileStructure *>(m_stack_[m_stack_.size()-1].m_token_data));

#line 340 "xrb_parse_datafile_parser.trison"
 return value; 
#line 877 "xrb_parse_datafile_parser.cpp"
            break;
        }

        case 22:
        {
            assert(ms_rule_table_[rule_index_].m_token_count < m_stack_.size());
            DataFileArray * value(DStaticCast<DataFileArray *>(m_stack_[m_stack_.size()-1].m_token_data));

#line 341 "xrb_parse_datafile_parser.trison"
 return value; 
#line 888 "xrb_parse_datafile_parser.cpp"
            break;
        }

        case 23:
        {
            assert(ms_rule_table_[rule_index_].m_token_count < m_stack_.size());
            DataFileString * string(DStaticCast<DataFileString *>(m_stack_[m_stack_.size()-3].m_token_data));
            DataFileString * string_fragment(DStaticCast<DataFileString *>(m_stack_[m_stack_.size()-1].m_token_data));

#line 350 "xrb_parse_datafile_parser.trison"

        ASSERT1(string != NULL);
        ASSERT1(string_fragment != NULL);
        string->AppendString(string_fragment->Value());
        Delete(string_fragment);
        return string;
    
#line 906 "xrb_parse_datafile_parser.cpp"
            break;
        }

        case 24:
        {
            assert(ms_rule_table_[rule_index_].m_token_count < m_stack_.size());
            DataFileString * string_fragment(DStaticCast<DataFileString *>(m_stack_[m_stack_.size()-1].m_token_data));

#line 359 "xrb_parse_datafile_parser.trison"

        ASSERT1(string_fragment != NULL);
        return string_fragment;
    
#line 920 "xrb_parse_datafile_parser.cpp"
            break;
        }

        case 25:
        {
            assert(ms_rule_table_[rule_index_].m_token_count < m_stack_.size());
            DataFileString * string(DStaticCast<DataFileString *>(m_stack_[m_stack_.size()-2].m_token_data));
            DataFileString * string_fragment(DStaticCast<DataFileString *>(m_stack_[m_stack_.size()-1].m_token_data));

#line 365 "xrb_parse_datafile_parser.trison"

        ASSERT1(string != NULL);
        ASSERT1(string_fragment != NULL);
        string->AppendString(string_fragment->Value());
        Delete(string_fragment);
        EmitError("use + to concatenate strings (or did you forget a comma?)", FL);
        return string;
    
#line 939 "xrb_parse_datafile_parser.cpp"
            break;
        }

    }

    assert(false && "no value returned from reduction rule code block");
    return NULL;
}

void DataFileParser::PrintParserStatus_ (std::ostream &stream) const
{
    assert(!m_stack_.empty());

    stream << 
#line 159 "xrb_parse_datafile_parser.trison"
"DataFileParser" << (m_scanner->GetFiLoc().IsValid() ? " ("+m_scanner->GetFiLoc().AsString()+")" : g_empty_string) << ":"
#line 956 "xrb_parse_datafile_parser.cpp"
 << " parser stack: ";
    for (Stack_::const_iterator it = m_stack_.begin(), it_end = m_stack_.end(); it != it_end; ++it)
    {
        stream << it->m_state_index;
        Stack_::const_iterator next_it = it;
        if (++next_it != it_end)
            stream << ' ';
    }
    stream << std::endl;

    PrintIndented_(stream, ms_state_table_[m_stack_.rbegin()->m_state_index].m_description);
    stream << std::endl;
}

void DataFileParser::PrintIndented_ (std::ostream &stream, char const *string) const
{
    assert(string != NULL);
    stream << 
#line 159 "xrb_parse_datafile_parser.trison"
"DataFileParser" << (m_scanner->GetFiLoc().IsValid() ? " ("+m_scanner->GetFiLoc().AsString()+")" : g_empty_string) << ":"
#line 977 "xrb_parse_datafile_parser.cpp"
 << "    ";
    while (*string != '\0')
    {
        if (*string == '\n')
            stream << '\n' << 
#line 159 "xrb_parse_datafile_parser.trison"
"DataFileParser" << (m_scanner->GetFiLoc().IsValid() ? " ("+m_scanner->GetFiLoc().AsString()+")" : g_empty_string) << ":"
#line 985 "xrb_parse_datafile_parser.cpp"
 << "    ";
        else
            stream << *string;
        ++string;
    }
}

std::ostream &operator << (std::ostream &stream, DataFileParser::Token const &token)
{
    if (token.m_id < DataFileParser::ms_token_name_count_)
        stream << '(' << DataFileParser::ms_token_name_table_[token.m_id] << ')';
    else
        stream << "!INVALID TOKEN!";
    return stream;
}

DataFileParser::Rule_ const DataFileParser::ms_rule_table_[] =
{
    { DataFileParser::Nonterminal_::data_file, 1, "data_file <- element_list" },
    { DataFileParser::Nonterminal_::data_file, 1, "data_file <- ERROR_" },
    { DataFileParser::Nonterminal_::element_list, 2, "element_list <- element_list element" },
    { DataFileParser::Nonterminal_::element_list, 0, "element_list <-" },
    { DataFileParser::Nonterminal_::element, 3, "element <- IDENTIFIER value ';'" },
    { DataFileParser::Nonterminal_::element, 3, "element <- IDENTIFIER ERROR_ ';'" },
    { DataFileParser::Nonterminal_::element, 2, "element <- ERROR_ ';'" },
    { DataFileParser::Nonterminal_::structure, 3, "structure <- '{' element_list '}'" },
    { DataFileParser::Nonterminal_::structure, 3, "structure <- '{' ERROR_ '}'" },
    { DataFileParser::Nonterminal_::array, 3, "array <- '[' value_list ']'" },
    { DataFileParser::Nonterminal_::array, 4, "array <- '[' value_list ',' ']'" },
    { DataFileParser::Nonterminal_::array, 2, "array <- '[' ']'" },
    { DataFileParser::Nonterminal_::array, 3, "array <- '[' ERROR_ ']'" },
    { DataFileParser::Nonterminal_::value_list, 3, "value_list <- value_list ',' value" },
    { DataFileParser::Nonterminal_::value_list, 1, "value_list <- value" },
    { DataFileParser::Nonterminal_::value, 1, "value <- BOOLEAN" },
    { DataFileParser::Nonterminal_::value, 1, "value <- SINT32" },
    { DataFileParser::Nonterminal_::value, 1, "value <- UINT32" },
    { DataFileParser::Nonterminal_::value, 1, "value <- FLOAT" },
    { DataFileParser::Nonterminal_::value, 1, "value <- CHARACTER" },
    { DataFileParser::Nonterminal_::value, 1, "value <- string" },
    { DataFileParser::Nonterminal_::value, 1, "value <- structure" },
    { DataFileParser::Nonterminal_::value, 1, "value <- array" },
    { DataFileParser::Nonterminal_::string, 3, "string <- string '+' STRING_FRAGMENT" },
    { DataFileParser::Nonterminal_::string, 1, "string <- STRING_FRAGMENT" },
    { DataFileParser::Nonterminal_::string, 2, "string <- string STRING_FRAGMENT" }
};
BarfCpp_::Size const DataFileParser::ms_rule_count_ = sizeof(DataFileParser::ms_rule_table_) / sizeof(*DataFileParser::ms_rule_table_);

DataFileParser::State_ const DataFileParser::ms_state_table_[] =
{
    { 3, ms_transition_table_+0, "START data_file                               \nrule 0: data_file <- . element_list           \nrule 2: element_list <- . element_list element\nrule 3: element_list <- .                     \nrule 1: data_file <- . ERROR_                 " },
    { 2, ms_transition_table_+3, "rule 0: data_file <- . element_list           \nrule 2: element_list <- . element_list element\nrule 3: element_list <- .                     " },
    { 4, ms_transition_table_+5, "rule 0: data_file <- element_list .           \nrule 2: element_list <- element_list . element\nrule 4: element <- . IDENTIFIER value ';'     \nrule 5: element <- . IDENTIFIER ERROR_ ';'    \nrule 6: element <- . ERROR_ ';'               " },
    { 2, ms_transition_table_+9, "rule 6: element <- ERROR_ . ';'" },
    { 1, ms_transition_table_+11, "rule 6: element <- ERROR_ ';' ." },
    { 14, ms_transition_table_+12, "rule 4: element <- IDENTIFIER . value ';'      \nrule 15: value <- . BOOLEAN                    \nrule 16: value <- . SINT32                     \nrule 17: value <- . UINT32                     \nrule 18: value <- . FLOAT                      \nrule 19: value <- . CHARACTER                  \nrule 20: value <- . string                     \nrule 23: string <- . string '+' STRING_FRAGMENT\nrule 24: string <- . STRING_FRAGMENT           \nrule 25: string <- . string STRING_FRAGMENT    \nrule 21: value <- . structure                  \nrule 7: structure <- . '{' element_list '}'    \nrule 8: structure <- . '{' ERROR_ '}'          \nrule 22: value <- . array                      \nrule 9: array <- . '[' value_list ']'          \nrule 10: array <- . '[' value_list ',' ']'     \nrule 11: array <- . '[' ']'                    \nrule 12: array <- . '[' ERROR_ ']'             \nrule 5: element <- IDENTIFIER . ERROR_ ';'     " },
    { 16, ms_transition_table_+26, "rule 15: value <- . BOOLEAN                    \nrule 16: value <- . SINT32                     \nrule 17: value <- . UINT32                     \nrule 18: value <- . FLOAT                      \nrule 19: value <- . CHARACTER                  \nrule 20: value <- . string                     \nrule 23: string <- . string '+' STRING_FRAGMENT\nrule 24: string <- . STRING_FRAGMENT           \nrule 25: string <- . string STRING_FRAGMENT    \nrule 21: value <- . structure                  \nrule 7: structure <- . '{' element_list '}'    \nrule 8: structure <- . '{' ERROR_ '}'          \nrule 22: value <- . array                      \nrule 9: array <- . '[' value_list ']'          \nrule 9: array <- '[' . value_list ']'          \nrule 13: value_list <- . value_list ',' value  \nrule 14: value_list <- . value                 \nrule 10: array <- . '[' value_list ',' ']'     \nrule 10: array <- '[' . value_list ',' ']'     \nrule 11: array <- . '[' ']'                    \nrule 11: array <- '[' . ']'                    \nrule 12: array <- . '[' ERROR_ ']'             \nrule 12: array <- '[' . ERROR_ ']'             " },
    { 1, ms_transition_table_+42, "rule 11: array <- '[' ']' ." },
    { 2, ms_transition_table_+43, "rule 2: element_list <- . element_list element\nrule 7: structure <- '{' . element_list '}'   \nrule 8: structure <- '{' . ERROR_ '}'         \nrule 3: element_list <- .                     " },
    { 2, ms_transition_table_+45, "rule 2: element_list <- . element_list element\nrule 7: structure <- '{' . element_list '}'   \nrule 3: element_list <- .                     " },
    { 5, ms_transition_table_+47, "rule 2: element_list <- element_list . element\nrule 4: element <- . IDENTIFIER value ';'     \nrule 7: structure <- '{' element_list . '}'   \nrule 5: element <- . IDENTIFIER ERROR_ ';'    \nrule 6: element <- . ERROR_ ';'               " },
    { 1, ms_transition_table_+52, "rule 7: structure <- '{' element_list '}' ." },
    { 1, ms_transition_table_+53, "rule 2: element_list <- element_list element ." },
    { 2, ms_transition_table_+54, "rule 12: array <- '[' ERROR_ . ']'" },
    { 1, ms_transition_table_+56, "rule 12: array <- '[' ERROR_ ']' ." },
    { 1, ms_transition_table_+57, "rule 15: value <- BOOLEAN ." },
    { 1, ms_transition_table_+58, "rule 16: value <- SINT32 ." },
    { 1, ms_transition_table_+59, "rule 17: value <- UINT32 ." },
    { 1, ms_transition_table_+60, "rule 18: value <- FLOAT ." },
    { 1, ms_transition_table_+61, "rule 19: value <- CHARACTER ." },
    { 1, ms_transition_table_+62, "rule 24: string <- STRING_FRAGMENT ." },
    { 1, ms_transition_table_+63, "rule 21: value <- structure ." },
    { 1, ms_transition_table_+64, "rule 22: value <- array ." },
    { 3, ms_transition_table_+65, "rule 9: array <- '[' value_list . ']'        \nrule 13: value_list <- value_list . ',' value\nrule 10: array <- '[' value_list . ',' ']'   " },
    { 14, ms_transition_table_+68, "rule 15: value <- . BOOLEAN                    \nrule 16: value <- . SINT32                     \nrule 17: value <- . UINT32                     \nrule 18: value <- . FLOAT                      \nrule 19: value <- . CHARACTER                  \nrule 20: value <- . string                     \nrule 23: string <- . string '+' STRING_FRAGMENT\nrule 24: string <- . STRING_FRAGMENT           \nrule 25: string <- . string STRING_FRAGMENT    \nrule 21: value <- . structure                  \nrule 7: structure <- . '{' element_list '}'    \nrule 8: structure <- . '{' ERROR_ '}'          \nrule 22: value <- . array                      \nrule 9: array <- . '[' value_list ']'          \nrule 13: value_list <- value_list ',' . value  \nrule 10: array <- . '[' value_list ',' ']'     \nrule 10: array <- '[' value_list ',' . ']'     \nrule 11: array <- . '[' ']'                    \nrule 12: array <- . '[' ERROR_ ']'             " },
    { 1, ms_transition_table_+82, "rule 10: array <- '[' value_list ',' ']' ." },
    { 1, ms_transition_table_+83, "rule 13: value_list <- value_list ',' value ." },
    { 3, ms_transition_table_+84, "rule 20: value <- string .                     \nrule 23: string <- string . '+' STRING_FRAGMENT\nrule 25: string <- string . STRING_FRAGMENT    " },
    { 2, ms_transition_table_+87, "rule 23: string <- string '+' . STRING_FRAGMENT" },
    { 1, ms_transition_table_+89, "rule 23: string <- string '+' STRING_FRAGMENT ." },
    { 1, ms_transition_table_+90, "rule 25: string <- string STRING_FRAGMENT ." },
    { 1, ms_transition_table_+91, "rule 9: array <- '[' value_list ']' ." },
    { 1, ms_transition_table_+92, "rule 14: value_list <- value ." },
    { 2, ms_transition_table_+93, "rule 5: element <- IDENTIFIER ERROR_ . ';'" },
    { 1, ms_transition_table_+95, "rule 5: element <- IDENTIFIER ERROR_ ';' ." },
    { 2, ms_transition_table_+96, "rule 4: element <- IDENTIFIER value . ';'" },
    { 1, ms_transition_table_+98, "rule 4: element <- IDENTIFIER value ';' ." },
    { 1, ms_transition_table_+99, "RETURN data_file" },
    { 2, ms_transition_table_+100, "START element_list                            \nrule 2: element_list <- . element_list element\nrule 3: element_list <- .                     " },
    { 4, ms_transition_table_+102, "RETURN element_list                           \nrule 2: element_list <- element_list . element\nrule 4: element <- . IDENTIFIER value ';'     \nrule 5: element <- . IDENTIFIER ERROR_ ';'    \nrule 6: element <- . ERROR_ ';'               " },
    { 4, ms_transition_table_+106, "START element                             \nrule 4: element <- . IDENTIFIER value ';' \nrule 5: element <- . IDENTIFIER ERROR_ ';'\nrule 6: element <- . ERROR_ ';'           " },
    { 1, ms_transition_table_+110, "RETURN element" },
    { 3, ms_transition_table_+111, "START structure                            \nrule 7: structure <- . '{' element_list '}'\nrule 8: structure <- . '{' ERROR_ '}'      " },
    { 1, ms_transition_table_+114, "RETURN structure" },
    { 3, ms_transition_table_+115, "START array                               \nrule 9: array <- . '[' value_list ']'     \nrule 10: array <- . '[' value_list ',' ']'\nrule 11: array <- . '[' ']'               \nrule 12: array <- . '[' ERROR_ ']'        " },
    { 1, ms_transition_table_+118, "RETURN array" },
    { 14, ms_transition_table_+119, "rule 15: value <- . BOOLEAN                    \nrule 16: value <- . SINT32                     \nrule 17: value <- . UINT32                     \nrule 18: value <- . FLOAT                      \nrule 19: value <- . CHARACTER                  \nrule 20: value <- . string                     \nrule 23: string <- . string '+' STRING_FRAGMENT\nrule 24: string <- . STRING_FRAGMENT           \nrule 25: string <- . string STRING_FRAGMENT    \nrule 21: value <- . structure                  \nrule 7: structure <- . '{' element_list '}'    \nrule 8: structure <- . '{' ERROR_ '}'          \nrule 22: value <- . array                      \nrule 9: array <- . '[' value_list ']'          \nSTART value_list                               \nrule 13: value_list <- . value_list ',' value  \nrule 14: value_list <- . value                 \nrule 10: array <- . '[' value_list ',' ']'     \nrule 11: array <- . '[' ']'                    \nrule 12: array <- . '[' ERROR_ ']'             " },
    { 2, ms_transition_table_+133, "RETURN value_list                            \nrule 13: value_list <- value_list . ',' value" },
    { 13, ms_transition_table_+135, "rule 15: value <- . BOOLEAN                    \nrule 16: value <- . SINT32                     \nrule 17: value <- . UINT32                     \nrule 18: value <- . FLOAT                      \nrule 19: value <- . CHARACTER                  \nrule 20: value <- . string                     \nrule 23: string <- . string '+' STRING_FRAGMENT\nrule 24: string <- . STRING_FRAGMENT           \nrule 25: string <- . string STRING_FRAGMENT    \nrule 21: value <- . structure                  \nrule 7: structure <- . '{' element_list '}'    \nrule 8: structure <- . '{' ERROR_ '}'          \nrule 22: value <- . array                      \nrule 9: array <- . '[' value_list ']'          \nrule 13: value_list <- value_list ',' . value  \nrule 10: array <- . '[' value_list ',' ']'     \nrule 11: array <- . '[' ']'                    \nrule 12: array <- . '[' ERROR_ ']'             " },
    { 13, ms_transition_table_+148, "START value                                    \nrule 15: value <- . BOOLEAN                    \nrule 16: value <- . SINT32                     \nrule 17: value <- . UINT32                     \nrule 18: value <- . FLOAT                      \nrule 19: value <- . CHARACTER                  \nrule 20: value <- . string                     \nrule 23: string <- . string '+' STRING_FRAGMENT\nrule 24: string <- . STRING_FRAGMENT           \nrule 25: string <- . string STRING_FRAGMENT    \nrule 21: value <- . structure                  \nrule 7: structure <- . '{' element_list '}'    \nrule 8: structure <- . '{' ERROR_ '}'          \nrule 22: value <- . array                      \nrule 9: array <- . '[' value_list ']'          \nrule 10: array <- . '[' value_list ',' ']'     \nrule 11: array <- . '[' ']'                    \nrule 12: array <- . '[' ERROR_ ']'             " },
    { 1, ms_transition_table_+161, "RETURN value" },
    { 3, ms_transition_table_+162, "START string                                   \nrule 23: string <- . string '+' STRING_FRAGMENT\nrule 24: string <- . STRING_FRAGMENT           \nrule 25: string <- . string STRING_FRAGMENT    " },
    { 3, ms_transition_table_+165, "RETURN string                                  \nrule 23: string <- string . '+' STRING_FRAGMENT\nrule 25: string <- string . STRING_FRAGMENT    " }
};
BarfCpp_::Size const DataFileParser::ms_state_count_ = sizeof(DataFileParser::ms_state_table_) / sizeof(*DataFileParser::ms_state_table_);

DataFileParser::Transition_ const DataFileParser::ms_transition_table_[] =
{
    { DataFileParser::Transition_::REDUCE, 3, 0, ms_lookahead_table_+0 },
    { DataFileParser::Transition_::SHIFT, 37, 1, ms_lookahead_table_+0 },
    { DataFileParser::Transition_::SHIFT, 2, 1, ms_lookahead_table_+1 },
    { DataFileParser::Transition_::REDUCE, 3, 0, ms_lookahead_table_+2 },
    { DataFileParser::Transition_::SHIFT, 2, 1, ms_lookahead_table_+2 },
    { DataFileParser::Transition_::REDUCE, 0, 0, ms_lookahead_table_+3 },
    { DataFileParser::Transition_::SHIFT, 3, 1, ms_lookahead_table_+3 },
    { DataFileParser::Transition_::SHIFT, 5, 1, ms_lookahead_table_+4 },
    { DataFileParser::Transition_::SHIFT, 12, 1, ms_lookahead_table_+5 },
    { DataFileParser::Transition_::ERROR_PANIC, 0, 0, ms_lookahead_table_+6 },
    { DataFileParser::Transition_::SHIFT, 4, 1, ms_lookahead_table_+6 },
    { DataFileParser::Transition_::REDUCE, 6, 0, ms_lookahead_table_+7 },
    { DataFileParser::Transition_::ERROR_PANIC, 0, 0, ms_lookahead_table_+7 },
    { DataFileParser::Transition_::SHIFT, 6, 1, ms_lookahead_table_+7 },
    { DataFileParser::Transition_::SHIFT, 8, 1, ms_lookahead_table_+8 },
    { DataFileParser::Transition_::SHIFT, 33, 1, ms_lookahead_table_+9 },
    { DataFileParser::Transition_::SHIFT, 15, 1, ms_lookahead_table_+10 },
    { DataFileParser::Transition_::SHIFT, 16, 1, ms_lookahead_table_+11 },
    { DataFileParser::Transition_::SHIFT, 17, 1, ms_lookahead_table_+12 },
    { DataFileParser::Transition_::SHIFT, 18, 1, ms_lookahead_table_+13 },
    { DataFileParser::Transition_::SHIFT, 19, 1, ms_lookahead_table_+14 },
    { DataFileParser::Transition_::SHIFT, 20, 1, ms_lookahead_table_+15 },
    { DataFileParser::Transition_::SHIFT, 21, 1, ms_lookahead_table_+16 },
    { DataFileParser::Transition_::SHIFT, 22, 1, ms_lookahead_table_+17 },
    { DataFileParser::Transition_::SHIFT, 35, 1, ms_lookahead_table_+18 },
    { DataFileParser::Transition_::SHIFT, 27, 1, ms_lookahead_table_+19 },
    { DataFileParser::Transition_::ERROR_PANIC, 0, 0, ms_lookahead_table_+20 },
    { DataFileParser::Transition_::SHIFT, 6, 1, ms_lookahead_table_+20 },
    { DataFileParser::Transition_::SHIFT, 7, 1, ms_lookahead_table_+21 },
    { DataFileParser::Transition_::SHIFT, 8, 1, ms_lookahead_table_+22 },
    { DataFileParser::Transition_::SHIFT, 13, 1, ms_lookahead_table_+23 },
    { DataFileParser::Transition_::SHIFT, 15, 1, ms_lookahead_table_+24 },
    { DataFileParser::Transition_::SHIFT, 16, 1, ms_lookahead_table_+25 },
    { DataFileParser::Transition_::SHIFT, 17, 1, ms_lookahead_table_+26 },
    { DataFileParser::Transition_::SHIFT, 18, 1, ms_lookahead_table_+27 },
    { DataFileParser::Transition_::SHIFT, 19, 1, ms_lookahead_table_+28 },
    { DataFileParser::Transition_::SHIFT, 20, 1, ms_lookahead_table_+29 },
    { DataFileParser::Transition_::SHIFT, 21, 1, ms_lookahead_table_+30 },
    { DataFileParser::Transition_::SHIFT, 22, 1, ms_lookahead_table_+31 },
    { DataFileParser::Transition_::SHIFT, 23, 1, ms_lookahead_table_+32 },
    { DataFileParser::Transition_::SHIFT, 32, 1, ms_lookahead_table_+33 },
    { DataFileParser::Transition_::SHIFT, 27, 1, ms_lookahead_table_+34 },
    { DataFileParser::Transition_::REDUCE, 11, 0, ms_lookahead_table_+35 },
    { DataFileParser::Transition_::REDUCE, 3, 0, ms_lookahead_table_+35 },
    { DataFileParser::Transition_::SHIFT, 10, 1, ms_lookahead_table_+35 },
    { DataFileParser::Transition_::REDUCE, 3, 0, ms_lookahead_table_+36 },
    { DataFileParser::Transition_::SHIFT, 10, 1, ms_lookahead_table_+36 },
    { DataFileParser::Transition_::ERROR_PANIC, 0, 0, ms_lookahead_table_+37 },
    { DataFileParser::Transition_::SHIFT, 11, 1, ms_lookahead_table_+37 },
    { DataFileParser::Transition_::SHIFT, 3, 1, ms_lookahead_table_+38 },
    { DataFileParser::Transition_::SHIFT, 5, 1, ms_lookahead_table_+39 },
    { DataFileParser::Transition_::SHIFT, 12, 1, ms_lookahead_table_+40 },
    { DataFileParser::Transition_::REDUCE, 7, 0, ms_lookahead_table_+41 },
    { DataFileParser::Transition_::REDUCE, 2, 0, ms_lookahead_table_+41 },
    { DataFileParser::Transition_::ERROR_PANIC, 0, 0, ms_lookahead_table_+41 },
    { DataFileParser::Transition_::SHIFT, 14, 1, ms_lookahead_table_+41 },
    { DataFileParser::Transition_::REDUCE, 12, 0, ms_lookahead_table_+42 },
    { DataFileParser::Transition_::REDUCE, 15, 0, ms_lookahead_table_+42 },
    { DataFileParser::Transition_::REDUCE, 16, 0, ms_lookahead_table_+42 },
    { DataFileParser::Transition_::REDUCE, 17, 0, ms_lookahead_table_+42 },
    { DataFileParser::Transition_::REDUCE, 18, 0, ms_lookahead_table_+42 },
    { DataFileParser::Transition_::REDUCE, 19, 0, ms_lookahead_table_+42 },
    { DataFileParser::Transition_::REDUCE, 24, 0, ms_lookahead_table_+42 },
    { DataFileParser::Transition_::REDUCE, 21, 0, ms_lookahead_table_+42 },
    { DataFileParser::Transition_::REDUCE, 22, 0, ms_lookahead_table_+42 },
    { DataFileParser::Transition_::ERROR_PANIC, 0, 0, ms_lookahead_table_+42 },
    { DataFileParser::Transition_::SHIFT, 24, 1, ms_lookahead_table_+42 },
    { DataFileParser::Transition_::SHIFT, 31, 1, ms_lookahead_table_+43 },
    { DataFileParser::Transition_::ERROR_PANIC, 0, 0, ms_lookahead_table_+44 },
    { DataFileParser::Transition_::SHIFT, 6, 1, ms_lookahead_table_+44 },
    { DataFileParser::Transition_::SHIFT, 25, 1, ms_lookahead_table_+45 },
    { DataFileParser::Transition_::SHIFT, 8, 1, ms_lookahead_table_+46 },
    { DataFileParser::Transition_::SHIFT, 15, 1, ms_lookahead_table_+47 },
    { DataFileParser::Transition_::SHIFT, 16, 1, ms_lookahead_table_+48 },
    { DataFileParser::Transition_::SHIFT, 17, 1, ms_lookahead_table_+49 },
    { DataFileParser::Transition_::SHIFT, 18, 1, ms_lookahead_table_+50 },
    { DataFileParser::Transition_::SHIFT, 19, 1, ms_lookahead_table_+51 },
    { DataFileParser::Transition_::SHIFT, 20, 1, ms_lookahead_table_+52 },
    { DataFileParser::Transition_::SHIFT, 21, 1, ms_lookahead_table_+53 },
    { DataFileParser::Transition_::SHIFT, 22, 1, ms_lookahead_table_+54 },
    { DataFileParser::Transition_::SHIFT, 26, 1, ms_lookahead_table_+55 },
    { DataFileParser::Transition_::SHIFT, 27, 1, ms_lookahead_table_+56 },
    { DataFileParser::Transition_::REDUCE, 10, 0, ms_lookahead_table_+57 },
    { DataFileParser::Transition_::REDUCE, 13, 0, ms_lookahead_table_+57 },
    { DataFileParser::Transition_::REDUCE, 20, 0, ms_lookahead_table_+57 },
    { DataFileParser::Transition_::SHIFT, 28, 1, ms_lookahead_table_+57 },
    { DataFileParser::Transition_::SHIFT, 30, 1, ms_lookahead_table_+58 },
    { DataFileParser::Transition_::ERROR_PANIC, 0, 0, ms_lookahead_table_+59 },
    { DataFileParser::Transition_::SHIFT, 29, 1, ms_lookahead_table_+59 },
    { DataFileParser::Transition_::REDUCE, 23, 0, ms_lookahead_table_+60 },
    { DataFileParser::Transition_::REDUCE, 25, 0, ms_lookahead_table_+60 },
    { DataFileParser::Transition_::REDUCE, 9, 0, ms_lookahead_table_+60 },
    { DataFileParser::Transition_::REDUCE, 14, 0, ms_lookahead_table_+60 },
    { DataFileParser::Transition_::ERROR_PANIC, 0, 0, ms_lookahead_table_+60 },
    { DataFileParser::Transition_::SHIFT, 34, 1, ms_lookahead_table_+60 },
    { DataFileParser::Transition_::REDUCE, 5, 0, ms_lookahead_table_+61 },
    { DataFileParser::Transition_::ERROR_PANIC, 0, 0, ms_lookahead_table_+61 },
    { DataFileParser::Transition_::SHIFT, 36, 1, ms_lookahead_table_+61 },
    { DataFileParser::Transition_::REDUCE, 4, 0, ms_lookahead_table_+62 },
    { DataFileParser::Transition_::RETURN, 0, 0, ms_lookahead_table_+62 },
    { DataFileParser::Transition_::REDUCE, 3, 0, ms_lookahead_table_+62 },
    { DataFileParser::Transition_::SHIFT, 39, 1, ms_lookahead_table_+62 },
    { DataFileParser::Transition_::RETURN, 0, 0, ms_lookahead_table_+63 },
    { DataFileParser::Transition_::SHIFT, 3, 1, ms_lookahead_table_+63 },
    { DataFileParser::Transition_::SHIFT, 5, 1, ms_lookahead_table_+64 },
    { DataFileParser::Transition_::SHIFT, 12, 1, ms_lookahead_table_+65 },
    { DataFileParser::Transition_::ERROR_PANIC, 0, 0, ms_lookahead_table_+66 },
    { DataFileParser::Transition_::SHIFT, 3, 1, ms_lookahead_table_+66 },
    { DataFileParser::Transition_::SHIFT, 5, 1, ms_lookahead_table_+67 },
    { DataFileParser::Transition_::SHIFT, 41, 1, ms_lookahead_table_+68 },
    { DataFileParser::Transition_::RETURN, 0, 0, ms_lookahead_table_+69 },
    { DataFileParser::Transition_::ERROR_PANIC, 0, 0, ms_lookahead_table_+69 },
    { DataFileParser::Transition_::SHIFT, 8, 1, ms_lookahead_table_+69 },
    { DataFileParser::Transition_::SHIFT, 43, 1, ms_lookahead_table_+70 },
    { DataFileParser::Transition_::RETURN, 0, 0, ms_lookahead_table_+71 },
    { DataFileParser::Transition_::ERROR_PANIC, 0, 0, ms_lookahead_table_+71 },
    { DataFileParser::Transition_::SHIFT, 6, 1, ms_lookahead_table_+71 },
    { DataFileParser::Transition_::SHIFT, 45, 1, ms_lookahead_table_+72 },
    { DataFileParser::Transition_::RETURN, 0, 0, ms_lookahead_table_+73 },
    { DataFileParser::Transition_::ERROR_PANIC, 0, 0, ms_lookahead_table_+73 },
    { DataFileParser::Transition_::SHIFT, 6, 1, ms_lookahead_table_+73 },
    { DataFileParser::Transition_::SHIFT, 8, 1, ms_lookahead_table_+74 },
    { DataFileParser::Transition_::SHIFT, 15, 1, ms_lookahead_table_+75 },
    { DataFileParser::Transition_::SHIFT, 16, 1, ms_lookahead_table_+76 },
    { DataFileParser::Transition_::SHIFT, 17, 1, ms_lookahead_table_+77 },
    { DataFileParser::Transition_::SHIFT, 18, 1, ms_lookahead_table_+78 },
    { DataFileParser::Transition_::SHIFT, 19, 1, ms_lookahead_table_+79 },
    { DataFileParser::Transition_::SHIFT, 20, 1, ms_lookahead_table_+80 },
    { DataFileParser::Transition_::SHIFT, 21, 1, ms_lookahead_table_+81 },
    { DataFileParser::Transition_::SHIFT, 22, 1, ms_lookahead_table_+82 },
    { DataFileParser::Transition_::SHIFT, 47, 1, ms_lookahead_table_+83 },
    { DataFileParser::Transition_::SHIFT, 32, 1, ms_lookahead_table_+84 },
    { DataFileParser::Transition_::SHIFT, 27, 1, ms_lookahead_table_+85 },
    { DataFileParser::Transition_::RETURN, 0, 0, ms_lookahead_table_+86 },
    { DataFileParser::Transition_::SHIFT, 48, 1, ms_lookahead_table_+86 },
    { DataFileParser::Transition_::ERROR_PANIC, 0, 0, ms_lookahead_table_+87 },
    { DataFileParser::Transition_::SHIFT, 6, 1, ms_lookahead_table_+87 },
    { DataFileParser::Transition_::SHIFT, 8, 1, ms_lookahead_table_+88 },
    { DataFileParser::Transition_::SHIFT, 15, 1, ms_lookahead_table_+89 },
    { DataFileParser::Transition_::SHIFT, 16, 1, ms_lookahead_table_+90 },
    { DataFileParser::Transition_::SHIFT, 17, 1, ms_lookahead_table_+91 },
    { DataFileParser::Transition_::SHIFT, 18, 1, ms_lookahead_table_+92 },
    { DataFileParser::Transition_::SHIFT, 19, 1, ms_lookahead_table_+93 },
    { DataFileParser::Transition_::SHIFT, 20, 1, ms_lookahead_table_+94 },
    { DataFileParser::Transition_::SHIFT, 21, 1, ms_lookahead_table_+95 },
    { DataFileParser::Transition_::SHIFT, 22, 1, ms_lookahead_table_+96 },
    { DataFileParser::Transition_::SHIFT, 26, 1, ms_lookahead_table_+97 },
    { DataFileParser::Transition_::SHIFT, 27, 1, ms_lookahead_table_+98 },
    { DataFileParser::Transition_::ERROR_PANIC, 0, 0, ms_lookahead_table_+99 },
    { DataFileParser::Transition_::SHIFT, 6, 1, ms_lookahead_table_+99 },
    { DataFileParser::Transition_::SHIFT, 8, 1, ms_lookahead_table_+100 },
    { DataFileParser::Transition_::SHIFT, 15, 1, ms_lookahead_table_+101 },
    { DataFileParser::Transition_::SHIFT, 16, 1, ms_lookahead_table_+102 },
    { DataFileParser::Transition_::SHIFT, 17, 1, ms_lookahead_table_+103 },
    { DataFileParser::Transition_::SHIFT, 18, 1, ms_lookahead_table_+104 },
    { DataFileParser::Transition_::SHIFT, 19, 1, ms_lookahead_table_+105 },
    { DataFileParser::Transition_::SHIFT, 20, 1, ms_lookahead_table_+106 },
    { DataFileParser::Transition_::SHIFT, 21, 1, ms_lookahead_table_+107 },
    { DataFileParser::Transition_::SHIFT, 22, 1, ms_lookahead_table_+108 },
    { DataFileParser::Transition_::SHIFT, 50, 1, ms_lookahead_table_+109 },
    { DataFileParser::Transition_::SHIFT, 27, 1, ms_lookahead_table_+110 },
    { DataFileParser::Transition_::RETURN, 0, 0, ms_lookahead_table_+111 },
    { DataFileParser::Transition_::ERROR_PANIC, 0, 0, ms_lookahead_table_+111 },
    { DataFileParser::Transition_::SHIFT, 20, 1, ms_lookahead_table_+111 },
    { DataFileParser::Transition_::SHIFT, 52, 1, ms_lookahead_table_+112 },
    { DataFileParser::Transition_::RETURN, 0, 0, ms_lookahead_table_+113 },
    { DataFileParser::Transition_::SHIFT, 28, 1, ms_lookahead_table_+113 },
    { DataFileParser::Transition_::SHIFT, 30, 1, ms_lookahead_table_+114 }
};
BarfCpp_::Size const DataFileParser::ms_transition_count_ = sizeof(DataFileParser::ms_transition_table_) / sizeof(*DataFileParser::ms_transition_table_);

DataFileParser::Token::Id const DataFileParser::ms_lookahead_table_[] =
{
    DataFileParser::Nonterminal_::data_file,
    DataFileParser::Nonterminal_::element_list,
    DataFileParser::Nonterminal_::element_list,
    DataFileParser::Terminal::ERROR_,
    DataFileParser::Terminal::IDENTIFIER,
    DataFileParser::Nonterminal_::element,
    ';',
    '[',
    '{',
    DataFileParser::Terminal::ERROR_,
    DataFileParser::Terminal::BOOLEAN,
    DataFileParser::Terminal::SINT32,
    DataFileParser::Terminal::UINT32,
    DataFileParser::Terminal::FLOAT,
    DataFileParser::Terminal::CHARACTER,
    DataFileParser::Terminal::STRING_FRAGMENT,
    DataFileParser::Nonterminal_::structure,
    DataFileParser::Nonterminal_::array,
    DataFileParser::Nonterminal_::value,
    DataFileParser::Nonterminal_::string,
    '[',
    ']',
    '{',
    DataFileParser::Terminal::ERROR_,
    DataFileParser::Terminal::BOOLEAN,
    DataFileParser::Terminal::SINT32,
    DataFileParser::Terminal::UINT32,
    DataFileParser::Terminal::FLOAT,
    DataFileParser::Terminal::CHARACTER,
    DataFileParser::Terminal::STRING_FRAGMENT,
    DataFileParser::Nonterminal_::structure,
    DataFileParser::Nonterminal_::array,
    DataFileParser::Nonterminal_::value_list,
    DataFileParser::Nonterminal_::value,
    DataFileParser::Nonterminal_::string,
    DataFileParser::Nonterminal_::element_list,
    DataFileParser::Nonterminal_::element_list,
    '}',
    DataFileParser::Terminal::ERROR_,
    DataFileParser::Terminal::IDENTIFIER,
    DataFileParser::Nonterminal_::element,
    ']',
    ',',
    ']',
    '[',
    ']',
    '{',
    DataFileParser::Terminal::BOOLEAN,
    DataFileParser::Terminal::SINT32,
    DataFileParser::Terminal::UINT32,
    DataFileParser::Terminal::FLOAT,
    DataFileParser::Terminal::CHARACTER,
    DataFileParser::Terminal::STRING_FRAGMENT,
    DataFileParser::Nonterminal_::structure,
    DataFileParser::Nonterminal_::array,
    DataFileParser::Nonterminal_::value,
    DataFileParser::Nonterminal_::string,
    '+',
    DataFileParser::Terminal::STRING_FRAGMENT,
    DataFileParser::Terminal::STRING_FRAGMENT,
    ';',
    ';',
    DataFileParser::Nonterminal_::element_list,
    DataFileParser::Terminal::ERROR_,
    DataFileParser::Terminal::IDENTIFIER,
    DataFileParser::Nonterminal_::element,
    DataFileParser::Terminal::ERROR_,
    DataFileParser::Terminal::IDENTIFIER,
    DataFileParser::Nonterminal_::element,
    '{',
    DataFileParser::Nonterminal_::structure,
    '[',
    DataFileParser::Nonterminal_::array,
    '[',
    '{',
    DataFileParser::Terminal::BOOLEAN,
    DataFileParser::Terminal::SINT32,
    DataFileParser::Terminal::UINT32,
    DataFileParser::Terminal::FLOAT,
    DataFileParser::Terminal::CHARACTER,
    DataFileParser::Terminal::STRING_FRAGMENT,
    DataFileParser::Nonterminal_::structure,
    DataFileParser::Nonterminal_::array,
    DataFileParser::Nonterminal_::value_list,
    DataFileParser::Nonterminal_::value,
    DataFileParser::Nonterminal_::string,
    ',',
    '[',
    '{',
    DataFileParser::Terminal::BOOLEAN,
    DataFileParser::Terminal::SINT32,
    DataFileParser::Terminal::UINT32,
    DataFileParser::Terminal::FLOAT,
    DataFileParser::Terminal::CHARACTER,
    DataFileParser::Terminal::STRING_FRAGMENT,
    DataFileParser::Nonterminal_::structure,
    DataFileParser::Nonterminal_::array,
    DataFileParser::Nonterminal_::value,
    DataFileParser::Nonterminal_::string,
    '[',
    '{',
    DataFileParser::Terminal::BOOLEAN,
    DataFileParser::Terminal::SINT32,
    DataFileParser::Terminal::UINT32,
    DataFileParser::Terminal::FLOAT,
    DataFileParser::Terminal::CHARACTER,
    DataFileParser::Terminal::STRING_FRAGMENT,
    DataFileParser::Nonterminal_::structure,
    DataFileParser::Nonterminal_::array,
    DataFileParser::Nonterminal_::value,
    DataFileParser::Nonterminal_::string,
    DataFileParser::Terminal::STRING_FRAGMENT,
    DataFileParser::Nonterminal_::string,
    '+',
    DataFileParser::Terminal::STRING_FRAGMENT
};
BarfCpp_::Size const DataFileParser::ms_lookahead_count_ = sizeof(DataFileParser::ms_lookahead_table_) / sizeof(*DataFileParser::ms_lookahead_table_);

char const *const DataFileParser::ms_token_name_table_[] =
{
    "'\\0'",
    "'\\x01'",
    "'\\x02'",
    "'\\x03'",
    "'\\x04'",
    "'\\x05'",
    "'\\x06'",
    "'\\a'",
    "'\\b'",
    "'\\t'",
    "'\\n'",
    "'\\v'",
    "'\\f'",
    "'\\r'",
    "'\\x0E'",
    "'\\x0F'",
    "'\\x10'",
    "'\\x11'",
    "'\\x12'",
    "'\\x13'",
    "'\\x14'",
    "'\\x15'",
    "'\\x16'",
    "'\\x17'",
    "'\\x18'",
    "'\\x19'",
    "'\\x1A'",
    "'\\x1B'",
    "'\\x1C'",
    "'\\x1D'",
    "'\\x1E'",
    "'\\x1F'",
    "' '",
    "'!'",
    "'\"'",
    "'#'",
    "'$'",
    "'%'",
    "'&'",
    "'\\''",
    "'('",
    "')'",
    "'*'",
    "'+'",
    "','",
    "'-'",
    "'.'",
    "'/'",
    "'0'",
    "'1'",
    "'2'",
    "'3'",
    "'4'",
    "'5'",
    "'6'",
    "'7'",
    "'8'",
    "'9'",
    "':'",
    "';'",
    "'<'",
    "'='",
    "'>'",
    "'?'",
    "'@'",
    "'A'",
    "'B'",
    "'C'",
    "'D'",
    "'E'",
    "'F'",
    "'G'",
    "'H'",
    "'I'",
    "'J'",
    "'K'",
    "'L'",
    "'M'",
    "'N'",
    "'O'",
    "'P'",
    "'Q'",
    "'R'",
    "'S'",
    "'T'",
    "'U'",
    "'V'",
    "'W'",
    "'X'",
    "'Y'",
    "'Z'",
    "'['",
    "'\\\\'",
    "']'",
    "'^'",
    "'_'",
    "'`'",
    "'a'",
    "'b'",
    "'c'",
    "'d'",
    "'e'",
    "'f'",
    "'g'",
    "'h'",
    "'i'",
    "'j'",
    "'k'",
    "'l'",
    "'m'",
    "'n'",
    "'o'",
    "'p'",
    "'q'",
    "'r'",
    "'s'",
    "'t'",
    "'u'",
    "'v'",
    "'w'",
    "'x'",
    "'y'",
    "'z'",
    "'{'",
    "'|'",
    "'}'",
    "'~'",
    "'\\x7F'",
    "'\\x80'",
    "'\\x81'",
    "'\\x82'",
    "'\\x83'",
    "'\\x84'",
    "'\\x85'",
    "'\\x86'",
    "'\\x87'",
    "'\\x88'",
    "'\\x89'",
    "'\\x8A'",
    "'\\x8B'",
    "'\\x8C'",
    "'\\x8D'",
    "'\\x8E'",
    "'\\x8F'",
    "'\\x90'",
    "'\\x91'",
    "'\\x92'",
    "'\\x93'",
    "'\\x94'",
    "'\\x95'",
    "'\\x96'",
    "'\\x97'",
    "'\\x98'",
    "'\\x99'",
    "'\\x9A'",
    "'\\x9B'",
    "'\\x9C'",
    "'\\x9D'",
    "'\\x9E'",
    "'\\x9F'",
    "'\\xA0'",
    "'\\xA1'",
    "'\\xA2'",
    "'\\xA3'",
    "'\\xA4'",
    "'\\xA5'",
    "'\\xA6'",
    "'\\xA7'",
    "'\\xA8'",
    "'\\xA9'",
    "'\\xAA'",
    "'\\xAB'",
    "'\\xAC'",
    "'\\xAD'",
    "'\\xAE'",
    "'\\xAF'",
    "'\\xB0'",
    "'\\xB1'",
    "'\\xB2'",
    "'\\xB3'",
    "'\\xB4'",
    "'\\xB5'",
    "'\\xB6'",
    "'\\xB7'",
    "'\\xB8'",
    "'\\xB9'",
    "'\\xBA'",
    "'\\xBB'",
    "'\\xBC'",
    "'\\xBD'",
    "'\\xBE'",
    "'\\xBF'",
    "'\\xC0'",
    "'\\xC1'",
    "'\\xC2'",
    "'\\xC3'",
    "'\\xC4'",
    "'\\xC5'",
    "'\\xC6'",
    "'\\xC7'",
    "'\\xC8'",
    "'\\xC9'",
    "'\\xCA'",
    "'\\xCB'",
    "'\\xCC'",
    "'\\xCD'",
    "'\\xCE'",
    "'\\xCF'",
    "'\\xD0'",
    "'\\xD1'",
    "'\\xD2'",
    "'\\xD3'",
    "'\\xD4'",
    "'\\xD5'",
    "'\\xD6'",
    "'\\xD7'",
    "'\\xD8'",
    "'\\xD9'",
    "'\\xDA'",
    "'\\xDB'",
    "'\\xDC'",
    "'\\xDD'",
    "'\\xDE'",
    "'\\xDF'",
    "'\\xE0'",
    "'\\xE1'",
    "'\\xE2'",
    "'\\xE3'",
    "'\\xE4'",
    "'\\xE5'",
    "'\\xE6'",
    "'\\xE7'",
    "'\\xE8'",
    "'\\xE9'",
    "'\\xEA'",
    "'\\xEB'",
    "'\\xEC'",
    "'\\xED'",
    "'\\xEE'",
    "'\\xEF'",
    "'\\xF0'",
    "'\\xF1'",
    "'\\xF2'",
    "'\\xF3'",
    "'\\xF4'",
    "'\\xF5'",
    "'\\xF6'",
    "'\\xF7'",
    "'\\xF8'",
    "'\\xF9'",
    "'\\xFA'",
    "'\\xFB'",
    "'\\xFC'",
    "'\\xFD'",
    "'\\xFE'",
    "'\\xFF'",
    "END_",
    "ERROR_",
    "BAD_TOKEN",
    "BOOLEAN",
    "SINT32",
    "UINT32",
    "FLOAT",
    "CHARACTER",
    "STRING_FRAGMENT",
    "IDENTIFIER",
    "data_file",
    "element_list",
    "element",
    "structure",
    "array",
    "value_list",
    "value",
    "string"
};
BarfCpp_::Size const DataFileParser::ms_token_name_count_ = sizeof(DataFileParser::ms_token_name_table_) / sizeof(*DataFileParser::ms_token_name_table_);

// ///////////////////////////////////////////////////////////////////////
// end of internal trison-generated parser guts
// ///////////////////////////////////////////////////////////////////////


#line 141 "xrb_parse_datafile_parser.trison"

} // end of namespace Xrb

#line 1672 "xrb_parse_datafile_parser.cpp"
