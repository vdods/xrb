// ///////////////////////////////////////////////////////////////////////////
// xrb_parse_datafile_parser.trison by Victor Dods, created 2006/07/15
// ///////////////////////////////////////////////////////////////////////////
// Unless a different license was explicitly granted in writing by the
// copyright holder (Victor Dods), this software is freely distributable under
// the terms of the GNU General Public License, version 2.  Any works deriving
// from this work must also be released under the GNU GPL.  See the included
// file LICENSE for details.
// ///////////////////////////////////////////////////////////////////////////

%targets cpp


%target.cpp.header_filename "xrb_parse_datafile_parser.hpp"
%target.cpp.implementation_filename "xrb_parse_datafile_parser.cpp"


%target.cpp.top_of_header_file %{
#if !defined(_XRB_PARSE_DATAFILE_PARSER_HPP_)
#define _XRB_PARSE_DATAFILE_PARSER_HPP_

#include "xrb.hpp"

#include <string>

#include "xrb_parse_filoc.hpp"

namespace Xrb {
namespace Parse {
namespace DataFile {

class Scanner;
class Structure;
class Value;
%}
%target.cpp.class_name Parser
%target.cpp.parse_method_access "private:"
%target.cpp.bottom_of_class {
    enum ReturnCode
    {
        RC_SUCCESS = 0,
        RC_INVALID_FILENAME,
        RC_FILE_OPEN_FAILURE,
        RC_PARSE_ERROR,
        RC_ERRORS_ENCOUNTERED
    }; // end of enum ReturnCode

    Structure *AcceptedStructure () const
    {
        return DStaticCast<Structure *>(m_accepted_value);
    }
    Structure *StealAcceptedStructure ()
    {
        Structure *accepted_structure = AcceptedStructure();
        m_accepted_value = NULL;
        return accepted_structure;
    }

    ReturnCode Parse (std::string const &input_path);

private:

    void EmitWarning (std::string const &message, FiLoc const &filoc = FiLoc::ms_invalid);
    void EmitError (std::string const &message, FiLoc const &filoc = FiLoc::ms_invalid);

    Scanner *m_scanner;
    Value *m_accepted_value;
}
%target.cpp.bottom_of_header_file %{
} // end of namespace DataFile
} // end of namespace Parse
} // end of namespace Xrb

#endif // !defined(_XRB_PARSE_DATAFILE_PARSER_HPP_)
%}


%target.cpp.top_of_implementation_file %{
#include <sstream>

#include "xrb_emptystring.hpp"
#include "xrb_parse_datafile_scanner.hpp"
#include "xrb_parse_datafile_value.hpp"

#undef FL
#define FL (m_scanner->GetFiLoc())

namespace Xrb {
namespace Parse {
namespace DataFile {

Parser::ReturnCode Parser::Parse (std::string const &input_path)
{
    ASSERT1(m_scanner != NULL);
    ASSERT1(!m_scanner->IsOpen());

    // if there are any pipe characters in the path, return failure
    if (input_path.find_first_of("|") != static_cast<std::string::size_type>(-1))
        return RC_INVALID_FILENAME;

    // attempt to open the path and return the result
    if (!m_scanner->Open(input_path))
        return RC_FILE_OPEN_FAILURE;

    // start parsing, and return parse error if we got an unhandled error
    if (Parse(&m_accepted_value) != PRC_SUCCESS)
        return RC_PARSE_ERROR;

    // if any errors were encountered, return parse error
    if (m_scanner->ErrorsWereEncountered())
        return RC_ERRORS_ENCOUNTERED;

    // otherwise return success
    return RC_SUCCESS;
}

void Parser::EmitWarning (std::string const &message, FiLoc const &filoc)
{
    ASSERT1(m_scanner != NULL);
    m_scanner->EmitWarning(message, filoc);
}

void Parser::EmitError (std::string const &message, FiLoc const &filoc)
{
    ASSERT1(m_scanner != NULL);
    m_scanner->EmitError(message, filoc);
}
%}
%target.cpp.constructor_actions {
//     DebugSpew(true);
    m_scanner = new Scanner();
    m_accepted_value = NULL;
}
%target.cpp.destructor_actions {
    ASSERT1(m_scanner != NULL);
    Delete(m_scanner);
    delete StealAcceptedStructure();
}
%target.cpp.top_of_parse_method_actions %{
    delete StealAcceptedStructure();
%}
%target.cpp.bottom_of_parse_method_actions %{
    m_scanner->Close();
%}
%target.cpp.bottom_of_implementation_file %{
} // end of namespace DataFile
} // end of namespace Parse
} // end of namespace Xrb
%}


%target.cpp.token_data_type "Value *"
%target.cpp.token_data_default "NULL"
%target.cpp.custom_token_data_type_cast DStaticCast
%target.cpp.throw_away_token_actions {
    Delete(token_data);
}
%target.cpp.scan_actions {
    ASSERT1(m_scanner != NULL);
    return m_scanner->Scan();
}


%target.cpp.generate_debug_spew_code
%target.cpp.debug_spew_prefix {"DataFile::Parser" << (m_scanner->GetFiLoc().IsValid() ? " ("+m_scanner->GetFiLoc().AsString()+")" : g_empty_string) << ":"}
%target.cpp.dont_generate_timestamps


%terminal BAD_TOKEN
%terminal BOOLEAN %type.cpp "Boolean *"
%terminal SINT32 %type.cpp "SignedInteger *"
%terminal UINT32 %type.cpp "UnsignedInteger *"
%terminal FLOATY %type.cpp "Floaty *"
%terminal CHARACTER %type.cpp "Character *"
%terminal STRING_FRAGMENT %type.cpp "String *"
%terminal IDENTIFIER %type.cpp "String *"
%terminal ';' ',' '+' '{' '}' '[' ']'

%default_parse_nonterminal data_file

%%

%nonterminal data_file %type.cpp "Structure *"
:
    element_list:element_list
    %target.cpp {
        ASSERT1(element_list != NULL);
        return element_list;
    }
|
    %error
    %target.cpp {
        EmitError("general syntax error", FL);
        return new Structure();
    }
;

%nonterminal element_list %type.cpp "Structure *"
:
    element_list:element_list element:element
    %target.cpp {
        ASSERT1(element_list != NULL);

        if (element != NULL)
        {
            try
            {
                element_list->AddKeyPair(element);
            }
            catch (std::string const &exception)
            {
                EmitError(exception, FL);
                Delete(element);
            }
        }
        return element_list;
    }
|
    // empty reduction rule
    %target.cpp {
        return new Structure();
    }
;

%nonterminal element %type.cpp "KeyPair *"
:
    IDENTIFIER:key value:value ';'
    %target.cpp {
        ASSERT1(key != NULL);
        if (value == NULL)
        {
            Delete(key);
            return NULL;
        }

        KeyPair *key_pair = new KeyPair(key->Get(), value);
        Delete(key);
        return key_pair;
    }
|
    IDENTIFIER:key %error ';'
    %target.cpp {
        ASSERT1(key != NULL);
        std::ostringstream out;
        out << "syntax error in element with key \"" << key->Get() << "\"";
        EmitError(out.str(), FL);
        Delete(key);
        return NULL;
    }
|
    %error ';'
    %target.cpp {
        EmitError("syntax error in element", FL);
        return NULL;
    }
;

%nonterminal structure %type.cpp "Structure *"
:
    '{' element_list:element_list '}'
    %target.cpp {
        ASSERT1(element_list != NULL);
        return element_list;
    }
|
    '{' %error '}'
    %target.cpp {
        EmitError("syntax error in structure", FL);
        return new Structure();
    }
;

%nonterminal array %type.cpp "Array *"
:
    '[' value_list:value_list ']'
    %target.cpp {
        ASSERT1(value_list != NULL);
        return value_list;
    }
|
    '[' value_list:value_list ',' ']'
    %target.cpp {
        ASSERT1(value_list != NULL);
        return value_list;
    }
|
    '[' ']'
    %target.cpp {
        return new Array();
    }
|
    '[' %error ']'
    %target.cpp {
        EmitError("syntax error in array", FL);
        return NULL;
    }
;

%nonterminal value_list %type.cpp "Array *"
:
    value_list:value_list ',' value:value
    %target.cpp {
        ASSERT1(value_list != NULL);
        if (value != NULL)
        {
            try
            {
                value_list->AppendValue(value);
            }
            catch (std::string const &exception)
            {
                EmitError(exception, FL);
                Delete(value);
            }
        }
        return value_list;
    }
|
    value:value
    %target.cpp {
        Array *value_list = new Array();
        if (value != NULL)
        {
            try
            {
                value_list->AppendValue(value);
            }
            catch (std::string const &)
            {
                ASSERT1(false && "this should never happen");
                Delete(value);
            }
        }
        return value_list;
    }
;

%nonterminal value %type.cpp "Value *"
:
    BOOLEAN:value %target.cpp { return value; }
|   SINT32:value %target.cpp { return value; }
|   UINT32:value %target.cpp { return value; }
|   FLOATY:value %target.cpp { return value; }
|   CHARACTER:value %target.cpp { return value; }
|   string:value %target.cpp { return value; }
|   structure:value %target.cpp { return value; }
|   array:value %target.cpp { return value; }
/*
|   %error %target.cpp { EmitError("syntax error in value", FL); return NULL; }
*/
;

%nonterminal string %type.cpp "String *"
:
    string:string '+' STRING_FRAGMENT:string_fragment
    %target.cpp {
        ASSERT1(string != NULL);
        ASSERT1(string_fragment != NULL);
        string->AppendString(string_fragment->Get());
        Delete(string_fragment);
        return string;
    }
|
    STRING_FRAGMENT:string_fragment
    %target.cpp {
        ASSERT1(string_fragment != NULL);
        return string_fragment;
    }
|
    string:string STRING_FRAGMENT:string_fragment
    %target.cpp {
        ASSERT1(string != NULL);
        ASSERT1(string_fragment != NULL);
        string->AppendString(string_fragment->Get());
        Delete(string_fragment);
        EmitError("use + to concatenate strings (or did you forget a comma?)", FL);
        return string;
    }
;
