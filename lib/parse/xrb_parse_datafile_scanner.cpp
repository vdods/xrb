// DO NOT MODIFY ! DO NOT MODIFY ! DO NOT MODIFY ! DO NOT MODIFY ! DO NOT MODIFY
// xrb_parse_datafile_scanner.cpp generated by reflex
// from xrb_parse_datafile_scanner.reflex using reflex.cpp.targetspec and reflex.cpp.implementation.codespec
// DO NOT MODIFY ! DO NOT MODIFY ! DO NOT MODIFY ! DO NOT MODIFY ! DO NOT MODIFY

#include "xrb_parse_datafile_scanner.hpp"

#include <iostream>

#define REFLEX_CPP_DEBUG_CODE_(spew_code) if (DebugSpew()) { spew_code; }


#line 71 "xrb_parse_datafile_scanner.reflex"

#include <errno.h>
#include <stdlib.h>

#include "xrb_emptystring.hpp"
#include "xrb_filesystem.hpp"
#include "xrb_parse_datafile_value.hpp"
#include "xrb_parse_util.hpp"
#include "xrb_singleton.hpp"

namespace Xrb {
namespace Parse {
namespace DataFile {

bool Scanner::Open (std::string const &input_path)
{
    ASSERT1(!m_input.is_open() && "you must call Close() first");
    ASSERT1(!m_filoc.IsValid());
    ASSERT1(m_string_literal == NULL);

    std::string input_os_path;
    try {
        input_os_path = Singleton::FileSystem().OsPath(input_path, FileSystem::READ_ONLY);
    } catch (Exception const &e) {
        return false; // TODO: better error handling
    }

    m_input.open(input_os_path.c_str());
    m_input.unsetf(std::ios_base::skipws);
    if (m_input.is_open())
    {
        IstreamIterator(std::istream_iterator<char>(m_input));
        m_filoc.SetFilename(input_os_path);
        m_filoc.SetLineNumber(1);
    }
    else
    {
        m_filoc = FiLoc::ms_invalid;
    }
    m_warnings_were_encountered = false;
    m_errors_were_encountered = false;
    return m_input.is_open();
}

void Scanner::Close ()
{
    m_filoc = FiLoc::ms_invalid;
    if (m_input.is_open())
    {
        m_input.close();
        IstreamIterator(std::istream_iterator<char>());
    }
    ResetForNewInput();
}

void Scanner::EmitWarning (std::string const &message, FiLoc const &filoc)
{
    ASSERT1(m_filoc.IsValid());
    ASSERT1(m_input.is_open());
    std::cerr << filoc << ": warning: " << message << std::endl;
    m_warnings_were_encountered = true;
}

void Scanner::EmitError (std::string const &message, FiLoc const &filoc)
{
    ASSERT1(m_filoc.IsValid());
    ASSERT1(m_input.is_open());
    std::cerr << filoc << ": error: " << message << std::endl;
    m_errors_were_encountered = true;
}

Parser::Token Scanner::ParseIntegerLiteral (char const *s, bool is_signed, Uint32 radix)
{
    ASSERT1(s != NULL);
    ASSERT1(radix == 2 || radix == 8 || radix == 10 || radix == 16);
    if (is_signed)
    {
        Sint32 value = strtol(s, NULL, radix);
        if (errno == ERANGE)
            EmitError("signed integer literal out of range", m_filoc);
        return Parser::Token(Parser::Terminal::SINT32, new SignedInteger(value));
    }
    else
    {
        Uint32 value = strtoul(s, NULL, radix);
        if (errno == ERANGE)
            EmitError("unsigned integer literal out of range", m_filoc);
        return Parser::Token(Parser::Terminal::UINT32, new UnsignedInteger(value));
    }
}

void Scanner::IncrementLineNumber (Uint32 by_value)
{
    m_filoc.IncrementLineNumber(by_value);
}

#line 110 "xrb_parse_datafile_scanner.cpp"

Scanner::Scanner ()
    :
    ReflexCpp_::AutomatonApparatus_FastAndBig_Noninteractive_(
        ms_state_table_,
        ms_state_count_,
        ms_transition_table_,
        ms_transition_count_,
        ms_accept_handler_count_),

#line 166 "xrb_parse_datafile_scanner.reflex"

    m_filoc(FiLoc::ms_invalid)

#line 125 "xrb_parse_datafile_scanner.cpp"

{
    DebugSpew(false);


#line 169 "xrb_parse_datafile_scanner.reflex"

//     DebugSpew(true);
    m_string_literal = NULL;
    m_warnings_were_encountered = false;
    m_errors_were_encountered = false;

#line 138 "xrb_parse_datafile_scanner.cpp"

    ResetForNewInput();
}

Scanner::~Scanner ()
{

#line 175 "xrb_parse_datafile_scanner.reflex"

    Close();

#line 150 "xrb_parse_datafile_scanner.cpp"
}

Scanner::StateMachine::Name Scanner::CurrentStateMachine () const
{
    assert(InitialState_() != NULL);
    BarfCpp_::Size initial_node_index = InitialState_() - ms_state_table_;
    assert(initial_node_index < ms_state_count_);
    switch (initial_node_index)
    {
        default: assert(false && "invalid initial node index -- this should never happen"); return StateMachine::START_;
        case 0: return StateMachine::BLOCK_COMMENT;
        case 10: return StateMachine::CHAR_LITERAL_END;
        case 17: return StateMachine::CHAR_LITERAL_GUTS;
        case 30: return StateMachine::MAIN;
        case 71: return StateMachine::STRING_LITERAL_GUTS;
    }
}

void Scanner::SwitchToStateMachine (StateMachine::Name state_machine)
{
    assert(
        state_machine == StateMachine::BLOCK_COMMENT ||
        state_machine == StateMachine::CHAR_LITERAL_END ||
        state_machine == StateMachine::CHAR_LITERAL_GUTS ||
        state_machine == StateMachine::MAIN ||
        state_machine == StateMachine::STRING_LITERAL_GUTS ||
        (false && "invalid StateMachine::Name"));
    REFLEX_CPP_DEBUG_CODE_(
        std::cerr << 
#line 204 "xrb_parse_datafile_scanner.reflex"
"DataFile::Scanner" << (m_filoc.IsValid() ? " ("+m_filoc.AsString()+")" : g_empty_string) << ":"
#line 182 "xrb_parse_datafile_scanner.cpp"
 << " switching to state machine "
                  << ms_state_machine_name_[state_machine];
        if (ms_state_machine_mode_flags_[state_machine] != 0)
        {
            if ((ms_state_machine_mode_flags_[state_machine] & AutomatonApparatus_FastAndBig_Noninteractive_::MF_CASE_INSENSITIVE_) != 0)
                std::cerr << " %case_insensitive";
            if ((ms_state_machine_mode_flags_[state_machine] & AutomatonApparatus_FastAndBig_Noninteractive_::MF_UNGREEDY_) != 0)
                std::cerr << " %ungreedy";
        }
        std::cerr << std::endl)
    InitialState_(ms_state_table_ + ms_state_machine_start_state_index_[state_machine]);
    ModeFlags_(ms_state_machine_mode_flags_[state_machine]);
    assert(CurrentStateMachine() == state_machine);
}

void Scanner::ResetForNewInput ()
{
    REFLEX_CPP_DEBUG_CODE_(
        std::cerr << 
#line 204 "xrb_parse_datafile_scanner.reflex"
"DataFile::Scanner" << (m_filoc.IsValid() ? " ("+m_filoc.AsString()+")" : g_empty_string) << ":"
#line 204 "xrb_parse_datafile_scanner.cpp"
 << " executing reset-for-new-input actions and switching to state machine "
                  << ms_state_machine_name_[StateMachine::START_];
        if (ms_state_machine_mode_flags_[StateMachine::START_] != 0)
        {
            if ((ms_state_machine_mode_flags_[StateMachine::START_] & AutomatonApparatus_FastAndBig_Noninteractive_::MF_CASE_INSENSITIVE_) != 0)
                std::cerr << " %case_insensitive";
            if ((ms_state_machine_mode_flags_[StateMachine::START_] & AutomatonApparatus_FastAndBig_Noninteractive_::MF_UNGREEDY_) != 0)
                std::cerr << " %ungreedy";
        }
        std::cerr << std::endl)
    ReflexCpp_::AutomatonApparatus_FastAndBig_Noninteractive_::ResetForNewInput_(ms_state_table_ + ms_state_machine_start_state_index_[StateMachine::START_], ms_state_machine_mode_flags_[StateMachine::START_]);
    assert(CurrentStateMachine() == StateMachine::START_);


#line 194 "xrb_parse_datafile_scanner.reflex"

    m_filoc = FiLoc::ms_invalid;
    delete m_string_literal;
    m_string_literal = NULL;
    m_warnings_were_encountered = false;
    m_errors_were_encountered = false;

#line 227 "xrb_parse_datafile_scanner.cpp"
}

Parser::Token Scanner::Scan () throw()
{

    std::string work_string;
    // this is the main scanner loop.  it only breaks when an accept handler
    // returns or after the unmatched character handler, if certain conditions
    // exist (see comments below).
    while (true)
    {
        // clear the previous accepted/rejected string.
        work_string.clear();
        // reset the char buffer and other stuff
        PrepareToScan_();

        bool was_at_end_of_input_ = IsAtEndOfInput();

        BarfCpp_::Uint32 accept_handler_index_ = RunDfa_(work_string);
        // if no valid accept_handler_index_ was returned, then work_string
        // was filled with everything up to the char after the keep_string
        // cursor (i.e. the rejected atom).
        if (accept_handler_index_ >= ms_accept_handler_count_)
        {
            // if we were already at the end of input and no
            // rule was matched, break out of the loop.
            if (was_at_end_of_input_)
                break;

            std::string &rejected_string = work_string;
            BarfCpp_::Uint8 rejected_atom = rejected_string.empty() ? '\0' : *rejected_string.rbegin();

            REFLEX_CPP_DEBUG_CODE_(
                std::cerr << 
#line 204 "xrb_parse_datafile_scanner.reflex"
"DataFile::Scanner" << (m_filoc.IsValid() ? " ("+m_filoc.AsString()+")" : g_empty_string) << ":"
#line 264 "xrb_parse_datafile_scanner.cpp"
 << " rejecting string ";
                PrintString_(rejected_string);
                std::cerr << " (rejected_atom is \'";
                PrintAtom_(rejected_atom);
                std::cerr << "\')" << std::endl)

            // execute the rejection actions.  the do/while loop is so that a
            // break statement inside the rejection actions doesn't break out
            // of the main scanner loop.
            do
            {

#line 190 "xrb_parse_datafile_scanner.reflex"

    ASSERT1(false && "this should never happen");
    EmitError("unrecognized character " + CharLiteral(rejected_atom), m_filoc);

#line 282 "xrb_parse_datafile_scanner.cpp"

            }
            while (false);
        }
        // otherwise, call the appropriate accept handler code.
        else
        {
            std::string &accepted_string = work_string;

            REFLEX_CPP_DEBUG_CODE_(
                std::cerr << 
#line 204 "xrb_parse_datafile_scanner.reflex"
"DataFile::Scanner" << (m_filoc.IsValid() ? " ("+m_filoc.AsString()+")" : g_empty_string) << ":"
#line 296 "xrb_parse_datafile_scanner.cpp"
 << " accepting string ";
                PrintString_(accepted_string);
                std::cerr << " in state machine " << ms_state_machine_name_[CurrentStateMachine()]
                          << " using regex (" << ms_accept_handler_regex_[accept_handler_index_] << ")" << std::endl)

            // execute the appropriate accept handler.
            // the accepted string is in accepted_string.
            switch (accept_handler_index_)
            {
                case 0:
                {

#line 380 "xrb_parse_datafile_scanner.reflex"

        IncrementLineNumber(NewlineCount(accepted_string));
        SwitchToStateMachine(StateMachine::MAIN);
    
#line 314 "xrb_parse_datafile_scanner.cpp"

                }
                break;

                case 1:
                {

#line 386 "xrb_parse_datafile_scanner.reflex"

        IncrementLineNumber(NewlineCount(accepted_string));
        EmitWarning("unterminated block comment", GetFiLoc());
        return Parser::Terminal::END_;
    
#line 328 "xrb_parse_datafile_scanner.cpp"

                }
                break;

                case 2:
                {

#line 459 "xrb_parse_datafile_scanner.reflex"

        ASSERT1(m_char_literal != NULL);
        SwitchToStateMachine(StateMachine::MAIN);
        Character *char_literal = m_char_literal;
        m_char_literal = NULL;
        return Parser::Token(Parser::Terminal::CHARACTER, char_literal);
    
#line 344 "xrb_parse_datafile_scanner.cpp"

                }
                break;

                case 3:
                {

#line 468 "xrb_parse_datafile_scanner.reflex"

        EmitError("unterminated character literal", GetFiLoc());
        ASSERT1(m_char_literal != NULL);
        delete m_char_literal;
        m_char_literal = NULL;
        SwitchToStateMachine(StateMachine::MAIN);
        return Parser::Terminal::END_;
    
#line 361 "xrb_parse_datafile_scanner.cpp"

                }
                break;

                case 4:
                {

#line 478 "xrb_parse_datafile_scanner.reflex"

        EmitError("malformed character literal", GetFiLoc());
        if (accepted_string[0] == '\n')
            IncrementLineNumber();
        ASSERT1(m_char_literal != NULL);
        delete m_char_literal;
        m_char_literal = NULL;
        SwitchToStateMachine(StateMachine::MAIN);
        return Parser::Terminal::BAD_TOKEN;
    
#line 380 "xrb_parse_datafile_scanner.cpp"

                }
                break;

                case 5:
                {

#line 396 "xrb_parse_datafile_scanner.reflex"

        ASSERT1(accepted_string.length() >= 2);
        ASSERT1(accepted_string[0] == '\\');
        Uint32 value = strtol(accepted_string.c_str()+1, NULL, 8);
        if (value >= 0x100)
            EmitError("octal character literal value out of range (" + accepted_string + ")", GetFiLoc());
        ASSERT1(m_char_literal == NULL);
        m_char_literal = new Character(value);
        SwitchToStateMachine(StateMachine::CHAR_LITERAL_END);
    
#line 399 "xrb_parse_datafile_scanner.cpp"

                }
                break;

                case 6:
                {

#line 408 "xrb_parse_datafile_scanner.reflex"

        ASSERT1(accepted_string.length() >= 3);
        ASSERT1(accepted_string[0] == '\\');
        ASSERT1(accepted_string[1] == 'x');
        Uint32 value = strtol(accepted_string.c_str()+2, NULL, 16);
        if (value >= 0x100)
            EmitError("hexadecimal character literal value out of range (" + accepted_string + ")", GetFiLoc());
        ASSERT1(m_char_literal == NULL);
        m_char_literal = new Character(value);
        SwitchToStateMachine(StateMachine::CHAR_LITERAL_END);
    
#line 419 "xrb_parse_datafile_scanner.cpp"

                }
                break;

                case 7:
                {

#line 421 "xrb_parse_datafile_scanner.reflex"

        ASSERT1(accepted_string.length() == 2);
        ASSERT1(accepted_string[0] == '\\');
        ASSERT1(m_char_literal == NULL);
        m_char_literal = new Character(accepted_string[1]);
        m_char_literal->Escape();
        SwitchToStateMachine(StateMachine::CHAR_LITERAL_END);
    
#line 436 "xrb_parse_datafile_scanner.cpp"

                }
                break;

                case 8:
                {

#line 431 "xrb_parse_datafile_scanner.reflex"

        ASSERT1(accepted_string.length() == 1);
        ASSERT1(m_char_literal == NULL);
        m_char_literal = new Character(accepted_string[0]);
        SwitchToStateMachine(StateMachine::CHAR_LITERAL_END);
    
#line 451 "xrb_parse_datafile_scanner.cpp"

                }
                break;

                case 9:
                {

#line 439 "xrb_parse_datafile_scanner.reflex"

        EmitError("unterminated character literal", GetFiLoc());
        ASSERT1(m_char_literal == NULL);
        return Parser::Terminal::END_;
    
#line 465 "xrb_parse_datafile_scanner.cpp"

                }
                break;

                case 10:
                {

#line 446 "xrb_parse_datafile_scanner.reflex"

        EmitError("unexpected character " + CharLiteral(accepted_string[0]) + " in character literal", GetFiLoc());
        if (accepted_string[0] == '\n')
            IncrementLineNumber();
        ASSERT1(m_char_literal == NULL);
        m_char_literal = new Character(accepted_string[0]);
        SwitchToStateMachine(StateMachine::CHAR_LITERAL_END);
    
#line 482 "xrb_parse_datafile_scanner.cpp"

                }
                break;

                case 11:
                {

#line 262 "xrb_parse_datafile_scanner.reflex"

        SwitchToStateMachine(StateMachine::BLOCK_COMMENT);
    
#line 494 "xrb_parse_datafile_scanner.cpp"

                }
                break;

                case 12:
                {

#line 267 "xrb_parse_datafile_scanner.reflex"
 
#line 504 "xrb_parse_datafile_scanner.cpp"

                }
                break;

                case 13:
                {

#line 270 "xrb_parse_datafile_scanner.reflex"

        SwitchToStateMachine(StateMachine::CHAR_LITERAL_GUTS);
    
#line 516 "xrb_parse_datafile_scanner.cpp"

                }
                break;

                case 14:
                {

#line 275 "xrb_parse_datafile_scanner.reflex"

        ASSERT1(m_string_literal == NULL);
        m_string_literal = new String();
        m_string_literal_starting_line_number = m_filoc.LineNumber();
        SwitchToStateMachine(StateMachine::STRING_LITERAL_GUTS);
    
#line 531 "xrb_parse_datafile_scanner.cpp"

                }
                break;

                case 15:
                {

#line 283 "xrb_parse_datafile_scanner.reflex"

        ASSERT1(accepted_string.length() == 1);
        return Parser::Token(accepted_string[0]);
    
#line 544 "xrb_parse_datafile_scanner.cpp"

                }
                break;

                case 16:
                {

#line 289 "xrb_parse_datafile_scanner.reflex"

        // check if it matches any keywords
        std::string lowercase_text(accepted_string);
        Util::MakeLowercase(lowercase_text);
        if (lowercase_text == "true")
            return Parser::Token(Parser::Terminal::BOOLEAN, new Boolean(true));
        else if (lowercase_text == "false")
            return Parser::Token(Parser::Terminal::BOOLEAN, new Boolean(false));
        else
            return Parser::Token(Parser::Terminal::IDENTIFIER, new String(accepted_string));
    
#line 564 "xrb_parse_datafile_scanner.cpp"

                }
                break;

                case 17:
                {

#line 302 "xrb_parse_datafile_scanner.reflex"

        ASSERT1(accepted_string.length() >= 3); // must be at least "0b" followed by a binary digit
        bool is_signed = accepted_string[0] == '+' || accepted_string[0] == '-';
        ASSERT1((is_signed && accepted_string[1] == '0' && (accepted_string[2] == 'b' || accepted_string[2] == 'B'))
                ||
                (!is_signed && accepted_string[0] == '0' && (accepted_string[1] == 'b' || accepted_string[1] == 'B')));
        // if it's signed, stick the sign in front of the digits
        if (is_signed)
            accepted_string[2] = accepted_string[0];
        // start at the sign or the unsigned digits
        char const *s = accepted_string.c_str() + 2;
        return ParseIntegerLiteral(s, is_signed, 2);
    
#line 586 "xrb_parse_datafile_scanner.cpp"

                }
                break;

                case 18:
                {

#line 317 "xrb_parse_datafile_scanner.reflex"

        ASSERT1(accepted_string.length() >= 2); // must be at least "0" followed by an octal digit
        bool is_signed = accepted_string[0] == '+' || accepted_string[0] == '-';
        ASSERT1((is_signed && accepted_string[1] == '0')
                ||
                (!is_signed && accepted_string[0] == '0'));
        // if it's signed, stick the sign in front of the digits
        if (is_signed)
            accepted_string[1] = accepted_string[0];
        // start at the sign or the unsigned digits
        char const *s = accepted_string.c_str() + 1;
        return ParseIntegerLiteral(s, is_signed, 8);
    
#line 608 "xrb_parse_datafile_scanner.cpp"

                }
                break;

                case 19:
                {

#line 332 "xrb_parse_datafile_scanner.reflex"

        ASSERT1(accepted_string.length() >= 1); // must be at least a single decimal digit
        bool is_signed = accepted_string[0] == '+' || accepted_string[0] == '-';
        return ParseIntegerLiteral(accepted_string.c_str(), is_signed, 10);
    
#line 622 "xrb_parse_datafile_scanner.cpp"

                }
                break;

                case 20:
                {

#line 339 "xrb_parse_datafile_scanner.reflex"

        ASSERT1(accepted_string.length() >= 3); // must be at least "0x" followed by a hexadecimal digit
        bool is_signed = accepted_string[0] == '+' || accepted_string[0] == '-';
        ASSERT1((is_signed && accepted_string[1] == '0' && (accepted_string[2] == 'x' || accepted_string[2] == 'X'))
                ||
                (!is_signed && accepted_string[0] == '0' && (accepted_string[1] == 'x' || accepted_string[1] == 'X')));
        // if it's signed, stick the sign in front of the digits
        if (is_signed)
            accepted_string[2] = accepted_string[0];
        // start at the sign or the unsigned digits
        char const *s = accepted_string.c_str() + 2;
        return ParseIntegerLiteral(s, is_signed, 16);
    
#line 644 "xrb_parse_datafile_scanner.cpp"

                }
                break;

                case 21:
                {

#line 354 "xrb_parse_datafile_scanner.reflex"

        Float value = strtof(accepted_string.c_str(), NULL);
        if (errno == ERANGE)
            EmitError("floating point literal out of range", m_filoc);
        return Parser::Token(Parser::Terminal::FLOATY, new Floaty(value));
    
#line 659 "xrb_parse_datafile_scanner.cpp"

                }
                break;

                case 22:
                {

#line 362 "xrb_parse_datafile_scanner.reflex"
 
#line 669 "xrb_parse_datafile_scanner.cpp"

                }
                break;

                case 23:
                {

#line 365 "xrb_parse_datafile_scanner.reflex"
 IncrementLineNumber(); 
#line 679 "xrb_parse_datafile_scanner.cpp"

                }
                break;

                case 24:
                {

#line 368 "xrb_parse_datafile_scanner.reflex"
 return Parser::Terminal::END_; 
#line 689 "xrb_parse_datafile_scanner.cpp"

                }
                break;

                case 25:
                {

#line 371 "xrb_parse_datafile_scanner.reflex"

        EmitError("unexpected character " + CharLiteral(accepted_string[0]), GetFiLoc());
        return Parser::Terminal::BAD_TOKEN;
    
#line 702 "xrb_parse_datafile_scanner.cpp"

                }
                break;

                case 26:
                {

#line 493 "xrb_parse_datafile_scanner.reflex"

        ASSERT1(m_string_literal != NULL);
        IncrementLineNumber(NewlineCount(accepted_string));
        // get rid of the trailing endquote
        ASSERT1(accepted_string.length() >= 1);
        accepted_string.resize(accepted_string.length()-1);
        // escape the string in-place and handle the return code
        EscapeStringStatus status = EscapeString(accepted_string);
        switch (status.m_return_code)
        {
            case ESRC_SUCCESS:
                // awesome
                break;

            case ESRC_UNEXPECTED_EOI:
                ASSERT1(false && "the formulation of the regex should prevent this");
                break;

            case ESRC_MALFORMED_HEX_CHAR:
                EmitError(
                    "\\x with no trailing hex digits",
                    FiLoc(m_filoc.Filename(),
                          m_string_literal_starting_line_number + status.m_line_number_offset));
                break;

            case ESRC_HEX_ESCAPE_SEQUENCE_OUT_OF_RANGE:
            case ESRC_OCTAL_ESCAPE_SEQUENCE_OUT_OF_RANGE:
                EmitError(
                    "hex/octal escape sequence out of range",
                    FiLoc(m_filoc.Filename(),
                          m_string_literal_starting_line_number + status.m_line_number_offset));
                break;
        }
        m_string_literal->AppendString(accepted_string);
        SwitchToStateMachine(StateMachine::MAIN);
        String *string_literal = m_string_literal;
        m_string_literal = NULL;
        return Parser::Token(Parser::Terminal::STRING_FRAGMENT, string_literal);
    
#line 750 "xrb_parse_datafile_scanner.cpp"

                }
                break;

                case 27:
                {

#line 534 "xrb_parse_datafile_scanner.reflex"

        EmitError("unterminated string literal", GetFiLoc());
        IncrementLineNumber(NewlineCount(accepted_string));
        ASSERT1(m_string_literal != NULL);
        delete m_string_literal;
        m_string_literal = NULL;
        return Parser::Terminal::END_;
    
#line 767 "xrb_parse_datafile_scanner.cpp"

                }
                break;

                default: assert(false && "this should never happen"); break;
            }
        }
    }


#line 178 "xrb_parse_datafile_scanner.reflex"

    ASSERT1(false && "you didn't handle EOF properly");
    return Parser::Terminal::END_;

#line 783 "xrb_parse_datafile_scanner.cpp"
}

void Scanner::KeepString ()
{
    REFLEX_CPP_DEBUG_CODE_(std::cerr << 
#line 204 "xrb_parse_datafile_scanner.reflex"
"DataFile::Scanner" << (m_filoc.IsValid() ? " ("+m_filoc.AsString()+")" : g_empty_string) << ":"
#line 791 "xrb_parse_datafile_scanner.cpp"
 << " keeping string" << std::endl)
    AutomatonApparatus_FastAndBig_Noninteractive_::KeepString();
}

void Scanner::Unaccept (BarfCpp_::Uint32 unaccept_char_count)
{
    REFLEX_CPP_DEBUG_CODE_(std::cerr << 
#line 204 "xrb_parse_datafile_scanner.reflex"
"DataFile::Scanner" << (m_filoc.IsValid() ? " ("+m_filoc.AsString()+")" : g_empty_string) << ":"
#line 801 "xrb_parse_datafile_scanner.cpp"
 << " unaccepting " << unaccept_char_count << " char" << (unaccept_char_count == 1 ? '\0' : 's') << std::endl)
    AutomatonApparatus_FastAndBig_Noninteractive_::Unaccept(unaccept_char_count);
}

void Scanner::Unreject (BarfCpp_::Uint32 unreject_char_count)
{
    REFLEX_CPP_DEBUG_CODE_(std::cerr << 
#line 204 "xrb_parse_datafile_scanner.reflex"
"DataFile::Scanner" << (m_filoc.IsValid() ? " ("+m_filoc.AsString()+")" : g_empty_string) << ":"
#line 811 "xrb_parse_datafile_scanner.cpp"
 << " unrejecting " << unreject_char_count << " char" << (unreject_char_count == 1 ? '\0' : 's') << std::endl)
    AutomatonApparatus_FastAndBig_Noninteractive_::Unreject(unreject_char_count);
}

// ///////////////////////////////////////////////////////////////////////
// begin internal reflex-generated parser guts -- don't use
// ///////////////////////////////////////////////////////////////////////

void Scanner::PrintAtom_ (BarfCpp_::Uint8 atom)
{
    if (atom == '\\')                    std::cerr << "\\\\";
    else if (atom == '"')                std::cerr << "\\\"";
    else if (atom >= ' ' && atom <= '~') std::cerr << atom;
    else if (atom == '\n')               std::cerr << "\\n";
    else if (atom == '\t')               std::cerr << "\\t";
    else if (atom == '\0')               std::cerr << "\\0";
    else
    {
        std::cerr.width(2);
        std::cerr << "\\x" << std::hex << std::uppercase << BarfCpp_::Uint16(atom);
        std::cerr.width(1);
    }
}

void Scanner::PrintString_ (std::string const &s)
{
    // save the existing std::cerr properties for later restoration
    std::ios_base::fmtflags saved_stream_flags = std::cerr.flags();
    char saved_stream_fill = std::cerr.fill();
    std::streamsize saved_stream_width = std::cerr.width();
    std::streamsize saved_stream_precision = std::cerr.precision();

    // clear all format flags to a neutral state
    std::cerr.unsetf(
        std::ios_base::boolalpha|std::ios_base::dec|std::ios_base::fixed|
        std::ios_base::hex|std::ios_base::internal|std::ios_base::left|
        std::ios_base::oct|std::ios_base::right|std::ios_base::scientific|
        std::ios_base::showbase|std::ios_base::showpoint|std::ios_base::showpos|
        std::ios_base::skipws|std::ios_base::unitbuf|std::ios_base::uppercase|
        std::ios_base::adjustfield|std::ios_base::basefield|std::ios_base::floatfield);
    // the '0' char is used hex escape chars, which always have width 2
    std::cerr.fill('0');

    std::cerr << '"';
    for (std::string::size_type i = 0; i < s.size(); ++i)
        PrintAtom_(s[i]);
    std::cerr << '"';

    // restore the saved std::cerr properties
    std::cerr.setf(saved_stream_flags);
    std::cerr.fill(saved_stream_fill);
    std::cerr.width(saved_stream_width);
    std::cerr.precision(saved_stream_precision);
}

BarfCpp_::Uint32 const Scanner::ms_state_machine_start_state_index_[] =
{
    0,
    10,
    17,
    30,
    71,
};
BarfCpp_::Uint8 const Scanner::ms_state_machine_mode_flags_[] =
{
    2,
    0,
    0,
    0,
    2,
};
char const *const Scanner::ms_state_machine_name_[] =
{
    "BLOCK_COMMENT",
    "CHAR_LITERAL_END",
    "CHAR_LITERAL_GUTS",
    "MAIN",
    "STRING_LITERAL_GUTS",
};
BarfCpp_::Uint32 const Scanner::ms_state_machine_count_ = sizeof(Scanner::ms_state_machine_name_) / sizeof(*Scanner::ms_state_machine_name_);

// the order of the states indicates priority (only for accept states).
// the lower the state's index in this array, the higher its priority.
ReflexCpp_::AutomatonApparatus_FastAndBig_Noninteractive_::DfaState_ const Scanner::ms_state_table_[] =
{
    { 28, 32, 0, ReflexCpp_::AutomatonApparatus_FastAndBig_Noninteractive_::DfaTransition_::CONDITIONAL, 0 },
    { 28, 255, 32, ReflexCpp_::AutomatonApparatus_FastAndBig_Noninteractive_::DfaTransition_::INPUT_ATOM, 1 },
    { 28, 32, 287, ReflexCpp_::AutomatonApparatus_FastAndBig_Noninteractive_::DfaTransition_::CONDITIONAL, 0 },
    { 1, 255, 319, ReflexCpp_::AutomatonApparatus_FastAndBig_Noninteractive_::DfaTransition_::INPUT_ATOM, 1 },
    { 28, 32, 574, ReflexCpp_::AutomatonApparatus_FastAndBig_Noninteractive_::DfaTransition_::CONDITIONAL, 0 },
    { 28, 255, 606, ReflexCpp_::AutomatonApparatus_FastAndBig_Noninteractive_::DfaTransition_::INPUT_ATOM, 1 },
    { 0, 32, 861, ReflexCpp_::AutomatonApparatus_FastAndBig_Noninteractive_::DfaTransition_::CONDITIONAL, 0 },
    { 0, 255, 893, ReflexCpp_::AutomatonApparatus_FastAndBig_Noninteractive_::DfaTransition_::INPUT_ATOM, 1 },
    { 0, 255, 1148, ReflexCpp_::AutomatonApparatus_FastAndBig_Noninteractive_::DfaTransition_::INPUT_ATOM, 1 },
    { 1, 255, 1403, ReflexCpp_::AutomatonApparatus_FastAndBig_Noninteractive_::DfaTransition_::INPUT_ATOM, 1 },
    { 28, 32, 1658, ReflexCpp_::AutomatonApparatus_FastAndBig_Noninteractive_::DfaTransition_::CONDITIONAL, 0 },
    { 28, 255, 1690, ReflexCpp_::AutomatonApparatus_FastAndBig_Noninteractive_::DfaTransition_::INPUT_ATOM, 1 },
    { 4, 0, 1945, ReflexCpp_::AutomatonApparatus_FastAndBig_Noninteractive_::DfaTransition_::INPUT_ATOM, 0 },
    { 2, 0, 1945, ReflexCpp_::AutomatonApparatus_FastAndBig_Noninteractive_::DfaTransition_::INPUT_ATOM, 0 },
    { 4, 32, 1945, ReflexCpp_::AutomatonApparatus_FastAndBig_Noninteractive_::DfaTransition_::CONDITIONAL, 0 },
    { 3, 0, 1977, ReflexCpp_::AutomatonApparatus_FastAndBig_Noninteractive_::DfaTransition_::INPUT_ATOM, 0 },
    { 3, 255, 1977, ReflexCpp_::AutomatonApparatus_FastAndBig_Noninteractive_::DfaTransition_::INPUT_ATOM, 1 },
    { 28, 32, 2232, ReflexCpp_::AutomatonApparatus_FastAndBig_Noninteractive_::DfaTransition_::CONDITIONAL, 0 },
    { 28, 255, 2264, ReflexCpp_::AutomatonApparatus_FastAndBig_Noninteractive_::DfaTransition_::INPUT_ATOM, 1 },
    { 10, 0, 2519, ReflexCpp_::AutomatonApparatus_FastAndBig_Noninteractive_::DfaTransition_::INPUT_ATOM, 0 },
    { 8, 0, 2519, ReflexCpp_::AutomatonApparatus_FastAndBig_Noninteractive_::DfaTransition_::INPUT_ATOM, 0 },
    { 10, 32, 2519, ReflexCpp_::AutomatonApparatus_FastAndBig_Noninteractive_::DfaTransition_::CONDITIONAL, 0 },
    { 10, 95, 2551, ReflexCpp_::AutomatonApparatus_FastAndBig_Noninteractive_::DfaTransition_::INPUT_ATOM, 32 },
    { 7, 0, 2646, ReflexCpp_::AutomatonApparatus_FastAndBig_Noninteractive_::DfaTransition_::INPUT_ATOM, 0 },
    { 5, 8, 2646, ReflexCpp_::AutomatonApparatus_FastAndBig_Noninteractive_::DfaTransition_::INPUT_ATOM, 48 },
    { 5, 8, 2654, ReflexCpp_::AutomatonApparatus_FastAndBig_Noninteractive_::DfaTransition_::INPUT_ATOM, 48 },
    { 7, 55, 2662, ReflexCpp_::AutomatonApparatus_FastAndBig_Noninteractive_::DfaTransition_::INPUT_ATOM, 48 },
    { 6, 55, 2717, ReflexCpp_::AutomatonApparatus_FastAndBig_Noninteractive_::DfaTransition_::INPUT_ATOM, 48 },
    { 9, 95, 2772, ReflexCpp_::AutomatonApparatus_FastAndBig_Noninteractive_::DfaTransition_::INPUT_ATOM, 32 },
    { 9, 255, 2867, ReflexCpp_::AutomatonApparatus_FastAndBig_Noninteractive_::DfaTransition_::INPUT_ATOM, 1 },
    { 28, 32, 3122, ReflexCpp_::AutomatonApparatus_FastAndBig_Noninteractive_::DfaTransition_::CONDITIONAL, 0 },
    { 28, 255, 3154, ReflexCpp_::AutomatonApparatus_FastAndBig_Noninteractive_::DfaTransition_::INPUT_ATOM, 1 },
    { 25, 0, 3409, ReflexCpp_::AutomatonApparatus_FastAndBig_Noninteractive_::DfaTransition_::INPUT_ATOM, 0 },
    { 22, 0, 3409, ReflexCpp_::AutomatonApparatus_FastAndBig_Noninteractive_::DfaTransition_::INPUT_ATOM, 0 },
    { 23, 0, 3409, ReflexCpp_::AutomatonApparatus_FastAndBig_Noninteractive_::DfaTransition_::INPUT_ATOM, 0 },
    { 14, 0, 3409, ReflexCpp_::AutomatonApparatus_FastAndBig_Noninteractive_::DfaTransition_::INPUT_ATOM, 0 },
    { 13, 0, 3409, ReflexCpp_::AutomatonApparatus_FastAndBig_Noninteractive_::DfaTransition_::INPUT_ATOM, 0 },
    { 25, 10, 3409, ReflexCpp_::AutomatonApparatus_FastAndBig_Noninteractive_::DfaTransition_::INPUT_ATOM, 48 },
    { 19, 75, 3419, ReflexCpp_::AutomatonApparatus_FastAndBig_Noninteractive_::DfaTransition_::INPUT_ATOM, 46 },
    { 28, 10, 3494, ReflexCpp_::AutomatonApparatus_FastAndBig_Noninteractive_::DfaTransition_::INPUT_ATOM, 48 },
    { 21, 54, 3504, ReflexCpp_::AutomatonApparatus_FastAndBig_Noninteractive_::DfaTransition_::INPUT_ATOM, 48 },
    { 28, 15, 3558, ReflexCpp_::AutomatonApparatus_FastAndBig_Noninteractive_::DfaTransition_::INPUT_ATOM, 43 },
    { 28, 10, 3573, ReflexCpp_::AutomatonApparatus_FastAndBig_Noninteractive_::DfaTransition_::INPUT_ATOM, 48 },
    { 21, 0, 3583, ReflexCpp_::AutomatonApparatus_FastAndBig_Noninteractive_::DfaTransition_::INPUT_ATOM, 0 },
    { 21, 10, 3583, ReflexCpp_::AutomatonApparatus_FastAndBig_Noninteractive_::DfaTransition_::INPUT_ATOM, 48 },
    { 18, 8, 3593, ReflexCpp_::AutomatonApparatus_FastAndBig_Noninteractive_::DfaTransition_::INPUT_ATOM, 48 },
    { 28, 2, 3601, ReflexCpp_::AutomatonApparatus_FastAndBig_Noninteractive_::DfaTransition_::INPUT_ATOM, 48 },
    { 17, 2, 3603, ReflexCpp_::AutomatonApparatus_FastAndBig_Noninteractive_::DfaTransition_::INPUT_ATOM, 48 },
    { 28, 15, 3605, ReflexCpp_::AutomatonApparatus_FastAndBig_Noninteractive_::DfaTransition_::INPUT_ATOM, 43 },
    { 28, 10, 3620, ReflexCpp_::AutomatonApparatus_FastAndBig_Noninteractive_::DfaTransition_::INPUT_ATOM, 48 },
    { 21, 10, 3630, ReflexCpp_::AutomatonApparatus_FastAndBig_Noninteractive_::DfaTransition_::INPUT_ATOM, 48 },
    { 28, 55, 3640, ReflexCpp_::AutomatonApparatus_FastAndBig_Noninteractive_::DfaTransition_::INPUT_ATOM, 48 },
    { 20, 67, 3695, ReflexCpp_::AutomatonApparatus_FastAndBig_Noninteractive_::DfaTransition_::INPUT_ATOM, 46 },
    { 28, 55, 3762, ReflexCpp_::AutomatonApparatus_FastAndBig_Noninteractive_::DfaTransition_::INPUT_ATOM, 48 },
    { 21, 65, 3817, ReflexCpp_::AutomatonApparatus_FastAndBig_Noninteractive_::DfaTransition_::INPUT_ATOM, 48 },
    { 28, 15, 3882, ReflexCpp_::AutomatonApparatus_FastAndBig_Noninteractive_::DfaTransition_::INPUT_ATOM, 43 },
    { 28, 10, 3897, ReflexCpp_::AutomatonApparatus_FastAndBig_Noninteractive_::DfaTransition_::INPUT_ATOM, 48 },
    { 21, 10, 3907, ReflexCpp_::AutomatonApparatus_FastAndBig_Noninteractive_::DfaTransition_::INPUT_ATOM, 48 },
    { 28, 15, 3917, ReflexCpp_::AutomatonApparatus_FastAndBig_Noninteractive_::DfaTransition_::INPUT_ATOM, 43 },
    { 28, 10, 3932, ReflexCpp_::AutomatonApparatus_FastAndBig_Noninteractive_::DfaTransition_::INPUT_ATOM, 48 },
    { 21, 10, 3942, ReflexCpp_::AutomatonApparatus_FastAndBig_Noninteractive_::DfaTransition_::INPUT_ATOM, 48 },
    { 19, 56, 3952, ReflexCpp_::AutomatonApparatus_FastAndBig_Noninteractive_::DfaTransition_::INPUT_ATOM, 46 },
    { 15, 0, 4008, ReflexCpp_::AutomatonApparatus_FastAndBig_Noninteractive_::DfaTransition_::INPUT_ATOM, 0 },
    { 25, 6, 4008, ReflexCpp_::AutomatonApparatus_FastAndBig_Noninteractive_::DfaTransition_::INPUT_ATOM, 42 },
    { 11, 0, 4014, ReflexCpp_::AutomatonApparatus_FastAndBig_Noninteractive_::DfaTransition_::INPUT_ATOM, 0 },
    { 12, 255, 4014, ReflexCpp_::AutomatonApparatus_FastAndBig_Noninteractive_::DfaTransition_::INPUT_ATOM, 1 },
    { 19, 75, 4269, ReflexCpp_::AutomatonApparatus_FastAndBig_Noninteractive_::DfaTransition_::INPUT_ATOM, 46 },
    { 19, 56, 4344, ReflexCpp_::AutomatonApparatus_FastAndBig_Noninteractive_::DfaTransition_::INPUT_ATOM, 46 },
    { 16, 75, 4400, ReflexCpp_::AutomatonApparatus_FastAndBig_Noninteractive_::DfaTransition_::INPUT_ATOM, 48 },
    { 16, 75, 4475, ReflexCpp_::AutomatonApparatus_FastAndBig_Noninteractive_::DfaTransition_::INPUT_ATOM, 48 },
    { 24, 255, 4550, ReflexCpp_::AutomatonApparatus_FastAndBig_Noninteractive_::DfaTransition_::INPUT_ATOM, 1 },
    { 28, 32, 4805, ReflexCpp_::AutomatonApparatus_FastAndBig_Noninteractive_::DfaTransition_::CONDITIONAL, 0 },
    { 28, 255, 4837, ReflexCpp_::AutomatonApparatus_FastAndBig_Noninteractive_::DfaTransition_::INPUT_ATOM, 1 },
    { 28, 32, 5092, ReflexCpp_::AutomatonApparatus_FastAndBig_Noninteractive_::DfaTransition_::CONDITIONAL, 0 },
    { 27, 255, 5124, ReflexCpp_::AutomatonApparatus_FastAndBig_Noninteractive_::DfaTransition_::INPUT_ATOM, 1 },
    { 26, 32, 5379, ReflexCpp_::AutomatonApparatus_FastAndBig_Noninteractive_::DfaTransition_::CONDITIONAL, 0 },
    { 26, 255, 5411, ReflexCpp_::AutomatonApparatus_FastAndBig_Noninteractive_::DfaTransition_::INPUT_ATOM, 1 },
    { 28, 32, 5666, ReflexCpp_::AutomatonApparatus_FastAndBig_Noninteractive_::DfaTransition_::CONDITIONAL, 0 },
    { 28, 255, 5698, ReflexCpp_::AutomatonApparatus_FastAndBig_Noninteractive_::DfaTransition_::INPUT_ATOM, 1 },
    { 27, 255, 5953, ReflexCpp_::AutomatonApparatus_FastAndBig_Noninteractive_::DfaTransition_::INPUT_ATOM, 1 },
    { 26, 255, 6208, ReflexCpp_::AutomatonApparatus_FastAndBig_Noninteractive_::DfaTransition_::INPUT_ATOM, 1 }
};
BarfCpp_::Size const Scanner::ms_state_count_ = sizeof(Scanner::ms_state_table_) / sizeof(*Scanner::ms_state_table_);

ReflexCpp_::AutomatonApparatus_FastAndBig_Noninteractive_::DfaTransition_ const Scanner::ms_transition_table_[] =
{
    { 1 },
    { 1 },
    { 3 },
    { 3 },
    { 1 },
    { 1 },
    { 3 },
    { 3 },
    { 1 },
    { 1 },
    { 3 },
    { 3 },
    { 1 },
    { 1 },
    { 3 },
    { 3 },
    { 1 },
    { 1 },
    { 3 },
    { 3 },
    { 1 },
    { 1 },
    { 3 },
    { 3 },
    { 1 },
    { 1 },
    { 3 },
    { 3 },
    { 1 },
    { 1 },
    { 3 },
    { 3 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 4 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 1 },
    { 1 },
    { 3 },
    { 3 },
    { 1 },
    { 1 },
    { 3 },
    { 3 },
    { 1 },
    { 1 },
    { 3 },
    { 3 },
    { 1 },
    { 1 },
    { 3 },
    { 3 },
    { 1 },
    { 1 },
    { 3 },
    { 3 },
    { 1 },
    { 1 },
    { 3 },
    { 3 },
    { 1 },
    { 1 },
    { 3 },
    { 3 },
    { 1 },
    { 1 },
    { 3 },
    { 3 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 4 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 5 },
    { 5 },
    { 9 },
    { 9 },
    { 5 },
    { 5 },
    { 9 },
    { 9 },
    { 5 },
    { 5 },
    { 9 },
    { 9 },
    { 5 },
    { 5 },
    { 9 },
    { 9 },
    { 5 },
    { 5 },
    { 9 },
    { 9 },
    { 5 },
    { 5 },
    { 9 },
    { 9 },
    { 5 },
    { 5 },
    { 9 },
    { 9 },
    { 5 },
    { 5 },
    { 9 },
    { 9 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 4 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 6 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 7 },
    { 7 },
    { 8 },
    { 8 },
    { 7 },
    { 7 },
    { 8 },
    { 8 },
    { 7 },
    { 7 },
    { 8 },
    { 8 },
    { 7 },
    { 7 },
    { 8 },
    { 8 },
    { 7 },
    { 7 },
    { 8 },
    { 8 },
    { 7 },
    { 7 },
    { 8 },
    { 8 },
    { 7 },
    { 7 },
    { 8 },
    { 8 },
    { 7 },
    { 7 },
    { 8 },
    { 8 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 4 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 4 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 4 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 6 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 2 },
    { 11 },
    { 11 },
    { 16 },
    { 16 },
    { 11 },
    { 11 },
    { 16 },
    { 16 },
    { 11 },
    { 11 },
    { 16 },
    { 16 },
    { 11 },
    { 11 },
    { 16 },
    { 16 },
    { 11 },
    { 11 },
    { 16 },
    { 16 },
    { 11 },
    { 11 },
    { 16 },
    { 16 },
    { 11 },
    { 11 },
    { 16 },
    { 16 },
    { 11 },
    { 11 },
    { 16 },
    { 16 },
    { 12 },
    { 12 },
    { 12 },
    { 12 },
    { 12 },
    { 12 },
    { 12 },
    { 12 },
    { 12 },
    { 12 },
    { 12 },
    { 12 },
    { 12 },
    { 12 },
    { 12 },
    { 12 },
    { 12 },
    { 12 },
    { 12 },
    { 12 },
    { 12 },
    { 12 },
    { 12 },
    { 12 },
    { 12 },
    { 12 },
    { 12 },
    { 12 },
    { 12 },
    { 12 },
    { 12 },
    { 12 },
    { 12 },
    { 12 },
    { 12 },
    { 12 },
    { 12 },
    { 12 },
    { 13 },
    { 12 },
    { 12 },
    { 12 },
    { 12 },
    { 12 },
    { 12 },
    { 12 },
    { 12 },
    { 12 },
    { 12 },
    { 12 },
    { 12 },
    { 12 },
    { 12 },
    { 12 },
    { 12 },
    { 12 },
    { 12 },
    { 12 },
    { 12 },
    { 12 },
    { 12 },
    { 12 },
    { 12 },
    { 12 },
    { 12 },
    { 12 },
    { 12 },
    { 12 },
    { 12 },
    { 12 },
    { 12 },
    { 12 },
    { 12 },
    { 12 },
    { 12 },
    { 12 },
    { 12 },
    { 12 },
    { 12 },
    { 12 },
    { 12 },
    { 12 },
    { 12 },
    { 12 },
    { 12 },
    { 12 },
    { 12 },
    { 12 },
    { 12 },
    { 12 },
    { 12 },
    { 14 },
    { 12 },
    { 12 },
    { 12 },
    { 12 },
    { 12 },
    { 12 },
    { 12 },
    { 12 },
    { 12 },
    { 12 },
    { 12 },
    { 12 },
    { 12 },
    { 12 },
    { 12 },
    { 12 },
    { 12 },
    { 12 },
    { 12 },
    { 12 },
    { 12 },
    { 12 },
    { 12 },
    { 12 },
    { 12 },
    { 12 },
    { 12 },
    { 12 },
    { 12 },
    { 12 },
    { 12 },
    { 12 },
    { 12 },
    { 12 },
    { 12 },
    { 12 },
    { 12 },
    { 12 },
    { 12 },
    { 12 },
    { 12 },
    { 12 },
    { 12 },
    { 12 },
    { 12 },
    { 12 },
    { 12 },
    { 12 },
    { 12 },
    { 12 },
    { 12 },
    { 12 },
    { 12 },
    { 12 },
    { 12 },
    { 12 },
    { 12 },
    { 12 },
    { 12 },
    { 12 },
    { 12 },
    { 12 },
    { 12 },
    { 12 },
    { 12 },
    { 12 },
    { 12 },
    { 12 },
    { 12 },
    { 12 },
    { 12 },
    { 12 },
    { 12 },
    { 12 },
    { 12 },
    { 12 },
    { 12 },
    { 12 },
    { 12 },
    { 12 },
    { 12 },
    { 12 },
    { 12 },
    { 12 },
    { 12 },
    { 12 },
    { 12 },
    { 12 },
    { 12 },
    { 12 },
    { 12 },
    { 12 },
    { 12 },
    { 12 },
    { 12 },
    { 12 },
    { 12 },
    { 12 },
    { 12 },
    { 12 },
    { 12 },
    { 12 },
    { 12 },
    { 12 },
    { 12 },
    { 12 },
    { 12 },
    { 12 },
    { 12 },
    { 12 },
    { 12 },
    { 12 },
    { 12 },
    { 12 },
    { 12 },
    { 12 },
    { 12 },
    { 12 },
    { 12 },
    { 12 },
    { 12 },
    { 12 },
    { 12 },
    { 12 },
    { 12 },
    { 12 },
    { 12 },
    { 12 },
    { 12 },
    { 12 },
    { 12 },
    { 12 },
    { 12 },
    { 12 },
    { 12 },
    { 12 },
    { 12 },
    { 12 },
    { 12 },
    { 12 },
    { 12 },
    { 12 },
    { 12 },
    { 12 },
    { 12 },
    { 12 },
    { 12 },
    { 12 },
    { 12 },
    { 12 },
    { 12 },
    { 12 },
    { 12 },
    { 12 },
    { 12 },
    { 12 },
    { 12 },
    { 12 },
    { 12 },
    { 12 },
    { 12 },
    { 12 },
    { 12 },
    { 12 },
    { 12 },
    { 15 },
    { 15 },
    { 12 },
    { 12 },
    { 15 },
    { 15 },
    { 12 },
    { 12 },
    { 15 },
    { 15 },
    { 12 },
    { 12 },
    { 15 },
    { 15 },
    { 12 },
    { 12 },
    { 15 },
    { 15 },
    { 12 },
    { 12 },
    { 15 },
    { 15 },
    { 12 },
    { 12 },
    { 15 },
    { 15 },
    { 12 },
    { 12 },
    { 15 },
    { 15 },
    { 12 },
    { 12 },
    { 12 },
    { 12 },
    { 12 },
    { 12 },
    { 12 },
    { 12 },
    { 12 },
    { 12 },
    { 12 },
    { 12 },
    { 12 },
    { 12 },
    { 12 },
    { 12 },
    { 12 },
    { 12 },
    { 12 },
    { 12 },
    { 12 },
    { 12 },
    { 12 },
    { 12 },
    { 12 },
    { 12 },
    { 12 },
    { 12 },
    { 12 },
    { 12 },
    { 12 },
    { 12 },
    { 12 },
    { 12 },
    { 12 },
    { 12 },
    { 12 },
    { 12 },
    { 13 },
    { 12 },
    { 12 },
    { 12 },
    { 12 },
    { 12 },
    { 12 },
    { 12 },
    { 12 },
    { 12 },
    { 12 },
    { 12 },
    { 12 },
    { 12 },
    { 12 },
    { 12 },
    { 12 },
    { 12 },
    { 12 },
    { 12 },
    { 12 },
    { 12 },
    { 12 },
    { 12 },
    { 12 },
    { 12 },
    { 12 },
    { 12 },
    { 12 },
    { 12 },
    { 12 },
    { 12 },
    { 12 },
    { 12 },
    { 12 },
    { 12 },
    { 12 },
    { 12 },
    { 12 },
    { 12 },
    { 12 },
    { 12 },
    { 12 },
    { 12 },
    { 12 },
    { 12 },
    { 12 },
    { 12 },
    { 12 },
    { 12 },
    { 12 },
    { 12 },
    { 12 },
    { 14 },
    { 12 },
    { 12 },
    { 12 },
    { 12 },
    { 12 },
    { 12 },
    { 12 },
    { 12 },
    { 12 },
    { 12 },
    { 12 },
    { 12 },
    { 12 },
    { 12 },
    { 12 },
    { 12 },
    { 12 },
    { 12 },
    { 12 },
    { 12 },
    { 12 },
    { 12 },
    { 12 },
    { 12 },
    { 12 },
    { 12 },
    { 12 },
    { 12 },
    { 12 },
    { 12 },
    { 12 },
    { 12 },
    { 12 },
    { 12 },
    { 12 },
    { 12 },
    { 12 },
    { 12 },
    { 12 },
    { 12 },
    { 12 },
    { 12 },
    { 12 },
    { 12 },
    { 12 },
    { 12 },
    { 12 },
    { 12 },
    { 12 },
    { 12 },
    { 12 },
    { 12 },
    { 12 },
    { 12 },
    { 12 },
    { 12 },
    { 12 },
    { 12 },
    { 12 },
    { 12 },
    { 12 },
    { 12 },
    { 12 },
    { 12 },
    { 12 },
    { 12 },
    { 12 },
    { 12 },
    { 12 },
    { 12 },
    { 12 },
    { 12 },
    { 12 },
    { 12 },
    { 12 },
    { 12 },
    { 12 },
    { 12 },
    { 12 },
    { 12 },
    { 12 },
    { 12 },
    { 12 },
    { 12 },
    { 12 },
    { 12 },
    { 12 },
    { 12 },
    { 12 },
    { 12 },
    { 12 },
    { 12 },
    { 12 },
    { 12 },
    { 12 },
    { 12 },
    { 12 },
    { 12 },
    { 12 },
    { 12 },
    { 12 },
    { 12 },
    { 12 },
    { 12 },
    { 12 },
    { 12 },
    { 12 },
    { 12 },
    { 12 },
    { 12 },
    { 12 },
    { 12 },
    { 12 },
    { 12 },
    { 12 },
    { 12 },
    { 12 },
    { 12 },
    { 12 },
    { 12 },
    { 12 },
    { 12 },
    { 12 },
    { 12 },
    { 12 },
    { 12 },
    { 12 },
    { 12 },
    { 12 },
    { 12 },
    { 12 },
    { 12 },
    { 12 },
    { 12 },
    { 12 },
    { 12 },
    { 12 },
    { 12 },
    { 12 },
    { 12 },
    { 12 },
    { 12 },
    { 12 },
    { 12 },
    { 12 },
    { 12 },
    { 12 },
    { 12 },
    { 12 },
    { 12 },
    { 12 },
    { 12 },
    { 12 },
    { 12 },
    { 12 },
    { 12 },
    { 12 },
    { 12 },
    { 12 },
    { 12 },
    { 12 },
    { 12 },
    { 12 },
    { 18 },
    { 18 },
    { 29 },
    { 29 },
    { 18 },
    { 18 },
    { 29 },
    { 29 },
    { 18 },
    { 18 },
    { 29 },
    { 29 },
    { 18 },
    { 18 },
    { 29 },
    { 29 },
    { 18 },
    { 18 },
    { 29 },
    { 29 },
    { 18 },
    { 18 },
    { 29 },
    { 29 },
    { 18 },
    { 18 },
    { 29 },
    { 29 },
    { 18 },
    { 18 },
    { 29 },
    { 29 },
    { 19 },
    { 19 },
    { 19 },
    { 19 },
    { 19 },
    { 19 },
    { 19 },
    { 19 },
    { 19 },
    { 19 },
    { 19 },
    { 19 },
    { 19 },
    { 19 },
    { 19 },
    { 19 },
    { 19 },
    { 19 },
    { 19 },
    { 19 },
    { 19 },
    { 19 },
    { 19 },
    { 19 },
    { 19 },
    { 19 },
    { 19 },
    { 19 },
    { 19 },
    { 19 },
    { 19 },
    { 20 },
    { 20 },
    { 19 },
    { 20 },
    { 20 },
    { 20 },
    { 20 },
    { 19 },
    { 20 },
    { 20 },
    { 20 },
    { 20 },
    { 20 },
    { 20 },
    { 20 },
    { 20 },
    { 20 },
    { 20 },
    { 20 },
    { 20 },
    { 20 },
    { 20 },
    { 20 },
    { 20 },
    { 20 },
    { 20 },
    { 20 },
    { 20 },
    { 20 },
    { 20 },
    { 20 },
    { 20 },
    { 20 },
    { 20 },
    { 20 },
    { 20 },
    { 20 },
    { 20 },
    { 20 },
    { 20 },
    { 20 },
    { 20 },
    { 20 },
    { 20 },
    { 20 },
    { 20 },
    { 20 },
    { 20 },
    { 20 },
    { 20 },
    { 20 },
    { 20 },
    { 20 },
    { 20 },
    { 20 },
    { 20 },
    { 20 },
    { 20 },
    { 20 },
    { 20 },
    { 21 },
    { 20 },
    { 20 },
    { 20 },
    { 20 },
    { 20 },
    { 20 },
    { 20 },
    { 20 },
    { 20 },
    { 20 },
    { 20 },
    { 20 },
    { 20 },
    { 20 },
    { 20 },
    { 20 },
    { 20 },
    { 20 },
    { 20 },
    { 20 },
    { 20 },
    { 20 },
    { 20 },
    { 20 },
    { 20 },
    { 20 },
    { 20 },
    { 20 },
    { 20 },
    { 20 },
    { 20 },
    { 20 },
    { 20 },
    { 20 },
    { 19 },
    { 19 },
    { 19 },
    { 19 },
    { 19 },
    { 19 },
    { 19 },
    { 19 },
    { 19 },
    { 19 },
    { 19 },
    { 19 },
    { 19 },
    { 19 },
    { 19 },
    { 19 },
    { 19 },
    { 19 },
    { 19 },
    { 19 },
    { 19 },
    { 19 },
    { 19 },
    { 19 },
    { 19 },
    { 19 },
    { 19 },
    { 19 },
    { 19 },
    { 19 },
    { 19 },
    { 19 },
    { 19 },
    { 19 },
    { 19 },
    { 19 },
    { 19 },
    { 19 },
    { 19 },
    { 19 },
    { 19 },
    { 19 },
    { 19 },
    { 19 },
    { 19 },
    { 19 },
    { 19 },
    { 19 },
    { 19 },
    { 19 },
    { 19 },
    { 19 },
    { 19 },
    { 19 },
    { 19 },
    { 19 },
    { 19 },
    { 19 },
    { 19 },
    { 19 },
    { 19 },
    { 19 },
    { 19 },
    { 19 },
    { 19 },
    { 19 },
    { 19 },
    { 19 },
    { 19 },
    { 19 },
    { 19 },
    { 19 },
    { 19 },
    { 19 },
    { 19 },
    { 19 },
    { 19 },
    { 19 },
    { 19 },
    { 19 },
    { 19 },
    { 19 },
    { 19 },
    { 19 },
    { 19 },
    { 19 },
    { 19 },
    { 19 },
    { 19 },
    { 19 },
    { 19 },
    { 19 },
    { 19 },
    { 19 },
    { 19 },
    { 19 },
    { 19 },
    { 19 },
    { 19 },
    { 19 },
    { 19 },
    { 19 },
    { 19 },
    { 19 },
    { 19 },
    { 19 },
    { 19 },
    { 19 },
    { 19 },
    { 19 },
    { 19 },
    { 19 },
    { 19 },
    { 19 },
    { 19 },
    { 19 },
    { 19 },
    { 19 },
    { 19 },
    { 19 },
    { 19 },
    { 19 },
    { 19 },
    { 19 },
    { 19 },
    { 19 },
    { 19 },
    { 19 },
    { 19 },
    { 22 },
    { 22 },
    { 28 },
    { 28 },
    { 22 },
    { 22 },
    { 28 },
    { 28 },
    { 22 },
    { 22 },
    { 28 },
    { 28 },
    { 22 },
    { 22 },
    { 28 },
    { 28 },
    { 22 },
    { 22 },
    { 28 },
    { 28 },
    { 22 },
    { 22 },
    { 28 },
    { 28 },
    { 22 },
    { 22 },
    { 28 },
    { 28 },
    { 22 },
    { 22 },
    { 28 },
    { 28 },
    { 23 },
    { 23 },
    { 23 },
    { 23 },
    { 23 },
    { 23 },
    { 23 },
    { 23 },
    { 23 },
    { 23 },
    { 23 },
    { 23 },
    { 23 },
    { 23 },
    { 23 },
    { 23 },
    { 24 },
    { 24 },
    { 24 },
    { 24 },
    { 24 },
    { 24 },
    { 24 },
    { 24 },
    { 23 },
    { 23 },
    { 23 },
    { 23 },
    { 23 },
    { 23 },
    { 23 },
    { 23 },
    { 23 },
    { 23 },
    { 23 },
    { 23 },
    { 23 },
    { 23 },
    { 23 },
    { 23 },
    { 23 },
    { 23 },
    { 23 },
    { 23 },
    { 23 },
    { 23 },
    { 23 },
    { 23 },
    { 23 },
    { 23 },
    { 23 },
    { 23 },
    { 23 },
    { 23 },
    { 23 },
    { 23 },
    { 23 },
    { 23 },
    { 23 },
    { 23 },
    { 23 },
    { 23 },
    { 23 },
    { 23 },
    { 23 },
    { 23 },
    { 23 },
    { 23 },
    { 23 },
    { 23 },
    { 23 },
    { 23 },
    { 23 },
    { 23 },
    { 23 },
    { 23 },
    { 23 },
    { 23 },
    { 23 },
    { 23 },
    { 23 },
    { 23 },
    { 23 },
    { 23 },
    { 23 },
    { 23 },
    { 23 },
    { 23 },
    { 26 },
    { 23 },
    { 23 },
    { 23 },
    { 23 },
    { 23 },
    { 23 },
    { 25 },
    { 25 },
    { 25 },
    { 25 },
    { 25 },
    { 25 },
    { 25 },
    { 25 },
    { 25 },
    { 25 },
    { 25 },
    { 25 },
    { 25 },
    { 25 },
    { 25 },
    { 25 },
    { 27 },
    { 27 },
    { 27 },
    { 27 },
    { 27 },
    { 27 },
    { 27 },
    { 27 },
    { 27 },
    { 27 },
    { 81 },
    { 81 },
    { 81 },
    { 81 },
    { 81 },
    { 81 },
    { 81 },
    { 27 },
    { 27 },
    { 27 },
    { 27 },
    { 27 },
    { 27 },
    { 81 },
    { 81 },
    { 81 },
    { 81 },
    { 81 },
    { 81 },
    { 81 },
    { 81 },
    { 81 },
    { 81 },
    { 81 },
    { 81 },
    { 81 },
    { 81 },
    { 81 },
    { 81 },
    { 81 },
    { 81 },
    { 81 },
    { 81 },
    { 81 },
    { 81 },
    { 81 },
    { 81 },
    { 81 },
    { 81 },
    { 27 },
    { 27 },
    { 27 },
    { 27 },
    { 27 },
    { 27 },
    { 27 },
    { 27 },
    { 27 },
    { 27 },
    { 27 },
    { 27 },
    { 27 },
    { 27 },
    { 27 },
    { 27 },
    { 81 },
    { 81 },
    { 81 },
    { 81 },
    { 81 },
    { 81 },
    { 81 },
    { 27 },
    { 27 },
    { 27 },
    { 27 },
    { 27 },
    { 27 },
    { 81 },
    { 81 },
    { 81 },
    { 81 },
    { 81 },
    { 81 },
    { 81 },
    { 81 },
    { 81 },
    { 81 },
    { 81 },
    { 81 },
    { 81 },
    { 81 },
    { 81 },
    { 81 },
    { 81 },
    { 81 },
    { 81 },
    { 81 },
    { 81 },
    { 81 },
    { 81 },
    { 81 },
    { 81 },
    { 81 },
    { 27 },
    { 27 },
    { 27 },
    { 27 },
    { 27 },
    { 27 },
    { 23 },
    { 23 },
    { 23 },
    { 23 },
    { 23 },
    { 23 },
    { 23 },
    { 23 },
    { 23 },
    { 23 },
    { 23 },
    { 23 },
    { 23 },
    { 23 },
    { 23 },
    { 23 },
    { 24 },
    { 24 },
    { 24 },
    { 24 },
    { 24 },
    { 24 },
    { 24 },
    { 24 },
    { 23 },
    { 23 },
    { 23 },
    { 23 },
    { 23 },
    { 23 },
    { 23 },
    { 23 },
    { 23 },
    { 23 },
    { 23 },
    { 23 },
    { 23 },
    { 23 },
    { 23 },
    { 23 },
    { 23 },
    { 23 },
    { 23 },
    { 23 },
    { 23 },
    { 23 },
    { 23 },
    { 23 },
    { 23 },
    { 23 },
    { 23 },
    { 23 },
    { 23 },
    { 23 },
    { 23 },
    { 23 },
    { 23 },
    { 23 },
    { 23 },
    { 23 },
    { 23 },
    { 23 },
    { 23 },
    { 23 },
    { 23 },
    { 23 },
    { 23 },
    { 23 },
    { 23 },
    { 23 },
    { 23 },
    { 23 },
    { 23 },
    { 23 },
    { 23 },
    { 23 },
    { 23 },
    { 23 },
    { 23 },
    { 23 },
    { 23 },
    { 23 },
    { 23 },
    { 23 },
    { 23 },
    { 23 },
    { 23 },
    { 23 },
    { 26 },
    { 23 },
    { 23 },
    { 23 },
    { 23 },
    { 23 },
    { 23 },
    { 19 },
    { 19 },
    { 19 },
    { 19 },
    { 19 },
    { 19 },
    { 19 },
    { 19 },
    { 19 },
    { 19 },
    { 19 },
    { 19 },
    { 19 },
    { 19 },
    { 19 },
    { 19 },
    { 19 },
    { 19 },
    { 19 },
    { 19 },
    { 19 },
    { 19 },
    { 19 },
    { 19 },
    { 19 },
    { 19 },
    { 19 },
    { 19 },
    { 19 },
    { 19 },
    { 19 },
    { 20 },
    { 20 },
    { 19 },
    { 20 },
    { 20 },
    { 20 },
    { 20 },
    { 19 },
    { 20 },
    { 20 },
    { 20 },
    { 20 },
    { 20 },
    { 20 },
    { 20 },
    { 20 },
    { 20 },
    { 20 },
    { 20 },
    { 20 },
    { 20 },
    { 20 },
    { 20 },
    { 20 },
    { 20 },
    { 20 },
    { 20 },
    { 20 },
    { 20 },
    { 20 },
    { 20 },
    { 20 },
    { 20 },
    { 20 },
    { 20 },
    { 20 },
    { 20 },
    { 20 },
    { 20 },
    { 20 },
    { 20 },
    { 20 },
    { 20 },
    { 20 },
    { 20 },
    { 20 },
    { 20 },
    { 20 },
    { 20 },
    { 20 },
    { 20 },
    { 20 },
    { 20 },
    { 20 },
    { 20 },
    { 20 },
    { 20 },
    { 20 },
    { 20 },
    { 20 },
    { 21 },
    { 20 },
    { 20 },
    { 20 },
    { 20 },
    { 20 },
    { 20 },
    { 20 },
    { 20 },
    { 20 },
    { 20 },
    { 20 },
    { 20 },
    { 20 },
    { 20 },
    { 20 },
    { 20 },
    { 20 },
    { 20 },
    { 20 },
    { 20 },
    { 20 },
    { 20 },
    { 20 },
    { 20 },
    { 20 },
    { 20 },
    { 20 },
    { 20 },
    { 20 },
    { 20 },
    { 20 },
    { 20 },
    { 20 },
    { 20 },
    { 19 },
    { 19 },
    { 19 },
    { 19 },
    { 19 },
    { 19 },
    { 19 },
    { 19 },
    { 19 },
    { 19 },
    { 19 },
    { 19 },
    { 19 },
    { 19 },
    { 19 },
    { 19 },
    { 19 },
    { 19 },
    { 19 },
    { 19 },
    { 19 },
    { 19 },
    { 19 },
    { 19 },
    { 19 },
    { 19 },
    { 19 },
    { 19 },
    { 19 },
    { 19 },
    { 19 },
    { 19 },
    { 19 },
    { 19 },
    { 19 },
    { 19 },
    { 19 },
    { 19 },
    { 19 },
    { 19 },
    { 19 },
    { 19 },
    { 19 },
    { 19 },
    { 19 },
    { 19 },
    { 19 },
    { 19 },
    { 19 },
    { 19 },
    { 19 },
    { 19 },
    { 19 },
    { 19 },
    { 19 },
    { 19 },
    { 19 },
    { 19 },
    { 19 },
    { 19 },
    { 19 },
    { 19 },
    { 19 },
    { 19 },
    { 19 },
    { 19 },
    { 19 },
    { 19 },
    { 19 },
    { 19 },
    { 19 },
    { 19 },
    { 19 },
    { 19 },
    { 19 },
    { 19 },
    { 19 },
    { 19 },
    { 19 },
    { 19 },
    { 19 },
    { 19 },
    { 19 },
    { 19 },
    { 19 },
    { 19 },
    { 19 },
    { 19 },
    { 19 },
    { 19 },
    { 19 },
    { 19 },
    { 19 },
    { 19 },
    { 19 },
    { 19 },
    { 19 },
    { 19 },
    { 19 },
    { 19 },
    { 19 },
    { 19 },
    { 19 },
    { 19 },
    { 19 },
    { 19 },
    { 19 },
    { 19 },
    { 19 },
    { 19 },
    { 19 },
    { 19 },
    { 19 },
    { 19 },
    { 19 },
    { 19 },
    { 19 },
    { 19 },
    { 19 },
    { 19 },
    { 19 },
    { 19 },
    { 19 },
    { 19 },
    { 19 },
    { 19 },
    { 19 },
    { 19 },
    { 19 },
    { 31 },
    { 31 },
    { 70 },
    { 70 },
    { 31 },
    { 31 },
    { 70 },
    { 70 },
    { 31 },
    { 31 },
    { 70 },
    { 70 },
    { 31 },
    { 31 },
    { 70 },
    { 70 },
    { 31 },
    { 31 },
    { 70 },
    { 70 },
    { 31 },
    { 31 },
    { 70 },
    { 70 },
    { 31 },
    { 31 },
    { 70 },
    { 70 },
    { 31 },
    { 31 },
    { 70 },
    { 70 },
    { 32 },
    { 32 },
    { 32 },
    { 32 },
    { 32 },
    { 32 },
    { 32 },
    { 32 },
    { 33 },
    { 34 },
    { 32 },
    { 32 },
    { 32 },
    { 32 },
    { 32 },
    { 32 },
    { 32 },
    { 32 },
    { 32 },
    { 32 },
    { 32 },
    { 32 },
    { 32 },
    { 32 },
    { 32 },
    { 32 },
    { 32 },
    { 32 },
    { 32 },
    { 32 },
    { 32 },
    { 33 },
    { 32 },
    { 35 },
    { 32 },
    { 32 },
    { 32 },
    { 32 },
    { 36 },
    { 32 },
    { 32 },
    { 32 },
    { 37 },
    { 62 },
    { 37 },
    { 32 },
    { 63 },
    { 66 },
    { 67 },
    { 67 },
    { 67 },
    { 67 },
    { 67 },
    { 67 },
    { 67 },
    { 67 },
    { 67 },
    { 32 },
    { 62 },
    { 32 },
    { 32 },
    { 32 },
    { 32 },
    { 32 },
    { 68 },
    { 68 },
    { 68 },
    { 68 },
    { 68 },
    { 68 },
    { 68 },
    { 68 },
    { 68 },
    { 68 },
    { 68 },
    { 68 },
    { 68 },
    { 68 },
    { 68 },
    { 68 },
    { 68 },
    { 68 },
    { 68 },
    { 68 },
    { 68 },
    { 68 },
    { 68 },
    { 68 },
    { 68 },
    { 68 },
    { 62 },
    { 32 },
    { 62 },
    { 32 },
    { 68 },
    { 32 },
    { 68 },
    { 68 },
    { 68 },
    { 68 },
    { 68 },
    { 68 },
    { 68 },
    { 68 },
    { 68 },
    { 68 },
    { 68 },
    { 68 },
    { 68 },
    { 68 },
    { 68 },
    { 68 },
    { 68 },
    { 68 },
    { 68 },
    { 68 },
    { 68 },
    { 68 },
    { 68 },
    { 68 },
    { 68 },
    { 68 },
    { 62 },
    { 32 },
    { 62 },
    { 32 },
    { 32 },
    { 32 },
    { 32 },
    { 32 },
    { 32 },
    { 32 },
    { 32 },
    { 32 },
    { 32 },
    { 32 },
    { 32 },
    { 32 },
    { 32 },
    { 32 },
    { 32 },
    { 32 },
    { 32 },
    { 32 },
    { 32 },
    { 32 },
    { 32 },
    { 32 },
    { 32 },
    { 32 },
    { 32 },
    { 32 },
    { 32 },
    { 32 },
    { 32 },
    { 32 },
    { 32 },
    { 32 },
    { 32 },
    { 32 },
    { 32 },
    { 32 },
    { 32 },
    { 32 },
    { 32 },
    { 32 },
    { 32 },
    { 32 },
    { 32 },
    { 32 },
    { 32 },
    { 32 },
    { 32 },
    { 32 },
    { 32 },
    { 32 },
    { 32 },
    { 32 },
    { 32 },
    { 32 },
    { 32 },
    { 32 },
    { 32 },
    { 32 },
    { 32 },
    { 32 },
    { 32 },
    { 32 },
    { 32 },
    { 32 },
    { 32 },
    { 32 },
    { 32 },
    { 32 },
    { 32 },
    { 32 },
    { 32 },
    { 32 },
    { 32 },
    { 32 },
    { 32 },
    { 32 },
    { 32 },
    { 32 },
    { 32 },
    { 32 },
    { 32 },
    { 32 },
    { 32 },
    { 32 },
    { 32 },
    { 32 },
    { 32 },
    { 32 },
    { 32 },
    { 32 },
    { 32 },
    { 32 },
    { 32 },
    { 32 },
    { 32 },
    { 32 },
    { 32 },
    { 32 },
    { 32 },
    { 32 },
    { 32 },
    { 32 },
    { 32 },
    { 32 },
    { 32 },
    { 32 },
    { 32 },
    { 32 },
    { 32 },
    { 32 },
    { 32 },
    { 32 },
    { 32 },
    { 32 },
    { 32 },
    { 32 },
    { 32 },
    { 32 },
    { 32 },
    { 32 },
    { 32 },
    { 32 },
    { 32 },
    { 32 },
    { 32 },
    { 32 },
    { 32 },
    { 32 },
    { 32 },
    { 38 },
    { 61 },
    { 61 },
    { 61 },
    { 61 },
    { 61 },
    { 61 },
    { 61 },
    { 61 },
    { 61 },
    { 39 },
    { 81 },
    { 45 },
    { 45 },
    { 45 },
    { 45 },
    { 45 },
    { 45 },
    { 45 },
    { 45 },
    { 81 },
    { 81 },
    { 81 },
    { 81 },
    { 81 },
    { 81 },
    { 81 },
    { 81 },
    { 81 },
    { 81 },
    { 46 },
    { 81 },
    { 81 },
    { 48 },
    { 81 },
    { 81 },
    { 81 },
    { 81 },
    { 81 },
    { 81 },
    { 81 },
    { 81 },
    { 81 },
    { 81 },
    { 81 },
    { 81 },
    { 81 },
    { 81 },
    { 81 },
    { 81 },
    { 81 },
    { 81 },
    { 51 },
    { 81 },
    { 81 },
    { 81 },
    { 81 },
    { 81 },
    { 81 },
    { 81 },
    { 81 },
    { 81 },
    { 46 },
    { 81 },
    { 81 },
    { 48 },
    { 81 },
    { 81 },
    { 81 },
    { 81 },
    { 81 },
    { 81 },
    { 81 },
    { 81 },
    { 81 },
    { 81 },
    { 81 },
    { 81 },
    { 81 },
    { 81 },
    { 81 },
    { 81 },
    { 81 },
    { 81 },
    { 51 },
    { 40 },
    { 40 },
    { 40 },
    { 40 },
    { 40 },
    { 40 },
    { 40 },
    { 40 },
    { 40 },
    { 40 },
    { 40 },
    { 40 },
    { 40 },
    { 40 },
    { 40 },
    { 40 },
    { 40 },
    { 40 },
    { 40 },
    { 40 },
    { 81 },
    { 81 },
    { 81 },
    { 81 },
    { 81 },
    { 81 },
    { 81 },
    { 81 },
    { 81 },
    { 81 },
    { 81 },
    { 41 },
    { 81 },
    { 81 },
    { 81 },
    { 81 },
    { 81 },
    { 81 },
    { 81 },
    { 81 },
    { 81 },
    { 81 },
    { 81 },
    { 81 },
    { 81 },
    { 81 },
    { 81 },
    { 81 },
    { 81 },
    { 81 },
    { 81 },
    { 81 },
    { 81 },
    { 81 },
    { 81 },
    { 81 },
    { 81 },
    { 81 },
    { 81 },
    { 81 },
    { 81 },
    { 81 },
    { 81 },
    { 41 },
    { 42 },
    { 81 },
    { 42 },
    { 81 },
    { 81 },
    { 43 },
    { 44 },
    { 44 },
    { 44 },
    { 44 },
    { 44 },
    { 44 },
    { 44 },
    { 44 },
    { 44 },
    { 43 },
    { 44 },
    { 44 },
    { 44 },
    { 44 },
    { 44 },
    { 44 },
    { 44 },
    { 44 },
    { 44 },
    { 44 },
    { 44 },
    { 44 },
    { 44 },
    { 44 },
    { 44 },
    { 44 },
    { 44 },
    { 44 },
    { 44 },
    { 45 },
    { 45 },
    { 45 },
    { 45 },
    { 45 },
    { 45 },
    { 45 },
    { 45 },
    { 47 },
    { 47 },
    { 47 },
    { 47 },
    { 49 },
    { 81 },
    { 49 },
    { 81 },
    { 81 },
    { 43 },
    { 50 },
    { 50 },
    { 50 },
    { 50 },
    { 50 },
    { 50 },
    { 50 },
    { 50 },
    { 50 },
    { 43 },
    { 50 },
    { 50 },
    { 50 },
    { 50 },
    { 50 },
    { 50 },
    { 50 },
    { 50 },
    { 50 },
    { 50 },
    { 50 },
    { 50 },
    { 50 },
    { 50 },
    { 50 },
    { 50 },
    { 50 },
    { 50 },
    { 50 },
    { 52 },
    { 52 },
    { 52 },
    { 52 },
    { 52 },
    { 52 },
    { 52 },
    { 52 },
    { 52 },
    { 52 },
    { 81 },
    { 81 },
    { 81 },
    { 81 },
    { 81 },
    { 81 },
    { 81 },
    { 52 },
    { 52 },
    { 52 },
    { 52 },
    { 52 },
    { 52 },
    { 81 },
    { 81 },
    { 81 },
    { 81 },
    { 81 },
    { 81 },
    { 81 },
    { 81 },
    { 81 },
    { 81 },
    { 81 },
    { 81 },
    { 81 },
    { 81 },
    { 81 },
    { 81 },
    { 81 },
    { 81 },
    { 81 },
    { 81 },
    { 81 },
    { 81 },
    { 81 },
    { 81 },
    { 81 },
    { 81 },
    { 52 },
    { 52 },
    { 52 },
    { 52 },
    { 52 },
    { 52 },
    { 53 },
    { 81 },
    { 52 },
    { 52 },
    { 52 },
    { 52 },
    { 52 },
    { 52 },
    { 52 },
    { 52 },
    { 52 },
    { 52 },
    { 81 },
    { 81 },
    { 81 },
    { 81 },
    { 81 },
    { 81 },
    { 81 },
    { 52 },
    { 52 },
    { 52 },
    { 52 },
    { 52 },
    { 52 },
    { 81 },
    { 81 },
    { 81 },
    { 81 },
    { 81 },
    { 81 },
    { 81 },
    { 81 },
    { 81 },
    { 58 },
    { 81 },
    { 81 },
    { 81 },
    { 81 },
    { 81 },
    { 81 },
    { 81 },
    { 81 },
    { 81 },
    { 81 },
    { 81 },
    { 81 },
    { 81 },
    { 81 },
    { 81 },
    { 81 },
    { 52 },
    { 52 },
    { 52 },
    { 52 },
    { 52 },
    { 52 },
    { 81 },
    { 81 },
    { 81 },
    { 81 },
    { 81 },
    { 81 },
    { 81 },
    { 81 },
    { 81 },
    { 58 },
    { 54 },
    { 54 },
    { 54 },
    { 54 },
    { 54 },
    { 54 },
    { 54 },
    { 54 },
    { 54 },
    { 54 },
    { 81 },
    { 81 },
    { 81 },
    { 81 },
    { 81 },
    { 81 },
    { 81 },
    { 54 },
    { 54 },
    { 54 },
    { 54 },
    { 54 },
    { 54 },
    { 81 },
    { 81 },
    { 81 },
    { 81 },
    { 81 },
    { 81 },
    { 81 },
    { 81 },
    { 81 },
    { 81 },
    { 81 },
    { 81 },
    { 81 },
    { 81 },
    { 81 },
    { 81 },
    { 81 },
    { 81 },
    { 81 },
    { 81 },
    { 81 },
    { 81 },
    { 81 },
    { 81 },
    { 81 },
    { 81 },
    { 54 },
    { 54 },
    { 54 },
    { 54 },
    { 54 },
    { 54 },
    { 54 },
    { 54 },
    { 54 },
    { 54 },
    { 54 },
    { 54 },
    { 54 },
    { 54 },
    { 54 },
    { 54 },
    { 81 },
    { 81 },
    { 81 },
    { 81 },
    { 81 },
    { 81 },
    { 81 },
    { 54 },
    { 54 },
    { 54 },
    { 54 },
    { 54 },
    { 54 },
    { 81 },
    { 81 },
    { 81 },
    { 81 },
    { 81 },
    { 81 },
    { 81 },
    { 81 },
    { 81 },
    { 55 },
    { 81 },
    { 81 },
    { 81 },
    { 81 },
    { 81 },
    { 81 },
    { 81 },
    { 81 },
    { 81 },
    { 81 },
    { 81 },
    { 81 },
    { 81 },
    { 81 },
    { 81 },
    { 81 },
    { 54 },
    { 54 },
    { 54 },
    { 54 },
    { 54 },
    { 54 },
    { 81 },
    { 81 },
    { 81 },
    { 81 },
    { 81 },
    { 81 },
    { 81 },
    { 81 },
    { 81 },
    { 55 },
    { 56 },
    { 81 },
    { 56 },
    { 81 },
    { 81 },
    { 43 },
    { 57 },
    { 57 },
    { 57 },
    { 57 },
    { 57 },
    { 57 },
    { 57 },
    { 57 },
    { 57 },
    { 43 },
    { 57 },
    { 57 },
    { 57 },
    { 57 },
    { 57 },
    { 57 },
    { 57 },
    { 57 },
    { 57 },
    { 57 },
    { 57 },
    { 57 },
    { 57 },
    { 57 },
    { 57 },
    { 57 },
    { 57 },
    { 57 },
    { 57 },
    { 59 },
    { 81 },
    { 59 },
    { 81 },
    { 81 },
    { 43 },
    { 60 },
    { 60 },
    { 60 },
    { 60 },
    { 60 },
    { 60 },
    { 60 },
    { 60 },
    { 60 },
    { 43 },
    { 60 },
    { 60 },
    { 60 },
    { 60 },
    { 60 },
    { 60 },
    { 60 },
    { 60 },
    { 60 },
    { 60 },
    { 60 },
    { 60 },
    { 60 },
    { 60 },
    { 60 },
    { 60 },
    { 60 },
    { 60 },
    { 60 },
    { 39 },
    { 81 },
    { 61 },
    { 61 },
    { 61 },
    { 61 },
    { 61 },
    { 61 },
    { 61 },
    { 61 },
    { 61 },
    { 61 },
    { 81 },
    { 81 },
    { 81 },
    { 81 },
    { 81 },
    { 81 },
    { 81 },
    { 81 },
    { 81 },
    { 81 },
    { 81 },
    { 48 },
    { 81 },
    { 81 },
    { 81 },
    { 81 },
    { 81 },
    { 81 },
    { 81 },
    { 81 },
    { 81 },
    { 81 },
    { 81 },
    { 81 },
    { 81 },
    { 81 },
    { 81 },
    { 81 },
    { 81 },
    { 81 },
    { 81 },
    { 81 },
    { 81 },
    { 81 },
    { 81 },
    { 81 },
    { 81 },
    { 81 },
    { 81 },
    { 81 },
    { 81 },
    { 81 },
    { 81 },
    { 48 },
    { 64 },
    { 81 },
    { 81 },
    { 81 },
    { 81 },
    { 65 },
    { 65 },
    { 65 },
    { 65 },
    { 65 },
    { 65 },
    { 65 },
    { 65 },
    { 65 },
    { 65 },
    { 81 },
    { 65 },
    { 65 },
    { 65 },
    { 65 },
    { 65 },
    { 65 },
    { 65 },
    { 65 },
    { 65 },
    { 65 },
    { 65 },
    { 65 },
    { 65 },
    { 65 },
    { 65 },
    { 65 },
    { 65 },
    { 65 },
    { 65 },
    { 65 },
    { 65 },
    { 65 },
    { 65 },
    { 65 },
    { 65 },
    { 65 },
    { 65 },
    { 65 },
    { 65 },
    { 65 },
    { 65 },
    { 65 },
    { 65 },
    { 65 },
    { 65 },
    { 65 },
    { 65 },
    { 65 },
    { 65 },
    { 65 },
    { 65 },
    { 65 },
    { 65 },
    { 65 },
    { 65 },
    { 65 },
    { 65 },
    { 65 },
    { 65 },
    { 65 },
    { 65 },
    { 65 },
    { 65 },
    { 65 },
    { 65 },
    { 65 },
    { 65 },
    { 65 },
    { 65 },
    { 65 },
    { 65 },
    { 65 },
    { 65 },
    { 65 },
    { 65 },
    { 65 },
    { 65 },
    { 65 },
    { 65 },
    { 65 },
    { 65 },
    { 65 },
    { 65 },
    { 65 },
    { 65 },
    { 65 },
    { 65 },
    { 65 },
    { 65 },
    { 65 },
    { 65 },
    { 65 },
    { 65 },
    { 65 },
    { 65 },
    { 65 },
    { 65 },
    { 65 },
    { 65 },
    { 65 },
    { 65 },
    { 65 },
    { 65 },
    { 65 },
    { 65 },
    { 65 },
    { 65 },
    { 65 },
    { 65 },
    { 65 },
    { 65 },
    { 65 },
    { 65 },
    { 65 },
    { 65 },
    { 65 },
    { 65 },
    { 65 },
    { 65 },
    { 65 },
    { 65 },
    { 65 },
    { 65 },
    { 65 },
    { 65 },
    { 65 },
    { 65 },
    { 65 },
    { 65 },
    { 65 },
    { 65 },
    { 65 },
    { 65 },
    { 65 },
    { 65 },
    { 65 },
    { 65 },
    { 65 },
    { 65 },
    { 65 },
    { 65 },
    { 65 },
    { 65 },
    { 65 },
    { 65 },
    { 65 },
    { 65 },
    { 65 },
    { 65 },
    { 65 },
    { 65 },
    { 65 },
    { 65 },
    { 65 },
    { 65 },
    { 65 },
    { 65 },
    { 65 },
    { 65 },
    { 65 },
    { 65 },
    { 65 },
    { 65 },
    { 65 },
    { 65 },
    { 65 },
    { 65 },
    { 65 },
    { 65 },
    { 65 },
    { 65 },
    { 65 },
    { 65 },
    { 65 },
    { 65 },
    { 65 },
    { 65 },
    { 65 },
    { 65 },
    { 65 },
    { 65 },
    { 65 },
    { 65 },
    { 65 },
    { 65 },
    { 65 },
    { 65 },
    { 65 },
    { 65 },
    { 65 },
    { 65 },
    { 65 },
    { 65 },
    { 65 },
    { 65 },
    { 65 },
    { 65 },
    { 65 },
    { 65 },
    { 65 },
    { 65 },
    { 65 },
    { 65 },
    { 65 },
    { 65 },
    { 65 },
    { 65 },
    { 65 },
    { 65 },
    { 65 },
    { 65 },
    { 65 },
    { 65 },
    { 65 },
    { 65 },
    { 65 },
    { 65 },
    { 65 },
    { 65 },
    { 65 },
    { 65 },
    { 65 },
    { 65 },
    { 65 },
    { 65 },
    { 65 },
    { 65 },
    { 65 },
    { 65 },
    { 65 },
    { 65 },
    { 65 },
    { 65 },
    { 65 },
    { 65 },
    { 65 },
    { 65 },
    { 65 },
    { 65 },
    { 65 },
    { 65 },
    { 65 },
    { 65 },
    { 65 },
    { 65 },
    { 65 },
    { 65 },
    { 65 },
    { 65 },
    { 65 },
    { 65 },
    { 65 },
    { 65 },
    { 65 },
    { 65 },
    { 39 },
    { 81 },
    { 45 },
    { 45 },
    { 45 },
    { 45 },
    { 45 },
    { 45 },
    { 45 },
    { 45 },
    { 81 },
    { 81 },
    { 81 },
    { 81 },
    { 81 },
    { 81 },
    { 81 },
    { 81 },
    { 81 },
    { 81 },
    { 46 },
    { 81 },
    { 81 },
    { 48 },
    { 81 },
    { 81 },
    { 81 },
    { 81 },
    { 81 },
    { 81 },
    { 81 },
    { 81 },
    { 81 },
    { 81 },
    { 81 },
    { 81 },
    { 81 },
    { 81 },
    { 81 },
    { 81 },
    { 81 },
    { 81 },
    { 51 },
    { 81 },
    { 81 },
    { 81 },
    { 81 },
    { 81 },
    { 81 },
    { 81 },
    { 81 },
    { 81 },
    { 46 },
    { 81 },
    { 81 },
    { 48 },
    { 81 },
    { 81 },
    { 81 },
    { 81 },
    { 81 },
    { 81 },
    { 81 },
    { 81 },
    { 81 },
    { 81 },
    { 81 },
    { 81 },
    { 81 },
    { 81 },
    { 81 },
    { 81 },
    { 81 },
    { 81 },
    { 51 },
    { 39 },
    { 81 },
    { 61 },
    { 61 },
    { 61 },
    { 61 },
    { 61 },
    { 61 },
    { 61 },
    { 61 },
    { 61 },
    { 61 },
    { 81 },
    { 81 },
    { 81 },
    { 81 },
    { 81 },
    { 81 },
    { 81 },
    { 81 },
    { 81 },
    { 81 },
    { 81 },
    { 48 },
    { 81 },
    { 81 },
    { 81 },
    { 81 },
    { 81 },
    { 81 },
    { 81 },
    { 81 },
    { 81 },
    { 81 },
    { 81 },
    { 81 },
    { 81 },
    { 81 },
    { 81 },
    { 81 },
    { 81 },
    { 81 },
    { 81 },
    { 81 },
    { 81 },
    { 81 },
    { 81 },
    { 81 },
    { 81 },
    { 81 },
    { 81 },
    { 81 },
    { 81 },
    { 81 },
    { 81 },
    { 48 },
    { 69 },
    { 69 },
    { 69 },
    { 69 },
    { 69 },
    { 69 },
    { 69 },
    { 69 },
    { 69 },
    { 69 },
    { 81 },
    { 81 },
    { 81 },
    { 81 },
    { 81 },
    { 81 },
    { 81 },
    { 69 },
    { 69 },
    { 69 },
    { 69 },
    { 69 },
    { 69 },
    { 69 },
    { 69 },
    { 69 },
    { 69 },
    { 69 },
    { 69 },
    { 69 },
    { 69 },
    { 69 },
    { 69 },
    { 69 },
    { 69 },
    { 69 },
    { 69 },
    { 69 },
    { 69 },
    { 69 },
    { 69 },
    { 69 },
    { 69 },
    { 81 },
    { 81 },
    { 81 },
    { 81 },
    { 69 },
    { 81 },
    { 69 },
    { 69 },
    { 69 },
    { 69 },
    { 69 },
    { 69 },
    { 69 },
    { 69 },
    { 69 },
    { 69 },
    { 69 },
    { 69 },
    { 69 },
    { 69 },
    { 69 },
    { 69 },
    { 69 },
    { 69 },
    { 69 },
    { 69 },
    { 69 },
    { 69 },
    { 69 },
    { 69 },
    { 69 },
    { 69 },
    { 69 },
    { 69 },
    { 69 },
    { 69 },
    { 69 },
    { 69 },
    { 69 },
    { 69 },
    { 69 },
    { 69 },
    { 81 },
    { 81 },
    { 81 },
    { 81 },
    { 81 },
    { 81 },
    { 81 },
    { 69 },
    { 69 },
    { 69 },
    { 69 },
    { 69 },
    { 69 },
    { 69 },
    { 69 },
    { 69 },
    { 69 },
    { 69 },
    { 69 },
    { 69 },
    { 69 },
    { 69 },
    { 69 },
    { 69 },
    { 69 },
    { 69 },
    { 69 },
    { 69 },
    { 69 },
    { 69 },
    { 69 },
    { 69 },
    { 69 },
    { 81 },
    { 81 },
    { 81 },
    { 81 },
    { 69 },
    { 81 },
    { 69 },
    { 69 },
    { 69 },
    { 69 },
    { 69 },
    { 69 },
    { 69 },
    { 69 },
    { 69 },
    { 69 },
    { 69 },
    { 69 },
    { 69 },
    { 69 },
    { 69 },
    { 69 },
    { 69 },
    { 69 },
    { 69 },
    { 69 },
    { 69 },
    { 69 },
    { 69 },
    { 69 },
    { 69 },
    { 69 },
    { 32 },
    { 32 },
    { 32 },
    { 32 },
    { 32 },
    { 32 },
    { 32 },
    { 32 },
    { 33 },
    { 34 },
    { 32 },
    { 32 },
    { 32 },
    { 32 },
    { 32 },
    { 32 },
    { 32 },
    { 32 },
    { 32 },
    { 32 },
    { 32 },
    { 32 },
    { 32 },
    { 32 },
    { 32 },
    { 32 },
    { 32 },
    { 32 },
    { 32 },
    { 32 },
    { 32 },
    { 33 },
    { 32 },
    { 35 },
    { 32 },
    { 32 },
    { 32 },
    { 32 },
    { 36 },
    { 32 },
    { 32 },
    { 32 },
    { 37 },
    { 62 },
    { 37 },
    { 32 },
    { 63 },
    { 66 },
    { 67 },
    { 67 },
    { 67 },
    { 67 },
    { 67 },
    { 67 },
    { 67 },
    { 67 },
    { 67 },
    { 32 },
    { 62 },
    { 32 },
    { 32 },
    { 32 },
    { 32 },
    { 32 },
    { 68 },
    { 68 },
    { 68 },
    { 68 },
    { 68 },
    { 68 },
    { 68 },
    { 68 },
    { 68 },
    { 68 },
    { 68 },
    { 68 },
    { 68 },
    { 68 },
    { 68 },
    { 68 },
    { 68 },
    { 68 },
    { 68 },
    { 68 },
    { 68 },
    { 68 },
    { 68 },
    { 68 },
    { 68 },
    { 68 },
    { 62 },
    { 32 },
    { 62 },
    { 32 },
    { 68 },
    { 32 },
    { 68 },
    { 68 },
    { 68 },
    { 68 },
    { 68 },
    { 68 },
    { 68 },
    { 68 },
    { 68 },
    { 68 },
    { 68 },
    { 68 },
    { 68 },
    { 68 },
    { 68 },
    { 68 },
    { 68 },
    { 68 },
    { 68 },
    { 68 },
    { 68 },
    { 68 },
    { 68 },
    { 68 },
    { 68 },
    { 68 },
    { 62 },
    { 32 },
    { 62 },
    { 32 },
    { 32 },
    { 32 },
    { 32 },
    { 32 },
    { 32 },
    { 32 },
    { 32 },
    { 32 },
    { 32 },
    { 32 },
    { 32 },
    { 32 },
    { 32 },
    { 32 },
    { 32 },
    { 32 },
    { 32 },
    { 32 },
    { 32 },
    { 32 },
    { 32 },
    { 32 },
    { 32 },
    { 32 },
    { 32 },
    { 32 },
    { 32 },
    { 32 },
    { 32 },
    { 32 },
    { 32 },
    { 32 },
    { 32 },
    { 32 },
    { 32 },
    { 32 },
    { 32 },
    { 32 },
    { 32 },
    { 32 },
    { 32 },
    { 32 },
    { 32 },
    { 32 },
    { 32 },
    { 32 },
    { 32 },
    { 32 },
    { 32 },
    { 32 },
    { 32 },
    { 32 },
    { 32 },
    { 32 },
    { 32 },
    { 32 },
    { 32 },
    { 32 },
    { 32 },
    { 32 },
    { 32 },
    { 32 },
    { 32 },
    { 32 },
    { 32 },
    { 32 },
    { 32 },
    { 32 },
    { 32 },
    { 32 },
    { 32 },
    { 32 },
    { 32 },
    { 32 },
    { 32 },
    { 32 },
    { 32 },
    { 32 },
    { 32 },
    { 32 },
    { 32 },
    { 32 },
    { 32 },
    { 32 },
    { 32 },
    { 32 },
    { 32 },
    { 32 },
    { 32 },
    { 32 },
    { 32 },
    { 32 },
    { 32 },
    { 32 },
    { 32 },
    { 32 },
    { 32 },
    { 32 },
    { 32 },
    { 32 },
    { 32 },
    { 32 },
    { 32 },
    { 32 },
    { 32 },
    { 32 },
    { 32 },
    { 32 },
    { 32 },
    { 32 },
    { 32 },
    { 32 },
    { 32 },
    { 32 },
    { 32 },
    { 32 },
    { 32 },
    { 32 },
    { 32 },
    { 32 },
    { 32 },
    { 32 },
    { 32 },
    { 32 },
    { 32 },
    { 32 },
    { 32 },
    { 32 },
    { 32 },
    { 72 },
    { 72 },
    { 74 },
    { 74 },
    { 72 },
    { 72 },
    { 74 },
    { 74 },
    { 72 },
    { 72 },
    { 74 },
    { 74 },
    { 72 },
    { 72 },
    { 74 },
    { 74 },
    { 72 },
    { 72 },
    { 74 },
    { 74 },
    { 72 },
    { 72 },
    { 74 },
    { 74 },
    { 72 },
    { 72 },
    { 74 },
    { 74 },
    { 72 },
    { 72 },
    { 74 },
    { 74 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 75 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 77 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 72 },
    { 72 },
    { 74 },
    { 74 },
    { 72 },
    { 72 },
    { 74 },
    { 74 },
    { 72 },
    { 72 },
    { 74 },
    { 74 },
    { 72 },
    { 72 },
    { 74 },
    { 74 },
    { 72 },
    { 72 },
    { 74 },
    { 74 },
    { 72 },
    { 72 },
    { 74 },
    { 74 },
    { 72 },
    { 72 },
    { 74 },
    { 74 },
    { 72 },
    { 72 },
    { 74 },
    { 74 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 75 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 77 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 76 },
    { 76 },
    { 80 },
    { 80 },
    { 76 },
    { 76 },
    { 80 },
    { 80 },
    { 76 },
    { 76 },
    { 80 },
    { 80 },
    { 76 },
    { 76 },
    { 80 },
    { 80 },
    { 76 },
    { 76 },
    { 80 },
    { 80 },
    { 76 },
    { 76 },
    { 80 },
    { 80 },
    { 76 },
    { 76 },
    { 80 },
    { 80 },
    { 76 },
    { 76 },
    { 80 },
    { 80 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 75 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 77 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 78 },
    { 78 },
    { 79 },
    { 79 },
    { 78 },
    { 78 },
    { 79 },
    { 79 },
    { 78 },
    { 78 },
    { 79 },
    { 79 },
    { 78 },
    { 78 },
    { 79 },
    { 79 },
    { 78 },
    { 78 },
    { 79 },
    { 79 },
    { 78 },
    { 78 },
    { 79 },
    { 79 },
    { 78 },
    { 78 },
    { 79 },
    { 79 },
    { 78 },
    { 78 },
    { 79 },
    { 79 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 75 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 77 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 },
    { 73 }
};
BarfCpp_::Size const Scanner::ms_transition_count_ = sizeof(Scanner::ms_transition_table_) / sizeof(*Scanner::ms_transition_table_);

char const *const Scanner::ms_accept_handler_regex_[] =
{
    "{ANY}*[*]/",
    "{ANY}*{EOF}",
    "'",
    "\\\\?{EOF}",
    "{ANY}",
    "{OCT_CHAR}",
    "{HEX_CHAR}",
    "{CHAR_ESC_CHAR}",
    "{CHAR_NORMAL_CHAR}",
    "\\\\?{EOF}",
    "{ANY}",
    "/[*]",
    "//.*",
    "'",
    "\"",
    "{OPERATOR}",
    "{IDENTIFIER}",
    "{BIN}",
    "{OCT}",
    "{DEC}",
    "{HEX}",
    "{DEC_FLOAT}|{HEX_FLOAT}",
    "{WHITESPACE}",
    "{NEWLINE}",
    "{EOF}",
    ".",
    "([^\\\\]|\\\\{ANY})*\"",
    "([^\\\\]|\\\\{ANY})*\\\\?{EOF}"
};
BarfCpp_::Uint32 const Scanner::ms_accept_handler_count_ = sizeof(Scanner::ms_accept_handler_regex_) / sizeof(*Scanner::ms_accept_handler_regex_);

// ///////////////////////////////////////////////////////////////////////
// end of internal reflex-generated parser guts
// ///////////////////////////////////////////////////////////////////////


#line 182 "xrb_parse_datafile_scanner.reflex"

} // end of namespace DataFile
} // end of namespace Parse
} // end of namespace Xrb

#line 7493 "xrb_parse_datafile_scanner.cpp"
