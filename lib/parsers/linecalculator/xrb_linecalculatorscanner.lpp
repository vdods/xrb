%{

// ///////////////////////////////////////////////////////////////////////////
// xrb_linecalculatorscanner.lpp by Victor Dods, created 2005/07/21
// ///////////////////////////////////////////////////////////////////////////
// Unless a different license was explicitly granted in writing by the
// copyright holder (Victor Dods), this software is freely distributable under
// the terms of the GNU General Public License, version 2.  Any works deriving
// from this work must also be released under the GNU GPL.  See the included
// file LICENSE for details.
// ///////////////////////////////////////////////////////////////////////////

#include "xrb.h"

#include <stdio.h>
#include <stdlib.h>

using namespace Xrb;

// for some dumb reason, the header file generated
// by bison doesn't define YYSTYPE.
#define YYSTYPE Float

// i just hope this header filename is generated consistently across
// all platforms by Automake.
#include "liblinecalculatorparser_la-xrb_linecalculatorparser.h"

%}

%option bison-bridge
%option noyywrap
%option reentrant
%option yylineno
%option case-insensitive

INTEGER                         [0-9]+
FRACTIONAL                      [0-9]+"."[0-9]*|[0-9]*"."[0-9]+
FLOAT                           {INTEGER}|{FRACTIONAL}
SIN                             sin
COS                             cos
TAN                             tan
ASIN                            asin
ACOS                            acos
ATAN                            atan
EXP                             exp
E                               e
LN                              ln
LOG                             log
OPERATOR                        [-+*/^()]
WHITESPACE                      [ \t\n]
NEWLINE                         \n

%%

{FLOAT}                 {
                            *yylval = static_cast<Float>(strtod(yytext, NULL));
                            return FLOAT;
                        }
SIN                     return SIN;
COS                     return COS;
TAN                     return TAN;
ASIN                    return ASIN;
ACOS                    return ACOS;
ATAN                    return ATAN;
EXP                     return EXP;
E                       return E;
LN                      return LN;
LOG                     return LOG;
{OPERATOR}              {
                            return yytext[0];
                        }
<<EOF>>                 {
                            return END_OF_FILE;
                        }
{WHITESPACE}+           /* ignore whitespace */
.                       {
                            return yytext[0];
                        }

%%

void LineCalculator_buffer_state_initialize (
    char const *string,
    void *buffer_state,
    void *line_calculator_scanner)
{
    ASSERT1(string != NULL)
    ASSERT1(buffer_state != NULL)
    ASSERT1(line_calculator_scanner != NULL)

    YY_BUFFER_STATE *cast_buffer_state = static_cast<YY_BUFFER_STATE *>(buffer_state);
    *cast_buffer_state = LineCalculator__scan_string(string, line_calculator_scanner);
}

void LineCalculator_buffer_state_shutdown (
    void *buffer_state,
    void *line_calculator_scanner)
{
    ASSERT1(buffer_state != NULL)
    ASSERT1(line_calculator_scanner != NULL)

    YY_BUFFER_STATE cast_buffer_state = static_cast<YY_BUFFER_STATE>(buffer_state);
    LineCalculator__delete_buffer(cast_buffer_state, line_calculator_scanner);
}

